/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var umd;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/mithril/api/mount-redraw.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/api/mount-redraw.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function(render, schedule, console) {\n\tvar subscriptions = []\n\tvar rendering = false\n\tvar pending = false\n\n\tfunction sync() {\n\t\tif (rendering) throw new Error(\"Nested m.redraw.sync() call\")\n\t\trendering = true\n\t\tfor (var i = 0; i < subscriptions.length; i += 2) {\n\t\t\ttry { render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw) }\n\t\t\tcatch (e) { console.error(e) }\n\t\t}\n\t\trendering = false\n\t}\n\n\tfunction redraw() {\n\t\tif (!pending) {\n\t\t\tpending = true\n\t\t\tschedule(function() {\n\t\t\t\tpending = false\n\t\t\t\tsync()\n\t\t\t})\n\t\t}\n\t}\n\n\tredraw.sync = sync\n\n\tfunction mount(root, component) {\n\t\tif (component != null && component.view == null && typeof component !== \"function\") {\n\t\t\tthrow new TypeError(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t}\n\n\t\tvar index = subscriptions.indexOf(root)\n\t\tif (index >= 0) {\n\t\t\tsubscriptions.splice(index, 2)\n\t\t\trender(root, [], redraw)\n\t\t}\n\n\t\tif (component != null) {\n\t\t\tsubscriptions.push(root, component)\n\t\t\trender(root, Vnode(component), redraw)\n\t\t}\n\t}\n\n\treturn {mount: mount, redraw: redraw}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/api/mount-redraw.js?");

/***/ }),

/***/ "./node_modules/mithril/api/router.js":
/*!********************************************!*\
  !*** ./node_modules/mithril/api/router.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\nvar m = __webpack_require__(/*! ../render/hyperscript */ \"./node_modules/mithril/render/hyperscript.js\")\nvar Promise = __webpack_require__(/*! ../promise/promise */ \"./node_modules/mithril/promise/promise.js\")\n\nvar buildPathname = __webpack_require__(/*! ../pathname/build */ \"./node_modules/mithril/pathname/build.js\")\nvar parsePathname = __webpack_require__(/*! ../pathname/parse */ \"./node_modules/mithril/pathname/parse.js\")\nvar compileTemplate = __webpack_require__(/*! ../pathname/compileTemplate */ \"./node_modules/mithril/pathname/compileTemplate.js\")\nvar assign = __webpack_require__(/*! ../pathname/assign */ \"./node_modules/mithril/pathname/assign.js\")\n\nvar sentinel = {}\n\nmodule.exports = function($window, mountRedraw) {\n\tvar fireAsync\n\n\tfunction setPath(path, data, options) {\n\t\tpath = buildPathname(path, data)\n\t\tif (fireAsync != null) {\n\t\t\tfireAsync()\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, route.prefix + path)\n\t\t\telse $window.history.pushState(state, title, route.prefix + path)\n\t\t}\n\t\telse {\n\t\t\t$window.location.href = route.prefix + path\n\t\t}\n\t}\n\n\tvar currentResolver = sentinel, component, attrs, currentPath, lastUpdate\n\n\tvar SKIP = route.SKIP = {}\n\n\tfunction route(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\t// 0 = start\n\t\t// 1 = init\n\t\t// 2 = ready\n\t\tvar state = 0\n\n\t\tvar compiled = Object.keys(routes).map(function(route) {\n\t\t\tif (route[0] !== \"/\") throw new SyntaxError(\"Routes must start with a `/`\")\n\t\t\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(route)) {\n\t\t\t\tthrow new SyntaxError(\"Route parameter names must be separated with either `/`, `.`, or `-`\")\n\t\t\t}\n\t\t\treturn {\n\t\t\t\troute: route,\n\t\t\t\tcomponent: routes[route],\n\t\t\t\tcheck: compileTemplate(route),\n\t\t\t}\n\t\t})\n\t\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\t\tvar p = Promise.resolve()\n\t\tvar scheduled = false\n\t\tvar onremove\n\n\t\tfireAsync = null\n\n\t\tif (defaultRoute != null) {\n\t\t\tvar defaultData = parsePathname(defaultRoute)\n\n\t\t\tif (!compiled.some(function (i) { return i.check(defaultData) })) {\n\t\t\t\tthrow new ReferenceError(\"Default route doesn't match any known routes\")\n\t\t\t}\n\t\t}\n\n\t\tfunction resolveRoute() {\n\t\t\tscheduled = false\n\t\t\t// Consider the pathname holistically. The prefix might even be invalid,\n\t\t\t// but that's not our problem.\n\t\t\tvar prefix = $window.location.hash\n\t\t\tif (route.prefix[0] !== \"#\") {\n\t\t\t\tprefix = $window.location.search + prefix\n\t\t\t\tif (route.prefix[0] !== \"?\") {\n\t\t\t\t\tprefix = $window.location.pathname + prefix\n\t\t\t\t\tif (prefix[0] !== \"/\") prefix = \"/\" + prefix\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This seemingly useless `.concat()` speeds up the tests quite a bit,\n\t\t\t// since the representation is consistently a relatively poorly\n\t\t\t// optimized cons string.\n\t\t\tvar path = prefix.concat()\n\t\t\t\t.replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\t\t\t.slice(route.prefix.length)\n\t\t\tvar data = parsePathname(path)\n\n\t\t\tassign(data.params, $window.history.state)\n\n\t\t\tfunction fail() {\n\t\t\t\tif (path === defaultRoute) throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t\t\tsetPath(defaultRoute, null, {replace: true})\n\t\t\t}\n\n\t\t\tloop(0)\n\t\t\tfunction loop(i) {\n\t\t\t\t// 0 = init\n\t\t\t\t// 1 = scheduled\n\t\t\t\t// 2 = done\n\t\t\t\tfor (; i < compiled.length; i++) {\n\t\t\t\t\tif (compiled[i].check(data)) {\n\t\t\t\t\t\tvar payload = compiled[i].component\n\t\t\t\t\t\tvar matchedRoute = compiled[i].route\n\t\t\t\t\t\tvar localComp = payload\n\t\t\t\t\t\tvar update = lastUpdate = function(comp) {\n\t\t\t\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\t\t\t\tif (comp === SKIP) return loop(i + 1)\n\t\t\t\t\t\t\tcomponent = comp != null && (typeof comp.view === \"function\" || typeof comp === \"function\")? comp : \"div\"\n\t\t\t\t\t\t\tattrs = data.params, currentPath = path, lastUpdate = null\n\t\t\t\t\t\t\tcurrentResolver = payload.render ? payload : null\n\t\t\t\t\t\t\tif (state === 2) mountRedraw.redraw()\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tstate = 2\n\t\t\t\t\t\t\t\tmountRedraw.redraw.sync()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// There's no understating how much I *wish* I could\n\t\t\t\t\t\t// use `async`/`await` here...\n\t\t\t\t\t\tif (payload.view || typeof payload === \"function\") {\n\t\t\t\t\t\t\tpayload = {}\n\t\t\t\t\t\t\tupdate(localComp)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (payload.onmatch) {\n\t\t\t\t\t\t\tp.then(function () {\n\t\t\t\t\t\t\t\treturn payload.onmatch(data.params, path, matchedRoute)\n\t\t\t\t\t\t\t}).then(update, fail)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse update(\"div\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfail()\n\t\t\t}\n\t\t}\n\n\t\t// Set it unconditionally so `m.route.set` and `m.route.Link` both work,\n\t\t// even if neither `pushState` nor `hashchange` are supported. It's\n\t\t// cleared if `hashchange` is used, since that makes it automatically\n\t\t// async.\n\t\tfireAsync = function() {\n\t\t\tif (!scheduled) {\n\t\t\t\tscheduled = true\n\t\t\t\tcallAsync(resolveRoute)\n\t\t\t}\n\t\t}\n\n\t\tif (typeof $window.history.pushState === \"function\") {\n\t\t\tonremove = function() {\n\t\t\t\t$window.removeEventListener(\"popstate\", fireAsync, false)\n\t\t\t}\n\t\t\t$window.addEventListener(\"popstate\", fireAsync, false)\n\t\t} else if (route.prefix[0] === \"#\") {\n\t\t\tfireAsync = null\n\t\t\tonremove = function() {\n\t\t\t\t$window.removeEventListener(\"hashchange\", resolveRoute, false)\n\t\t\t}\n\t\t\t$window.addEventListener(\"hashchange\", resolveRoute, false)\n\t\t}\n\n\t\treturn mountRedraw.mount(root, {\n\t\t\tonbeforeupdate: function() {\n\t\t\t\tstate = state ? 2 : 1\n\t\t\t\treturn !(!state || sentinel === currentResolver)\n\t\t\t},\n\t\t\toncreate: resolveRoute,\n\t\t\tonremove: onremove,\n\t\t\tview: function() {\n\t\t\t\tif (!state || sentinel === currentResolver) return\n\t\t\t\t// Wrap in a fragment to preserve existing key semantics\n\t\t\t\tvar vnode = [Vnode(component, attrs.key, attrs)]\n\t\t\t\tif (currentResolver) vnode = currentResolver.render(vnode[0])\n\t\t\t\treturn vnode\n\t\t\t},\n\t\t})\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\tsetPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = \"#!\"\n\troute.Link = {\n\t\tview: function(vnode) {\n\t\t\tvar options = vnode.attrs.options\n\t\t\t// Remove these so they don't get overwritten\n\t\t\tvar attrs = {}, onclick, href\n\t\t\tassign(attrs, vnode.attrs)\n\t\t\t// The first two are internal, but the rest are magic attributes\n\t\t\t// that need censored to not screw up rendering.\n\t\t\tattrs.selector = attrs.options = attrs.key = attrs.oninit =\n\t\t\tattrs.oncreate = attrs.onbeforeupdate = attrs.onupdate =\n\t\t\tattrs.onbeforeremove = attrs.onremove = null\n\n\t\t\t// Do this now so we can get the most current `href` and `disabled`.\n\t\t\t// Those attributes may also be specified in the selector, and we\n\t\t\t// should honor that.\n\t\t\tvar child = m(vnode.attrs.selector || \"a\", attrs, vnode.children)\n\n\t\t\t// Let's provide a *right* way to disable a route link, rather than\n\t\t\t// letting people screw up accessibility on accident.\n\t\t\t//\n\t\t\t// The attribute is coerced so users don't get surprised over\n\t\t\t// `disabled: 0` resulting in a button that's somehow routable\n\t\t\t// despite being visibly disabled.\n\t\t\tif (child.attrs.disabled = Boolean(child.attrs.disabled)) {\n\t\t\t\tchild.attrs.href = null\n\t\t\t\tchild.attrs[\"aria-disabled\"] = \"true\"\n\t\t\t\t// If you *really* do want to do this on a disabled link, use\n\t\t\t\t// an `oncreate` hook to add it.\n\t\t\t\tchild.attrs.onclick = null\n\t\t\t} else {\n\t\t\t\tonclick = child.attrs.onclick\n\t\t\t\thref = child.attrs.href\n\t\t\t\tchild.attrs.href = route.prefix + href\n\t\t\t\tchild.attrs.onclick = function(e) {\n\t\t\t\t\tvar result\n\t\t\t\t\tif (typeof onclick === \"function\") {\n\t\t\t\t\t\tresult = onclick.call(e.currentTarget, e)\n\t\t\t\t\t} else if (onclick == null || typeof onclick !== \"object\") {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t} else if (typeof onclick.handleEvent === \"function\") {\n\t\t\t\t\t\tonclick.handleEvent(e)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Adapted from React Router's implementation:\n\t\t\t\t\t// https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js\n\t\t\t\t\t//\n\t\t\t\t\t// Try to be flexible and intuitive in how we handle links.\n\t\t\t\t\t// Fun fact: links aren't as obvious to get right as you\n\t\t\t\t\t// would expect. There's a lot more valid ways to click a\n\t\t\t\t\t// link than this, and one might want to not simply click a\n\t\t\t\t\t// link, but right click or command-click it to copy the\n\t\t\t\t\t// link target, etc. Nope, this isn't just for blind people.\n\t\t\t\t\tif (\n\t\t\t\t\t\t// Skip if `onclick` prevented default\n\t\t\t\t\t\tresult !== false && !e.defaultPrevented &&\n\t\t\t\t\t\t// Ignore everything but left clicks\n\t\t\t\t\t\t(e.button === 0 || e.which === 0 || e.which === 1) &&\n\t\t\t\t\t\t// Let the browser handle `target=_blank`, etc.\n\t\t\t\t\t\t(!e.currentTarget.target || e.currentTarget.target === \"_self\") &&\n\t\t\t\t\t\t// No modifier keys\n\t\t\t\t\t\t!e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey\n\t\t\t\t\t) {\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\te.redraw = false\n\t\t\t\t\t\troute.set(href, null, options)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn child\n\t\t},\n\t}\n\troute.param = function(key) {\n\t\treturn attrs && key != null ? attrs[key] : attrs\n\t}\n\n\treturn route\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/api/router.js?");

/***/ }),

/***/ "./node_modules/mithril/hyperscript.js":
/*!*********************************************!*\
  !*** ./node_modules/mithril/hyperscript.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hyperscript = __webpack_require__(/*! ./render/hyperscript */ \"./node_modules/mithril/render/hyperscript.js\")\n\nhyperscript.trust = __webpack_require__(/*! ./render/trust */ \"./node_modules/mithril/render/trust.js\")\nhyperscript.fragment = __webpack_require__(/*! ./render/fragment */ \"./node_modules/mithril/render/fragment.js\")\n\nmodule.exports = hyperscript\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/hyperscript.js?");

/***/ }),

/***/ "./node_modules/mithril/index.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hyperscript = __webpack_require__(/*! ./hyperscript */ \"./node_modules/mithril/hyperscript.js\")\nvar request = __webpack_require__(/*! ./request */ \"./node_modules/mithril/request.js\")\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"./node_modules/mithril/mount-redraw.js\")\n\nvar m = function m() { return hyperscript.apply(this, arguments) }\nm.m = hyperscript\nm.trust = hyperscript.trust\nm.fragment = hyperscript.fragment\nm.mount = mountRedraw.mount\nm.route = __webpack_require__(/*! ./route */ \"./node_modules/mithril/route.js\")\nm.render = __webpack_require__(/*! ./render */ \"./node_modules/mithril/render.js\")\nm.redraw = mountRedraw.redraw\nm.request = request.request\nm.jsonp = request.jsonp\nm.parseQueryString = __webpack_require__(/*! ./querystring/parse */ \"./node_modules/mithril/querystring/parse.js\")\nm.buildQueryString = __webpack_require__(/*! ./querystring/build */ \"./node_modules/mithril/querystring/build.js\")\nm.parsePathname = __webpack_require__(/*! ./pathname/parse */ \"./node_modules/mithril/pathname/parse.js\")\nm.buildPathname = __webpack_require__(/*! ./pathname/build */ \"./node_modules/mithril/pathname/build.js\")\nm.vnode = __webpack_require__(/*! ./render/vnode */ \"./node_modules/mithril/render/vnode.js\")\nm.PromisePolyfill = __webpack_require__(/*! ./promise/polyfill */ \"./node_modules/mithril/promise/polyfill.js\")\n\nmodule.exports = m\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/index.js?");

/***/ }),

/***/ "./node_modules/mithril/mount-redraw.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/mount-redraw.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar render = __webpack_require__(/*! ./render */ \"./node_modules/mithril/render.js\")\n\nmodule.exports = __webpack_require__(/*! ./api/mount-redraw */ \"./node_modules/mithril/api/mount-redraw.js\")(render, requestAnimationFrame, console)\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/mount-redraw.js?");

/***/ }),

/***/ "./node_modules/mithril/pathname/assign.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/pathname/assign.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = Object.assign || function(target, source) {\n\tif(source) Object.keys(source).forEach(function(key) { target[key] = source[key] })\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/pathname/assign.js?");

/***/ }),

/***/ "./node_modules/mithril/pathname/build.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/build.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar buildQueryString = __webpack_require__(/*! ../querystring/build */ \"./node_modules/mithril/querystring/build.js\")\nvar assign = __webpack_require__(/*! ./assign */ \"./node_modules/mithril/pathname/assign.js\")\n\n// Returns `path` from `template` + `params`\nmodule.exports = function(template, params) {\n\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(template)) {\n\t\tthrow new SyntaxError(\"Template parameter names *must* be separated\")\n\t}\n\tif (params == null) return template\n\tvar queryIndex = template.indexOf(\"?\")\n\tvar hashIndex = template.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? template.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = template.slice(0, pathEnd)\n\tvar query = {}\n\n\tassign(query, params)\n\n\tvar resolved = path.replace(/:([^\\/\\.-]+)(\\.{3})?/g, function(m, key, variadic) {\n\t\tdelete query[key]\n\t\t// If no such parameter exists, don't interpolate it.\n\t\tif (params[key] == null) return m\n\t\t// Escape normal parameters, but not variadic ones.\n\t\treturn variadic ? params[key] : encodeURIComponent(String(params[key]))\n\t})\n\n\t// In case the template substitution adds new query/hash parameters.\n\tvar newQueryIndex = resolved.indexOf(\"?\")\n\tvar newHashIndex = resolved.indexOf(\"#\")\n\tvar newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex\n\tvar newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex\n\tvar result = resolved.slice(0, newPathEnd)\n\n\tif (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)\n\tif (newQueryIndex >= 0) result += (queryIndex < 0 ? \"?\" : \"&\") + resolved.slice(newQueryIndex, newQueryEnd)\n\tvar querystring = buildQueryString(query)\n\tif (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? \"?\" : \"&\") + querystring\n\tif (hashIndex >= 0) result += template.slice(hashIndex)\n\tif (newHashIndex >= 0) result += (hashIndex < 0 ? \"\" : \"&\") + resolved.slice(newHashIndex)\n\treturn result\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/pathname/build.js?");

/***/ }),

/***/ "./node_modules/mithril/pathname/compileTemplate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mithril/pathname/compileTemplate.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar parsePathname = __webpack_require__(/*! ./parse */ \"./node_modules/mithril/pathname/parse.js\")\n\n// Compiles a template into a function that takes a resolved path (without query\n// strings) and returns an object containing the template parameters with their\n// parsed values. This expects the input of the compiled template to be the\n// output of `parsePathname`. Note that it does *not* remove query parameters\n// specified in the template.\nmodule.exports = function(template) {\n\tvar templateData = parsePathname(template)\n\tvar templateKeys = Object.keys(templateData.params)\n\tvar keys = []\n\tvar regexp = new RegExp(\"^\" + templateData.path.replace(\n\t\t// I escape literal text so people can use things like `:file.:ext` or\n\t\t// `:lang-:locale` in routes. This is all merged into one pass so I\n\t\t// don't also accidentally escape `-` and make it harder to detect it to\n\t\t// ban it from template parameters.\n\t\t/:([^\\/.-]+)(\\.{3}|\\.(?!\\.)|-)?|[\\\\^$*+.()|\\[\\]{}]/g,\n\t\tfunction(m, key, extra) {\n\t\t\tif (key == null) return \"\\\\\" + m\n\t\t\tkeys.push({k: key, r: extra === \"...\"})\n\t\t\tif (extra === \"...\") return \"(.*)\"\n\t\t\tif (extra === \".\") return \"([^/]+)\\\\.\"\n\t\t\treturn \"([^/]+)\" + (extra || \"\")\n\t\t}\n\t) + \"$\")\n\treturn function(data) {\n\t\t// First, check the params. Usually, there isn't any, and it's just\n\t\t// checking a static set.\n\t\tfor (var i = 0; i < templateKeys.length; i++) {\n\t\t\tif (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false\n\t\t}\n\t\t// If no interpolations exist, let's skip all the ceremony\n\t\tif (!keys.length) return regexp.test(data.path)\n\t\tvar values = regexp.exec(data.path)\n\t\tif (values == null) return false\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tdata.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])\n\t\t}\n\t\treturn true\n\t}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/pathname/compileTemplate.js?");

/***/ }),

/***/ "./node_modules/mithril/pathname/parse.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar parseQueryString = __webpack_require__(/*! ../querystring/parse */ \"./node_modules/mithril/querystring/parse.js\")\n\n// Returns `{path, params}` from `url`\nmodule.exports = function(url) {\n\tvar queryIndex = url.indexOf(\"?\")\n\tvar hashIndex = url.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? url.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = url.slice(0, pathEnd).replace(/\\/{2,}/g, \"/\")\n\n\tif (!path) path = \"/\"\n\telse {\n\t\tif (path[0] !== \"/\") path = \"/\" + path\n\t\tif (path.length > 1 && path[path.length - 1] === \"/\") path = path.slice(0, -1)\n\t}\n\treturn {\n\t\tpath: path,\n\t\tparams: queryIndex < 0\n\t\t\t? {}\n\t\t\t: parseQueryString(url.slice(queryIndex + 1, queryEnd)),\n\t}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/pathname/parse.js?");

/***/ }),

/***/ "./node_modules/mithril/promise/polyfill.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/promise/polyfill.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.prototype.finally = function(callback) {\n\treturn this.then(\n\t\tfunction(value) {\n\t\t\treturn PromisePolyfill.resolve(callback()).then(function() {\n\t\t\t\treturn value\n\t\t\t})\n\t\t},\n\t\tfunction(reason) {\n\t\t\treturn PromisePolyfill.resolve(callback()).then(function() {\n\t\t\t\treturn PromisePolyfill.reject(reason);\n\t\t\t})\n\t\t}\n\t)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\n\nmodule.exports = PromisePolyfill\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/promise/polyfill.js?");

/***/ }),

/***/ "./node_modules/mithril/promise/promise.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/promise/promise.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar PromisePolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/mithril/promise/polyfill.js\")\n\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") {\n\t\twindow.Promise = PromisePolyfill\n\t} else if (!window.Promise.prototype.finally) {\n\t\twindow.Promise.prototype.finally = PromisePolyfill.prototype.finally\n\t}\n\tmodule.exports = window.Promise\n} else if (typeof __webpack_require__.g !== \"undefined\") {\n\tif (typeof __webpack_require__.g.Promise === \"undefined\") {\n\t\t__webpack_require__.g.Promise = PromisePolyfill\n\t} else if (!__webpack_require__.g.Promise.prototype.finally) {\n\t\t__webpack_require__.g.Promise.prototype.finally = PromisePolyfill.prototype.finally\n\t}\n\tmodule.exports = __webpack_require__.g.Promise\n} else {\n\tmodule.exports = PromisePolyfill\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/promise/promise.js?");

/***/ }),

/***/ "./node_modules/mithril/querystring/build.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/build.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\n\tvar args = []\n\tfor (var key in object) {\n\t\tdestructure(key, object[key])\n\t}\n\n\treturn args.join(\"&\")\n\n\tfunction destructure(key, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/querystring/build.js?");

/***/ }),

/***/ "./node_modules/mithril/querystring/parse.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/parse.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\n\tvar entries = string.split(\"&\"), counters = {}, data = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\n\t\tvar levels = key.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data\n\t\tif (key.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key = levels.slice(0, j).join()\n\t\t\t\tif (counters[key] == null) {\n\t\t\t\t\tcounters[key] = Array.isArray(cursor) ? cursor.length : 0\n\t\t\t\t}\n\t\t\t\tlevel = counters[key]++\n\t\t\t}\n\t\t\t// Disallow direct prototype pollution\n\t\t\telse if (level === \"__proto__\") break\n\t\t\tif (j === levels.length - 1) cursor[level] = value\n\t\t\telse {\n\t\t\t\t// Read own properties exclusively to disallow indirect\n\t\t\t\t// prototype pollution\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(cursor, level)\n\t\t\t\tif (desc != null) desc = desc.value\n\t\t\t\tif (desc == null) cursor[level] = desc = isNumber ? [] : {}\n\t\t\t\tcursor = desc\n\t\t\t}\n\t\t}\n\t}\n\treturn data\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/querystring/parse.js?");

/***/ }),

/***/ "./node_modules/mithril/render.js":
/*!****************************************!*\
  !*** ./node_modules/mithril/render.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./render/render */ \"./node_modules/mithril/render/render.js\")(window)\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render.js?");

/***/ }),

/***/ "./node_modules/mithril/render/fragment.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/render/fragment.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\nvar hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ \"./node_modules/mithril/render/hyperscriptVnode.js\")\n\nmodule.exports = function() {\n\tvar vnode = hyperscriptVnode.apply(0, arguments)\n\n\tvnode.tag = \"[\"\n\tvnode.children = Vnode.normalizeChildren(vnode.children)\n\treturn vnode\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/fragment.js?");

/***/ }),

/***/ "./node_modules/mithril/render/hyperscript.js":
/*!****************************************************!*\
  !*** ./node_modules/mithril/render/hyperscript.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\nvar hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ \"./node_modules/mithril/render/hyperscriptVnode.js\")\n\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\n\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\n\nfunction compileSelector(selector) {\n\tvar match, tag = \"div\", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === \"\" && value !== \"\") tag = value\n\t\telse if (type === \"#\") attrs.id = value\n\t\telse if (type === \".\") classes.push(value)\n\t\telse if (match[3][0] === \"[\") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === \"\" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(\" \")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\n\nfunction execSelector(state, vnode) {\n\tvar attrs = vnode.attrs\n\tvar children = Vnode.normalizeChildren(vnode.children)\n\tvar hasClass = hasOwn.call(attrs, \"class\")\n\tvar className = hasClass ? attrs.class : attrs.className\n\n\tvnode.tag = state.tag\n\tvnode.attrs = null\n\tvnode.children = undefined\n\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\n\t\tfor (var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key]\n\t\t}\n\n\t\tattrs = newAttrs\n\t}\n\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key) && key !== \"className\" && !hasOwn.call(attrs, key)){\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className != null || state.attrs.className != null) attrs.className =\n\t\tclassName != null\n\t\t\t? state.attrs.className != null\n\t\t\t\t? String(state.attrs.className) + \" \" + String(className)\n\t\t\t\t: className\n\t\t\t: state.attrs.className != null\n\t\t\t\t? state.attrs.className\n\t\t\t\t: null\n\n\tif (hasClass) attrs.class = null\n\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== \"key\") {\n\t\t\tvnode.attrs = attrs\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === \"#\") {\n\t\tvnode.text = children[0].children\n\t} else {\n\t\tvnode.children = children\n\t}\n\n\treturn vnode\n}\n\nfunction hyperscript(selector) {\n\tif (selector == null || typeof selector !== \"string\" && typeof selector !== \"function\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\n\tvar vnode = hyperscriptVnode.apply(1, arguments)\n\n\tif (typeof selector === \"string\") {\n\t\tvnode.children = Vnode.normalizeChildren(vnode.children)\n\t\tif (selector !== \"[\") return execSelector(selectorCache[selector] || compileSelector(selector), vnode)\n\t}\n\n\tvnode.tag = selector\n\treturn vnode\n}\n\nmodule.exports = hyperscript\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/hyperscript.js?");

/***/ }),

/***/ "./node_modules/mithril/render/hyperscriptVnode.js":
/*!*********************************************************!*\
  !*** ./node_modules/mithril/render/hyperscriptVnode.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\n\n// Call via `hyperscriptVnode.apply(startOffset, arguments)`\n//\n// The reason I do it this way, forwarding the arguments and passing the start\n// offset in `this`, is so I don't have to create a temporary array in a\n// performance-critical path.\n//\n// In native ES6, I'd instead add a final `...args` parameter to the\n// `hyperscript` and `fragment` factories and define this as\n// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But\n// ES5 (what Mithril requires thanks to IE support) doesn't give me that luxury,\n// and engines aren't nearly intelligent enough to do either of these:\n//\n// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to\n//    another function only to be indexed.\n// 2. Elide an `arguments` allocation when it's passed to any function other\n//    than `Function.prototype.apply` or `Reflect.apply`.\n//\n// In ES6, it'd probably look closer to this (I'd need to profile it, though):\n// module.exports = function(attrs, ...children) {\n//     if (attrs == null || typeof attrs === \"object\" && attrs.tag == null && !Array.isArray(attrs)) {\n//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]\n//     } else {\n//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]\n//         attrs = undefined\n//     }\n//\n//     if (attrs == null) attrs = {}\n//     return Vnode(\"\", attrs.key, attrs, children)\n// }\nmodule.exports = function() {\n\tvar attrs = arguments[this], start = this + 1, children\n\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== \"object\" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = this\n\t}\n\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\n\treturn Vnode(\"\", attrs.key, attrs, children)\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/hyperscriptVnode.js?");

/***/ }),

/***/ "./node_modules/mithril/render/render.js":
/*!***********************************************!*\
  !*** ./node_modules/mithril/render/render.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function($window) {\n\tvar $doc = $window && $window.document\n\tvar currentRedraw\n\n\tvar nameSpace = {\n\t\tsvg: \"http://www.w3.org/2000/svg\",\n\t\tmath: \"http://www.w3.org/1998/Math/MathML\"\n\t}\n\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\n\t//sanity check to discourage people from doing `vnode.state = ...`\n\tfunction checkState(vnode, original) {\n\t\tif (vnode.state !== original) throw new Error(\"`vnode.state` must not be modified\")\n\t}\n\n\t//Note: the hook is passed as the `this` argument to allow proxying the\n\t//arguments without requiring a full array allocation to do so. It also\n\t//takes advantage of the fact the current `vnode` is the first argument in\n\t//all lifecycle methods.\n\tfunction callHook(vnode) {\n\t\tvar original = vnode.state\n\t\ttry {\n\t\t\treturn this.apply(original, arguments)\n\t\t} finally {\n\t\t\tcheckState(vnode, original)\n\t\t}\n\t}\n\n\t// IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when\n\t// inside an iframe. Catch and swallow this error, and heavy-handidly return null.\n\tfunction activeElement() {\n\t\ttry {\n\t\t\treturn $doc.activeElement\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === \"string\") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": createText(parent, vnode, nextSibling); break\n\t\t\t\tcase \"<\": createHTML(parent, vnode, ns, nextSibling); break\n\t\t\t\tcase \"[\": createFragment(parent, vnode, hooks, ns, nextSibling); break\n\t\t\t\tdefault: createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t}\n\tvar possibleParents = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}\n\tfunction createHTML(parent, vnode, ns, nextSibling) {\n\t\tvar match = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\t// not using the proper parent makes the child element(s) vanish.\n\t\t//     var div = document.createElement(\"div\")\n\t\t//     div.innerHTML = \"<td>i</td><td>j</td>\"\n\t\t//     console.log(div.innerHTML)\n\t\t// --> \"ij\", no <td> in sight.\n\t\tvar temp = $doc.createElement(possibleParents[match[1]] || \"div\")\n\t\tif (ns === \"http://www.w3.org/2000/svg\") {\n\t\t\ttemp.innerHTML = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + vnode.children + \"</svg>\"\n\t\t\ttemp = temp.firstChild\n\t\t} else {\n\t\t\ttemp.innerHTML = vnode.children\n\t\t}\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\t// Capture nodes to remove, so we don't confuse them.\n\t\tvnode.instance = []\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tvnode.instance.push(child)\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs = vnode.attrs\n\t\tvar is = attrs && attrs.is\n\n\t\tns = getNameSpace(vnode) || ns\n\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\n\t\tif (attrs != null) {\n\t\t\tsetAttrs(vnode, attrs, ns)\n\t\t}\n\n\t\tinsertNode(parent, element, nextSibling)\n\n\t\tif (!maybeSetContentEditable(vnode)) {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tif (vnode.tag === \"select\" && attrs != null) setLateSelectAttrs(vnode, attrs)\n\t\t\t}\n\t\t}\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === \"function\") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tinitLifecycle(vnode.state, vnode, hooks)\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tcreateNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t}\n\t}\n\n\t//update\n\t/**\n\t * @param {Element|Fragment} parent - the parent element\n\t * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for\n\t *                               this part of the tree\n\t * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.\n\t * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)\n\t * @param {Element | null} nextSibling - the next DOM node if we're dealing with a\n\t *                                       fragment that is not the last item in its\n\t *                                       parent\n\t * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any\n\t * @returns void\n\t */\n\t// This function diffs and patches lists of vnodes, both keyed and unkeyed.\n\t//\n\t// We will:\n\t//\n\t// 1. describe its general structure\n\t// 2. focus on the diff algorithm optimizations\n\t// 3. discuss DOM node operations.\n\n\t// ## Overview:\n\t//\n\t// The updateNodes() function:\n\t// - deals with trivial cases\n\t// - determines whether the lists are keyed or unkeyed based on the first non-null node\n\t//   of each list.\n\t// - diffs them and patches the DOM if needed (that's the brunt of the code)\n\t// - manages the leftovers: after diffing, are there:\n\t//   - old nodes left to remove?\n\t// \t - new nodes to insert?\n\t// \t deal with them!\n\t//\n\t// The lists are only iterated over once, with an exception for the nodes in `old` that\n\t// are visited in the fourth part of the diff and in the `removeNodes` loop.\n\n\t// ## Diffing\n\t//\n\t// Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837\n\t// may be good for context on longest increasing subsequence-based logic for moving nodes.\n\t//\n\t// In order to diff keyed lists, one has to\n\t//\n\t// 1) match nodes in both lists, per key, and update them accordingly\n\t// 2) create the nodes present in the new list, but absent in the old one\n\t// 3) remove the nodes present in the old list, but absent in the new one\n\t// 4) figure out what nodes in 1) to move in order to minimize the DOM operations.\n\t//\n\t// To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate\n\t// over the new list and for each new vnode, find the corresponding vnode in the old list using\n\t// the map.\n\t// 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new\n\t// and must be created.\n\t// For the removals, we actually remove the nodes that have been updated from the old list.\n\t// The nodes that remain in that list after 1) and 2) have been performed can be safely removed.\n\t// The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)\n\t// algorithm.\n\t//\n\t// the longest increasing subsequence is the list of nodes that can remain in place. Imagine going\n\t// from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices\n\t// corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would\n\t//  match the above lists, for example).\n\t//\n\t// In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We\n\t// can update those nodes without moving them, and only call `insertNode` on `4` and `5`.\n\t//\n\t// @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually\n\t// the longest increasing subsequence *of old nodes still present in the new list*).\n\t//\n\t// It is a general algorithm that is fireproof in all circumstances, but it requires the allocation\n\t// and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,\n\t// the `LIS` and a temporary one to create the LIS).\n\t//\n\t// So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of\n\t// the LIS and can be updated without moving them.\n\t//\n\t// If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with\n\t// the exception of the last node if the list is fully reversed).\n\t//\n\t// ## Finding the next sibling.\n\t//\n\t// `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.\n\t// When the list is being traversed top-down, at any index, the DOM nodes up to the previous\n\t// vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old\n\t// list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.\n\t//\n\t// In the other scenarios (swaps, upwards traversal, map-based diff),\n\t// the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the\n\t// bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node\n\t// as the next sibling (cached in the `nextSibling` variable).\n\n\n\t// ## DOM node moves\n\t//\n\t// In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,\n\t// this is not the case if the node moved (second and fourth part of the diff algo). We move\n\t// the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`\n\t// variable rather than fetching it using `getNextSibling()`.\n\t//\n\t// The fourth part of the diff currently inserts nodes unconditionally, leading to issues\n\t// like #1791 and #1999. We need to be smarter about those situations where adjascent old\n\t// nodes remain together in the new list in a way that isn't covered by parts one and\n\t// three of the diff algo.\n\n\tfunction updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length)\n\t\telse {\n\t\t\tvar isOldKeyed = old[0] != null && old[0].key != null\n\t\t\tvar isKeyed = vnodes[0] != null && vnodes[0].key != null\n\t\t\tvar start = 0, oldStart = 0\n\t\t\tif (!isOldKeyed) while (oldStart < old.length && old[oldStart] == null) oldStart++\n\t\t\tif (!isKeyed) while (start < vnodes.length && vnodes[start] == null) start++\n\t\t\tif (isKeyed === null && isOldKeyed == null) return // both lists are full of nulls\n\t\t\tif (isOldKeyed !== isKeyed) {\n\t\t\t\tremoveNodes(parent, old, oldStart, old.length)\n\t\t\t\tcreateNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)\n\t\t\t} else if (!isKeyed) {\n\t\t\t\t// Don't index past the end of either list (causes deopts).\n\t\t\t\tvar commonLength = old.length < vnodes.length ? old.length : vnodes.length\n\t\t\t\t// Rewind if necessary to the first non-null index on either side.\n\t\t\t\t// We could alternatively either explicitly create or remove nodes when `start !== oldStart`\n\t\t\t\t// but that would be optimizing for sparse lists which are more rare than dense ones.\n\t\t\t\tstart = start < oldStart ? start : oldStart\n\t\t\t\tfor (; start < commonLength; start++) {\n\t\t\t\t\to = old[start]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t\tif (o === v || o == null && v == null) continue\n\t\t\t\t\telse if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling))\n\t\t\t\t\telse if (v == null) removeNode(parent, o)\n\t\t\t\t\telse updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns)\n\t\t\t\t}\n\t\t\t\tif (old.length > commonLength) removeNodes(parent, old, start, old.length)\n\t\t\t\tif (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)\n\t\t\t} else {\n\t\t\t\t// keyed diff\n\t\t\t\tvar oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling\n\n\t\t\t\t// bottom-up\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t\tif (oe.key !== ve.key) break\n\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\t// top-down\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\to = old[oldStart]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t\tif (o.key !== v.key) break\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tif (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns)\n\t\t\t\t}\n\t\t\t\t// swaps and list reversals\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\tif (start === end) break\n\t\t\t\t\tif (o.key !== ve.key || oe.key !== v.key) break\n\t\t\t\t\ttopSibling = getNextSibling(old, oldStart, nextSibling)\n\t\t\t\t\tmoveNodes(parent, oe, topSibling)\n\t\t\t\t\tif (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns)\n\t\t\t\t\tif (++start <= --end) moveNodes(parent, o, nextSibling)\n\t\t\t\t\tif (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldStart++; oldEnd--\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t\to = old[oldStart]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t}\n\t\t\t\t// bottom up once again\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\tif (oe.key !== ve.key) break\n\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t}\n\t\t\t\tif (start > end) removeNodes(parent, old, oldStart, oldEnd + 1)\n\t\t\t\telse if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\t\telse {\n\t\t\t\t\t// inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul\n\t\t\t\t\tvar originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li=0, i=0, pos = 2147483647, matched = 0, map, lisIndices\n\t\t\t\t\tfor (i = 0; i < vnodesLength; i++) oldIndices[i] = -1\n\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\tif (map == null) map = getKeyMap(old, oldStart, oldEnd + 1)\n\t\t\t\t\t\tve = vnodes[i]\n\t\t\t\t\t\tvar oldIndex = map[ve.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tpos = (oldIndex < pos) ? oldIndex : -1 // becomes -1 if nodes were re-ordered\n\t\t\t\t\t\t\toldIndices[i-start] = oldIndex\n\t\t\t\t\t\t\toe = old[oldIndex]\n\t\t\t\t\t\t\told[oldIndex] = null\n\t\t\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\t\t\tmatched++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnextSibling = originalNextSibling\n\t\t\t\t\tif (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1)\n\t\t\t\t\tif (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (pos === -1) {\n\t\t\t\t\t\t\t// the indices of the indices of the items that are part of the\n\t\t\t\t\t\t\t// longest increasing subsequence in the oldIndices list\n\t\t\t\t\t\t\tlisIndices = makeLisIndices(oldIndices)\n\t\t\t\t\t\t\tli = lisIndices.length - 1\n\t\t\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\t\t\tv = vnodes[i]\n\t\t\t\t\t\t\t\tif (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif (lisIndices[li] === i - start) li--\n\t\t\t\t\t\t\t\t\telse moveNodes(parent, v, nextSibling)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (v.dom != null) nextSibling = vnodes[i].dom\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\t\t\tv = vnodes[i]\n\t\t\t\t\t\t\t\tif (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\t\tif (v.dom != null) nextSibling = vnodes[i].dom\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode.events = old.events\n\t\t\tif (shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tupdateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, ns, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(parent, old)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, ns, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\tremoveHTML(parent, old)\n\t\t\tcreateHTML(parent, vnode, ns, nextSibling)\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t}\n\t}\n\tfunction updateFragment(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (!maybeSetContentEditable(vnode)) {\n\t\t\tif (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t\tupdateNodes(element, old.children, vnode.children, hooks, null, ns)\n\t\t\t}\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tvnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tupdateLifecycle(vnode.state, vnode, hooks)\n\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(parent, old.instance)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction getKeyMap(vnodes, start, end) {\n\t\tvar map = Object.create(null)\n\t\tfor (; start < end; start++) {\n\t\t\tvar vnode = vnodes[start]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key = vnode.key\n\t\t\t\tif (key != null) map[key] = start\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\t// Lifted from ivi https://github.com/ivijs/ivi/\n\t// takes a list of unique numbers (-1 is special and can\n\t// occur multiple times) and returns an array with the indices\n\t// of the items that are part of the longest increasing\n\t// subsequece\n\tvar lisTemp = []\n\tfunction makeLisIndices(a) {\n\t\tvar result = [0]\n\t\tvar u = 0, v = 0, i = 0\n\t\tvar il = lisTemp.length = a.length\n\t\tfor (var i = 0; i < il; i++) lisTemp[i] = a[i]\n\t\tfor (var i = 0; i < il; ++i) {\n\t\t\tif (a[i] === -1) continue\n\t\t\tvar j = result[result.length - 1]\n\t\t\tif (a[j] < a[i]) {\n\t\t\t\tlisTemp[i] = j\n\t\t\t\tresult.push(i)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tu = 0\n\t\t\tv = result.length - 1\n\t\t\twhile (u < v) {\n\t\t\t\t// Fast integer average without overflow.\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tvar c = (u >>> 1) + (v >>> 1) + (u & v & 1)\n\t\t\t\tif (a[result[c]] < a[i]) {\n\t\t\t\t\tu = c + 1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tv = c\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (a[i] < a[result[u]]) {\n\t\t\t\tif (u > 0) lisTemp[i] = result[u - 1]\n\t\t\t\tresult[u] = i\n\t\t\t}\n\t\t}\n\t\tu = result.length\n\t\tv = result[u - 1]\n\t\twhile (u-- > 0) {\n\t\t\tresult[u] = v\n\t\t\tv = lisTemp[v]\n\t\t}\n\t\tlisTemp.length = 0\n\t\treturn result\n\t}\n\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\n\t// This covers a really specific edge case:\n\t// - Parent node is keyed and contains child\n\t// - Child is removed, returns unresolved promise in `onbeforeremove`\n\t// - Parent node is moved in keyed diff\n\t// - Remaining children still need moved appropriately\n\t//\n\t// Ideally, I'd track removed nodes as well, but that introduces a lot more\n\t// complexity and I'm not exactly interested in doing that.\n\tfunction moveNodes(parent, vnode, nextSibling) {\n\t\tvar frag = $doc.createDocumentFragment()\n\t\tmoveChildToFrag(parent, frag, vnode)\n\t\tinsertNode(parent, frag, nextSibling)\n\t}\n\tfunction moveChildToFrag(parent, frag, vnode) {\n\t\t// Dodge the recursion overhead in a few of the most common cases.\n\t\twhile (vnode.dom != null && vnode.dom.parentNode === parent) {\n\t\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\t\tvnode = vnode.instance\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else if (vnode.tag === \"<\") {\n\t\t\t\tfor (var i = 0; i < vnode.instance.length; i++) {\n\t\t\t\t\tfrag.appendChild(vnode.instance[i])\n\t\t\t\t}\n\t\t\t} else if (vnode.tag !== \"[\") {\n\t\t\t\t// Don't recurse for text nodes *or* elements, just fragments\n\t\t\t\tfrag.appendChild(vnode.dom)\n\t\t\t} else if (vnode.children.length === 1) {\n\t\t\t\tvnode = vnode.children[0]\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < vnode.children.length; i++) {\n\t\t\t\t\tvar child = vnode.children[i]\n\t\t\t\t\tif (child != null) moveChildToFrag(parent, frag, child)\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling != null) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\n\tfunction maybeSetContentEditable(vnode) {\n\t\tif (vnode.attrs == null || (\n\t\t\tvnode.attrs.contenteditable == null && // attribute\n\t\t\tvnode.attrs.contentEditable == null // property\n\t\t)) return false\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t\treturn true\n\t}\n\n\t//remove\n\tfunction removeNodes(parent, vnodes, start, end) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) removeNode(parent, vnode)\n\t\t}\n\t}\n\tfunction removeNode(parent, vnode) {\n\t\tvar mask = 0\n\t\tvar original = vnode.state\n\t\tvar stateResult, attrsResult\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeremove === \"function\") {\n\t\t\tvar result = callHook.call(vnode.state.onbeforeremove, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\tmask = 1\n\t\t\t\tstateResult = result\n\t\t\t}\n\t\t}\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n\t\t\tvar result = callHook.call(vnode.attrs.onbeforeremove, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tmask |= 2\n\t\t\t\tattrsResult = result\n\t\t\t}\n\t\t}\n\t\tcheckState(vnode, original)\n\n\t\t// If we can, try to fast-path it and avoid all the overhead of awaiting\n\t\tif (!mask) {\n\t\t\tonremove(vnode)\n\t\t\tremoveChild(parent, vnode)\n\t\t} else {\n\t\t\tif (stateResult != null) {\n\t\t\t\tvar next = function () {\n\t\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\t\tif (mask & 1) { mask &= 2; if (!mask) reallyRemove() }\n\t\t\t\t}\n\t\t\t\tstateResult.then(next, next)\n\t\t\t}\n\t\t\tif (attrsResult != null) {\n\t\t\t\tvar next = function () {\n\t\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\t\tif (mask & 2) { mask &= 1; if (!mask) reallyRemove() }\n\t\t\t\t}\n\t\t\t\tattrsResult.then(next, next)\n\t\t\t}\n\t\t}\n\n\t\tfunction reallyRemove() {\n\t\t\tcheckState(vnode, original)\n\t\t\tonremove(vnode)\n\t\t\tremoveChild(parent, vnode)\n\t\t}\n\t}\n\tfunction removeHTML(parent, vnode) {\n\t\tfor (var i = 0; i < vnode.instance.length; i++) {\n\t\t\tparent.removeChild(vnode.instance[i])\n\t\t}\n\t}\n\tfunction removeChild(parent, vnode) {\n\t\t// Dodge the recursion overhead in a few of the most common cases.\n\t\twhile (vnode.dom != null && vnode.dom.parentNode === parent) {\n\t\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\t\tvnode = vnode.instance\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else if (vnode.tag === \"<\") {\n\t\t\t\tremoveHTML(parent, vnode)\n\t\t\t} else {\n\t\t\t\tif (vnode.tag !== \"[\") {\n\t\t\t\t\tparent.removeChild(vnode.dom)\n\t\t\t\t\tif (!Array.isArray(vnode.children)) break\n\t\t\t\t}\n\t\t\t\tif (vnode.children.length === 1) {\n\t\t\t\t\tvnode = vnode.children[0]\n\t\t\t\t\tif (vnode != null) continue\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i = 0; i < vnode.children.length; i++) {\n\t\t\t\t\t\tvar child = vnode.children[i]\n\t\t\t\t\t\tif (child != null) removeChild(parent, child)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\tfunction onremove(vnode) {\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onremove === \"function\") callHook.call(vnode.state.onremove, vnode)\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === \"function\") callHook.call(vnode.attrs.onremove, vnode)\n\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//attrs\n\tfunction setAttrs(vnode, attrs, ns) {\n\t\tfor (var key in attrs) {\n\t\t\tsetAttr(vnode, key, null, attrs[key], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key, old, value, ns) {\n\t\tif (key === \"key\" || key === \"is\" || value == null || isLifecycleMethod(key) || (old === value && !isFormAttribute(vnode, key)) && typeof value !== \"object\") return\n\t\tif (key[0] === \"o\" && key[1] === \"n\") return updateEvent(vnode, key, value)\n\t\tif (key.slice(0, 6) === \"xlink:\") vnode.dom.setAttributeNS(\"http://www.w3.org/1999/xlink\", key.slice(6), value)\n\t\telse if (key === \"style\") updateStyle(vnode.dom, old, value)\n\t\telse if (hasPropertyKey(vnode, key, ns)) {\n\t\t\tif (key === \"value\") {\n\t\t\t\t// Only do the coercion if we're actually going to check the value.\n\t\t\t\t/* eslint-disable no-implicit-coercion */\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === \"input\" || vnode.tag === \"textarea\") && vnode.dom.value === \"\" + value && vnode.dom === activeElement()) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"select\" && old !== null && vnode.dom.value === \"\" + value) return\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"option\" && old !== null && vnode.dom.value === \"\" + value) return\n\t\t\t\t/* eslint-enable no-implicit-coercion */\n\t\t\t}\n\t\t\t// If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.\n\t\t\tif (vnode.tag === \"input\" && key === \"type\") vnode.dom.setAttribute(key, value)\n\t\t\telse vnode.dom[key] = value\n\t\t} else {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) vnode.dom.setAttribute(key, \"\")\n\t\t\t\telse vnode.dom.removeAttribute(key)\n\t\t\t}\n\t\t\telse vnode.dom.setAttribute(key === \"className\" ? \"class\" : key, value)\n\t\t}\n\t}\n\tfunction removeAttr(vnode, key, old, ns) {\n\t\tif (key === \"key\" || key === \"is\" || old == null || isLifecycleMethod(key)) return\n\t\tif (key[0] === \"o\" && key[1] === \"n\" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined)\n\t\telse if (key === \"style\") updateStyle(vnode.dom, old, null)\n\t\telse if (\n\t\t\thasPropertyKey(vnode, key, ns)\n\t\t\t&& key !== \"className\"\n\t\t\t&& !(key === \"value\" && (\n\t\t\t\tvnode.tag === \"option\"\n\t\t\t\t|| vnode.tag === \"select\" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement()\n\t\t\t))\n\t\t\t&& !(vnode.tag === \"input\" && key === \"type\")\n\t\t) {\n\t\t\tvnode.dom[key] = null\n\t\t} else {\n\t\t\tvar nsLastIndex = key.indexOf(\":\")\n\t\t\tif (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1)\n\t\t\tif (old !== false) vnode.dom.removeAttribute(key === \"className\" ? \"class\" : key)\n\t\t}\n\t}\n\tfunction setLateSelectAttrs(vnode, attrs) {\n\t\tif (\"value\" in attrs) {\n\t\t\tif(attrs.value === null) {\n\t\t\t\tif (vnode.dom.selectedIndex !== -1) vnode.dom.value = null\n\t\t\t} else {\n\t\t\t\tvar normalized = \"\" + attrs.value // eslint-disable-line no-implicit-coercion\n\t\t\t\tif (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) {\n\t\t\t\t\tvnode.dom.value = normalized\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (\"selectedIndex\" in attrs) setAttr(vnode, \"selectedIndex\", null, attrs.selectedIndex, undefined)\n\t}\n\tfunction updateAttrs(vnode, old, attrs, ns) {\n\t\tif (attrs != null) {\n\t\t\tfor (var key in attrs) {\n\t\t\t\tsetAttr(vnode, key, old && old[key], attrs[key], ns)\n\t\t\t}\n\t\t}\n\t\tvar val\n\t\tif (old != null) {\n\t\t\tfor (var key in old) {\n\t\t\t\tif (((val = old[key]) != null) && (attrs == null || attrs[key] == null)) {\n\t\t\t\t\tremoveAttr(vnode, key, val, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === activeElement() || vnode.tag === \"option\" && vnode.dom.parentNode === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction hasPropertyKey(vnode, key, ns) {\n\t\t// Filter out namespaced keys\n\t\treturn ns === undefined && (\n\t\t\t// If it's a custom element, just keep it.\n\t\t\tvnode.tag.indexOf(\"-\") > -1 || vnode.attrs != null && vnode.attrs.is ||\n\t\t\t// If it's a normal element, let's try to avoid a few browser bugs.\n\t\t\tkey !== \"href\" && key !== \"list\" && key !== \"form\" && key !== \"width\" && key !== \"height\"// && key !== \"type\"\n\t\t\t// Defer the property check until *after* we check everything.\n\t\t) && key in vnode.dom\n\t}\n\n\t//style\n\tvar uppercaseRegex = /[A-Z]/g\n\tfunction toLowerCase(capital) { return \"-\" + capital.toLowerCase() }\n\tfunction normalizeKey(key) {\n\t\treturn key[0] === \"-\" && key[1] === \"-\" ? key :\n\t\t\tkey === \"cssFloat\" ? \"float\" :\n\t\t\t\tkey.replace(uppercaseRegex, toLowerCase)\n\t}\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) {\n\t\t\t// Styles are equivalent, do nothing.\n\t\t} else if (style == null) {\n\t\t\t// New style is missing, just clear it.\n\t\t\telement.style.cssText = \"\"\n\t\t} else if (typeof style !== \"object\") {\n\t\t\t// New style is a string, let engine deal with patching.\n\t\t\telement.style.cssText = style\n\t\t} else if (old == null || typeof old !== \"object\") {\n\t\t\t// `old` is missing or a string, `style` is an object.\n\t\t\telement.style.cssText = \"\"\n\t\t\t// Add new style properties\n\t\t\tfor (var key in style) {\n\t\t\t\tvar value = style[key]\n\t\t\t\tif (value != null) element.style.setProperty(normalizeKey(key), String(value))\n\t\t\t}\n\t\t} else {\n\t\t\t// Both old & new are (different) objects.\n\t\t\t// Update style properties that have changed\n\t\t\tfor (var key in style) {\n\t\t\t\tvar value = style[key]\n\t\t\t\tif (value != null && (value = String(value)) !== String(old[key])) {\n\t\t\t\t\telement.style.setProperty(normalizeKey(key), value)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Remove style properties that no longer exist\n\t\t\tfor (var key in old) {\n\t\t\t\tif (old[key] != null && style[key] == null) {\n\t\t\t\t\telement.style.removeProperty(normalizeKey(key))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Here's an explanation of how this works:\n\t// 1. The event names are always (by design) prefixed by `on`.\n\t// 2. The EventListener interface accepts either a function or an object\n\t//    with a `handleEvent` method.\n\t// 3. The object does not inherit from `Object.prototype`, to avoid\n\t//    any potential interference with that (e.g. setters).\n\t// 4. The event name is remapped to the handler before calling it.\n\t// 5. In function-based event handlers, `ev.target === this`. We replicate\n\t//    that below.\n\t// 6. In function-based event handlers, `return false` prevents the default\n\t//    action and stops event propagation. We replicate that below.\n\tfunction EventDict() {\n\t\t// Save this, so the current redraw is correctly tracked.\n\t\tthis._ = currentRedraw\n\t}\n\tEventDict.prototype = Object.create(null)\n\tEventDict.prototype.handleEvent = function (ev) {\n\t\tvar handler = this[\"on\" + ev.type]\n\t\tvar result\n\t\tif (typeof handler === \"function\") result = handler.call(ev.currentTarget, ev)\n\t\telse if (typeof handler.handleEvent === \"function\") handler.handleEvent(ev)\n\t\tif (this._ && ev.redraw !== false) (0, this._)()\n\t\tif (result === false) {\n\t\t\tev.preventDefault()\n\t\t\tev.stopPropagation()\n\t\t}\n\t}\n\n\t//event\n\tfunction updateEvent(vnode, key, value) {\n\t\tif (vnode.events != null) {\n\t\t\tif (vnode.events[key] === value) return\n\t\t\tif (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n\t\t\t\tif (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false)\n\t\t\t\tvnode.events[key] = value\n\t\t\t} else {\n\t\t\t\tif (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false)\n\t\t\t\tvnode.events[key] = undefined\n\t\t\t}\n\t\t} else if (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n\t\t\tvnode.events = new EventDict()\n\t\t\tvnode.dom.addEventListener(key.slice(2), vnode.events, false)\n\t\t\tvnode.events[key] = value\n\t\t}\n\t}\n\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") callHook.call(source.oninit, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(callHook.bind(source.oncreate, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === \"function\") hooks.push(callHook.bind(source.onupdate, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tdo {\n\t\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") {\n\t\t\t\tvar force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old)\n\t\t\t\tif (force !== undefined && !force) break\n\t\t\t}\n\t\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeupdate === \"function\") {\n\t\t\t\tvar force = callHook.call(vnode.state.onbeforeupdate, vnode, old)\n\t\t\t\tif (force !== undefined && !force) break\n\t\t\t}\n\t\t\treturn false\n\t\t} while (false); // eslint-disable-line no-constant-condition\n\t\tvnode.dom = old.dom\n\t\tvnode.domSize = old.domSize\n\t\tvnode.instance = old.instance\n\t\t// One would think having the actual latest attributes would be ideal,\n\t\t// but it doesn't let us properly diff based on our current internal\n\t\t// representation. We have to save not only the old DOM info, but also\n\t\t// the attributes used to create it, as we diff *that*, not against the\n\t\t// DOM directly (with a few exceptions in `setAttr`). And, of course, we\n\t\t// need to save the children and text as they are conceptually not\n\t\t// unlike special \"attributes\" internally.\n\t\tvnode.attrs = old.attrs\n\t\tvnode.children = old.children\n\t\tvnode.text = old.text\n\t\treturn true\n\t}\n\n\treturn function(dom, vnodes, redraw) {\n\t\tif (!dom) throw new TypeError(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = activeElement()\n\t\tvar namespace = dom.namespaceURI\n\n\t\t// First time rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\n\t\tvnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [vnodes])\n\t\tvar prevRedraw = currentRedraw\n\t\ttry {\n\t\t\tcurrentRedraw = typeof redraw === \"function\" ? redraw : undefined\n\t\t\tupdateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === \"http://www.w3.org/1999/xhtml\" ? undefined : namespace)\n\t\t} finally {\n\t\t\tcurrentRedraw = prevRedraw\n\t\t}\n\t\tdom.vnodes = vnodes\n\t\t// `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement\n\t\tif (active != null && activeElement() !== active && typeof active.focus === \"function\") active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/render.js?");

/***/ }),

/***/ "./node_modules/mithril/render/trust.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/trust.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"./node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/trust.js?");

/***/ }),

/***/ "./node_modules/mithril/render/vnode.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/vnode.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction Vnode(tag, key, attrs, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs, children: children, text: text, dom: dom, domSize: undefined, state: undefined, events: undefined, instance: undefined}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node == null || typeof node === \"boolean\") return null\n\tif (typeof node === \"object\") return node\n\treturn Vnode(\"#\", undefined, undefined, String(node), undefined, undefined)\n}\nVnode.normalizeChildren = function(input) {\n\tvar children = []\n\tif (input.length) {\n\t\tvar isKeyed = input[0] != null && input[0].key != null\n\t\t// Note: this is a *very* perf-sensitive check.\n\t\t// Fun fact: merging the loop like this is somehow faster than splitting\n\t\t// it, noticeably so.\n\t\tfor (var i = 1; i < input.length; i++) {\n\t\t\tif ((input[i] != null && input[i].key != null) !== isKeyed) {\n\t\t\t\tthrow new TypeError(\"Vnodes must either always have keys or never have keys!\")\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < input.length; i++) {\n\t\t\tchildren[i] = Vnode.normalize(input[i])\n\t\t}\n\t}\n\treturn children\n}\n\nmodule.exports = Vnode\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/render/vnode.js?");

/***/ }),

/***/ "./node_modules/mithril/request.js":
/*!*****************************************!*\
  !*** ./node_modules/mithril/request.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar PromisePolyfill = __webpack_require__(/*! ./promise/promise */ \"./node_modules/mithril/promise/promise.js\")\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"./node_modules/mithril/mount-redraw.js\")\n\nmodule.exports = __webpack_require__(/*! ./request/request */ \"./node_modules/mithril/request/request.js\")(window, PromisePolyfill, mountRedraw.redraw)\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/request.js?");

/***/ }),

/***/ "./node_modules/mithril/request/request.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/request/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar buildPathname = __webpack_require__(/*! ../pathname/build */ \"./node_modules/mithril/pathname/build.js\")\n\nmodule.exports = function($window, Promise, oncompletion) {\n\tvar callbackCount = 0\n\n\tfunction PromiseProxy(executor) {\n\t\treturn new Promise(executor)\n\t}\n\n\t// In case the global Promise is some userland library's where they rely on\n\t// `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or\n\t// similar. Let's *not* break them.\n\tPromiseProxy.prototype = Promise.prototype\n\tPromiseProxy.__proto__ = Promise // eslint-disable-line no-proto\n\n\tfunction makeRequest(factory) {\n\t\treturn function(url, args) {\n\t\t\tif (typeof url !== \"string\") { args = url; url = url.url }\n\t\t\telse if (args == null) args = {}\n\t\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\t\tfactory(buildPathname(url, args.params), args, function (data) {\n\t\t\t\t\tif (typeof args.type === \"function\") {\n\t\t\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tdata[i] = new args.type(data[i])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse data = new args.type(data)\n\t\t\t\t\t}\n\t\t\t\t\tresolve(data)\n\t\t\t\t}, reject)\n\t\t\t})\n\t\t\tif (args.background === true) return promise\n\t\t\tvar count = 0\n\t\t\tfunction complete() {\n\t\t\t\tif (--count === 0 && typeof oncompletion === \"function\") oncompletion()\n\t\t\t}\n\n\t\t\treturn wrap(promise)\n\n\t\t\tfunction wrap(promise) {\n\t\t\t\tvar then = promise.then\n\t\t\t\t// Set the constructor, so engines know to not await or resolve\n\t\t\t\t// this as a native promise. At the time of writing, this is\n\t\t\t\t// only necessary for V8, but their behavior is the correct\n\t\t\t\t// behavior per spec. See this spec issue for more details:\n\t\t\t\t// https://github.com/tc39/ecma262/issues/1577. Also, see the\n\t\t\t\t// corresponding comment in `request/tests/test-request.js` for\n\t\t\t\t// a bit more background on the issue at hand.\n\t\t\t\tpromise.constructor = PromiseProxy\n\t\t\t\tpromise.then = function() {\n\t\t\t\t\tcount++\n\t\t\t\t\tvar next = then.apply(promise, arguments)\n\t\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\t\tcomplete()\n\t\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t\t})\n\t\t\t\t\treturn wrap(next)\n\t\t\t\t}\n\t\t\t\treturn promise\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasHeader(args, name) {\n\t\tfor (var key in args.headers) {\n\t\t\tif ({}.hasOwnProperty.call(args.headers, key) && name.test(key)) return true\n\t\t}\n\t\treturn false\n\t}\n\n\treturn {\n\t\trequest: makeRequest(function(url, args, resolve, reject) {\n\t\t\tvar method = args.method != null ? args.method.toUpperCase() : \"GET\"\n\t\t\tvar body = args.body\n\t\t\tvar assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData)\n\t\t\tvar responseType = args.responseType || (typeof args.extract === \"function\" ? \"\" : \"json\")\n\n\t\t\tvar xhr = new $window.XMLHttpRequest(), aborted = false\n\t\t\tvar original = xhr, replacedAbort\n\t\t\tvar abort = xhr.abort\n\n\t\t\txhr.abort = function() {\n\t\t\t\taborted = true\n\t\t\t\tabort.call(this)\n\t\t\t}\n\n\t\t\txhr.open(method, url, args.async !== false, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\n\t\t\tif (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (typeof args.deserialize !== \"function\" && !hasHeader(args, /^accept$/i)) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tif (args.timeout) xhr.timeout = args.timeout\n\t\t\txhr.responseType = responseType\n\n\t\t\tfor (var key in args.headers) {\n\t\t\t\tif ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr.onreadystatechange = function(ev) {\n\t\t\t\t// Don't throw errors on xhr.abort().\n\t\t\t\tif (aborted) return\n\n\t\t\t\tif (ev.target.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar success = (ev.target.status >= 200 && ev.target.status < 300) || ev.target.status === 304 || (/^file:\\/\\//i).test(url)\n\t\t\t\t\t\t// When the response type isn't \"\" or \"text\",\n\t\t\t\t\t\t// `xhr.responseText` is the wrong thing to use.\n\t\t\t\t\t\t// Browsers do the right thing and throw here, and we\n\t\t\t\t\t\t// should honor that and do the right thing by\n\t\t\t\t\t\t// preferring `xhr.response` where possible/practical.\n\t\t\t\t\t\tvar response = ev.target.response, message\n\n\t\t\t\t\t\tif (responseType === \"json\") {\n\t\t\t\t\t\t\t// For IE and Edge, which don't implement\n\t\t\t\t\t\t\t// `responseType: \"json\"`.\n\t\t\t\t\t\t\tif (!ev.target.responseType && typeof args.extract !== \"function\") response = JSON.parse(ev.target.responseText)\n\t\t\t\t\t\t} else if (!responseType || responseType === \"text\") {\n\t\t\t\t\t\t\t// Only use this default if it's text. If a parsed\n\t\t\t\t\t\t\t// document is needed on old IE and friends (all\n\t\t\t\t\t\t\t// unsupported), the user should use a custom\n\t\t\t\t\t\t\t// `config` instead. They're already using this at\n\t\t\t\t\t\t\t// their own risk.\n\t\t\t\t\t\t\tif (response == null) response = ev.target.responseText\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof args.extract === \"function\") {\n\t\t\t\t\t\t\tresponse = args.extract(ev.target, args)\n\t\t\t\t\t\t\tsuccess = true\n\t\t\t\t\t\t} else if (typeof args.deserialize === \"function\") {\n\t\t\t\t\t\t\tresponse = args.deserialize(response)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (success) resolve(response)\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttry { message = ev.target.responseText }\n\t\t\t\t\t\t\tcatch (e) { message = response }\n\t\t\t\t\t\t\tvar error = new Error(message)\n\t\t\t\t\t\t\terror.code = ev.target.status\n\t\t\t\t\t\t\terror.response = response\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof args.config === \"function\") {\n\t\t\t\txhr = args.config(xhr, args, url) || xhr\n\n\t\t\t\t// Propagate the `abort` to any replacement XHR as well.\n\t\t\t\tif (xhr !== original) {\n\t\t\t\t\treplacedAbort = xhr.abort\n\t\t\t\t\txhr.abort = function() {\n\t\t\t\t\t\taborted = true\n\t\t\t\t\t\treplacedAbort.call(this)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (body == null) xhr.send()\n\t\t\telse if (typeof args.serialize === \"function\") xhr.send(args.serialize(body))\n\t\t\telse if (body instanceof $window.FormData) xhr.send(body)\n\t\t\telse xhr.send(JSON.stringify(body))\n\t\t}),\n\t\tjsonp: makeRequest(function(url, args, resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tdelete $window[callbackName]\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(data)\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tdelete $window[callbackName]\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t}\n\t\t\tscript.src = url + (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") +\n\t\t\t\tencodeURIComponent(args.callbackKey || \"callback\") + \"=\" +\n\t\t\t\tencodeURIComponent(callbackName)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t}),\n\t}\n}\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/request/request.js?");

/***/ }),

/***/ "./node_modules/mithril/route.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/route.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"./node_modules/mithril/mount-redraw.js\")\n\nmodule.exports = __webpack_require__(/*! ./api/router */ \"./node_modules/mithril/api/router.js\")(window, mountRedraw)\n\n\n//# sourceURL=webpack://umd/./node_modules/mithril/route.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var walax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! walax */ \"../../walax/dist/walax.umd.js\");\n/* harmony import */ var walax__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(walax__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _arena__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arena */ \"./src/arena.js\");\n\n\n\n\n\nlet url = '/api/'\nlet prop = 'arena'\n\nwalax__WEBPACK_IMPORTED_MODULE_0___default().load(prop, url).then(x => {\n    walax__WEBPACK_IMPORTED_MODULE_0___default().addPlugin('arena', _arena__WEBPACK_IMPORTED_MODULE_2__.default)\n    walax__WEBPACK_IMPORTED_MODULE_0___default().arena.start()\n})\n\n\n//# sourceURL=webpack://umd/./src/app.js?");

/***/ }),

/***/ "./src/arena.js":
/*!**********************!*\
  !*** ./src/arena.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Arena)\n/* harmony export */ });\n/* harmony import */ var walax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! walax */ \"../../walax/dist/walax.umd.js\");\n/* harmony import */ var walax__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(walax__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _home__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./home */ \"./src/home.js\");\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu */ \"./src/menu.js\");\n/* harmony import */ var _login__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./login */ \"./src/login.js\");\n\n\n\n\n\n\n\nclass Arena extends (walax__WEBPACK_IMPORTED_MODULE_0___default().cls.Control) {\n    start() {\n        document.body.innerHTML = '<div id=\"menu\"></div> <div id=\"page\"/>'\n        mithril__WEBPACK_IMPORTED_MODULE_1___default().mount(document.getElementById('menu'), _menu__WEBPACK_IMPORTED_MODULE_4__.default)\n        mithril__WEBPACK_IMPORTED_MODULE_1___default().route(document.getElementById('page'), '/home', {\n            '/home': _home__WEBPACK_IMPORTED_MODULE_2__.default,\n            '/game': _game__WEBPACK_IMPORTED_MODULE_3__.default,\n            '/login': _login__WEBPACK_IMPORTED_MODULE_5__.default\n        })\n    }\n    async getCurrentUser() {\n        return walax__WEBPACK_IMPORTED_MODULE_0___default().net.get(`${(walax__WEBPACK_IMPORTED_MODULE_0___default().apiBase)}auth/user/`).then(user => {\n            walax__WEBPACK_IMPORTED_MODULE_0___default().log.info('HERE', user)\n            let obj = walax__WEBPACK_IMPORTED_MODULE_0___default().obj.receiveObject((walax__WEBPACK_IMPORTED_MODULE_0___default().obj.User), user)\n            return obj\n        })\n    }\n    toString() { return 'Arena' }\n}\n\n//# sourceURL=webpack://umd/./src/arena.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass Game {\n    view() {\n        return mithril__WEBPACK_IMPORTED_MODULE_0___default()('h1', 'game')\n    }\n}\n\n//# sourceURL=webpack://umd/./src/game.js?");

/***/ }),

/***/ "./src/home.js":
/*!*********************!*\
  !*** ./src/home.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst GameList = {\n    games: [],\n    user: false,\n    oninit: function () {\n        w.log.info('gamelist init')\n        w.arena.getCurrentUser().then(u => {\n            w.log.info('gamelist user', u)\n            GameList.user = u\n        })\n    },\n    refresh: function () {\n        w.log.info('home', 'refreshing')\n        w.obj.Game.objects.all().then(x => {\n            this.games = []\n            x.forEach(g => {\n                this.games.push(g)\n            })\n            mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw()\n        })\n    },\n    selectGame(game) {\n        this.game = game\n        console.log('selectGame', game)\n        mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set('/game')\n        mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw()\n    },\n    view: function () {\n        return mithril__WEBPACK_IMPORTED_MODULE_0___default()('ul.gameList', {}, GameList.games.map(g => {\n            return mithril__WEBPACK_IMPORTED_MODULE_0___default()('li', mithril__WEBPACK_IMPORTED_MODULE_0___default()('a', {\n                href: '#',\n                onclick: () => {\n                    GameList.selectGame(g)\n                }\n            }, g.name))\n        }))\n    }\n}\n\n\nclass Home {\n\n    view() {\n        return mithril__WEBPACK_IMPORTED_MODULE_0___default()('.home', [\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#gameName'),\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#gameSize', { value: 40 }),\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#gameSubmit', {\n                type: 'button',\n                value: 'Create game',\n                onclick: () => {\n                    let name = document.getElementById('gameName').value\n                    let user = GameList.user\n                    let size = document.getElementById('gameSize').value\n                    let game = new w.obj.Game({ name, owner: user.id, size })\n                    game.save()\n                    GameList.selectGame(game)\n                    mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set('/game')\n                }\n            }),\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#gameRefresh', {\n                type: 'button',\n                value: 'Refresh',\n                onclick: () => {\n                    console.log('refresh')\n                    GameList.refresh()\n                }\n            }),\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()(GameList)\n        ])\n    }\n}\n\n//# sourceURL=webpack://umd/./src/home.js?");

/***/ }),

/***/ "./src/login.js":
/*!**********************!*\
  !*** ./src/login.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Login)\n/* harmony export */ });\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass Login {\n    view() {\n        return !w.auth.state ?\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('.login', [\n                mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#alias'),\n                mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#password', { 'type': 'password' }),\n                mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#submitLogin', {\n                    'type': 'button',\n                    'value': 'Log in',\n                    'onclick': () => {\n                        let username = document.getElementById('alias').value\n                        let password = document.getElementById('password').value\n                        w.auth.authenticate(username, password).then(x => {\n                            mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw()\n                        })\n                    }\n                })\n            ]) :\n            mithril__WEBPACK_IMPORTED_MODULE_0___default()('.login', [\n                mithril__WEBPACK_IMPORTED_MODULE_0___default()('.accessToken', w.auth.token),\n                mithril__WEBPACK_IMPORTED_MODULE_0___default()('input#logout', {\n                    'type': 'button',\n                    'value': 'Log out',\n                    'onclick': () => {\n                        w.log.info('logging out')\n                        w.auth.logout().then(x => { mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw() })\n                    }\n                })\n            ])\n    }\n}\n\n//# sourceURL=webpack://umd/./src/login.js?");

/***/ }),

/***/ "./src/menu.js":
/*!*********************!*\
  !*** ./src/menu.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ \"./node_modules/mithril/index.js\");\n/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);\n\nconst l = (t, u, o) => mithril__WEBPACK_IMPORTED_MODULE_0___default()((mithril__WEBPACK_IMPORTED_MODULE_0___default().route.Link), { href: u, options: o }, t)\n\n\nclass Game {\n    view() {\n        return mithril__WEBPACK_IMPORTED_MODULE_0___default()('h1', [\n            l('Home', '/home'),\n            l('Game', '/game'),\n            l('Auth', '/login')\n        ])\n    }\n}\n\n//# sourceURL=webpack://umd/./src/menu.js?");

/***/ }),

/***/ "../../walax/dist/walax.umd.js":
/*!*************************************!*\
  !*** ../../walax/dist/walax.umd.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  function ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n\n      if (enumerableOnly) {\n        symbols = symbols.filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n      }\n\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys$1(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys$1(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties$1(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass$1(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties$1(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _assertThisInitialized$1(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized$1(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n\n  function _unsupportedIterableToArray$1(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n  }\n\n  function _arrayLikeToArray$1(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n  var runtime = {exports: {}};\n\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  (function (module) {\n    var runtime = function (exports) {\n\n      var Op = Object.prototype;\n      var hasOwn = Op.hasOwnProperty;\n      var undefined$1; // More compressible than void 0.\n\n      var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n      var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n      var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n      var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n      function define(obj, key, value) {\n        Object.defineProperty(obj, key, {\n          value: value,\n          enumerable: true,\n          configurable: true,\n          writable: true\n        });\n        return obj[key];\n      }\n\n      try {\n        // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n        define({}, \"\");\n      } catch (err) {\n        define = function (obj, key, value) {\n          return obj[key] = value;\n        };\n      }\n\n      function wrap(innerFn, outerFn, self, tryLocsList) {\n        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n        var generator = Object.create(protoGenerator.prototype);\n        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n        // .throw, and .return methods.\n\n        generator._invoke = makeInvokeMethod(innerFn, self, context);\n        return generator;\n      }\n\n      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n      // record like context.tryEntries[i].completion. This interface could\n      // have been (and was previously) designed to take a closure to be\n      // invoked without arguments, but in all the cases we care about we\n      // already have an existing method we want to call, so there's no need\n      // to create a new function object. We can even get away with assuming\n      // the method takes exactly one argument, since that happens to be true\n      // in every case, so we don't have to touch the arguments object. The\n      // only additional allocation required is the completion record, which\n      // has a stable shape and so hopefully should be cheap to allocate.\n\n      function tryCatch(fn, obj, arg) {\n        try {\n          return {\n            type: \"normal\",\n            arg: fn.call(obj, arg)\n          };\n        } catch (err) {\n          return {\n            type: \"throw\",\n            arg: err\n          };\n        }\n      }\n\n      var GenStateSuspendedStart = \"suspendedStart\";\n      var GenStateSuspendedYield = \"suspendedYield\";\n      var GenStateExecuting = \"executing\";\n      var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n      // breaking out of the dispatch switch statement.\n\n      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n      // .constructor.prototype properties for functions that return Generator\n      // objects. For full spec compliance, you may wish to configure your\n      // minifier not to mangle the names of these two functions.\n\n      function Generator() {}\n\n      function GeneratorFunction() {}\n\n      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n      // don't natively support it.\n\n\n      var IteratorPrototype = {};\n\n      IteratorPrototype[iteratorSymbol] = function () {\n        return this;\n      };\n\n      var getProto = Object.getPrototypeOf;\n      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n        // This environment has a native %IteratorPrototype%; use it instead\n        // of the polyfill.\n        IteratorPrototype = NativeIteratorPrototype;\n      }\n\n      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n      GeneratorFunctionPrototype.constructor = GeneratorFunction;\n      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n      // Iterator interface in terms of a single ._invoke method.\n\n      function defineIteratorMethods(prototype) {\n        [\"next\", \"throw\", \"return\"].forEach(function (method) {\n          define(prototype, method, function (arg) {\n            return this._invoke(method, arg);\n          });\n        });\n      }\n\n      exports.isGeneratorFunction = function (genFun) {\n        var ctor = typeof genFun === \"function\" && genFun.constructor;\n        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n      };\n\n      exports.mark = function (genFun) {\n        if (Object.setPrototypeOf) {\n          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n        } else {\n          genFun.__proto__ = GeneratorFunctionPrototype;\n          define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n        }\n\n        genFun.prototype = Object.create(Gp);\n        return genFun;\n      }; // Within the body of any async function, `await x` is transformed to\n      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n      // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n      // meant to be awaited.\n\n\n      exports.awrap = function (arg) {\n        return {\n          __await: arg\n        };\n      };\n\n      function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n          var record = tryCatch(generator[method], generator, arg);\n\n          if (record.type === \"throw\") {\n            reject(record.arg);\n          } else {\n            var result = record.arg;\n            var value = result.value;\n\n            if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n              return PromiseImpl.resolve(value.__await).then(function (value) {\n                invoke(\"next\", value, resolve, reject);\n              }, function (err) {\n                invoke(\"throw\", err, resolve, reject);\n              });\n            }\n\n            return PromiseImpl.resolve(value).then(function (unwrapped) {\n              // When a yielded Promise is resolved, its final value becomes\n              // the .value of the Promise<{value,done}> result for the\n              // current iteration.\n              result.value = unwrapped;\n              resolve(result);\n            }, function (error) {\n              // If a rejected Promise was yielded, throw the rejection back\n              // into the async generator function so it can be handled there.\n              return invoke(\"throw\", error, resolve, reject);\n            });\n          }\n        }\n\n        var previousPromise;\n\n        function enqueue(method, arg) {\n          function callInvokeWithMethodAndArg() {\n            return new PromiseImpl(function (resolve, reject) {\n              invoke(method, arg, resolve, reject);\n            });\n          }\n\n          return previousPromise = // If enqueue has been called before, then we want to wait until\n          // all previous Promises have been resolved before calling invoke,\n          // so that results are always delivered in the correct order. If\n          // enqueue has not been called before, then it is important to\n          // call invoke immediately, without waiting on a callback to fire,\n          // so that the async generator function has the opportunity to do\n          // any necessary setup in a predictable way. This predictability\n          // is why the Promise constructor synchronously invokes its\n          // executor callback, and why async functions synchronously\n          // execute code before the first await. Since we implement simple\n          // async functions in terms of async generators, it is especially\n          // important to get this right, even though it requires care.\n          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        } // Define the unified helper method that is used to implement .next,\n        // .throw, and .return (see defineIteratorMethods).\n\n\n        this._invoke = enqueue;\n      }\n\n      defineIteratorMethods(AsyncIterator.prototype);\n\n      AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n        return this;\n      };\n\n      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n      // AsyncIterator objects; they just return a Promise for the value of\n      // the final result produced by the iterator.\n\n      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        if (PromiseImpl === void 0) PromiseImpl = Promise;\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n        : iter.next().then(function (result) {\n          return result.done ? result.value : iter.next();\n        });\n      };\n\n      function makeInvokeMethod(innerFn, self, context) {\n        var state = GenStateSuspendedStart;\n        return function invoke(method, arg) {\n          if (state === GenStateExecuting) {\n            throw new Error(\"Generator is already running\");\n          }\n\n          if (state === GenStateCompleted) {\n            if (method === \"throw\") {\n              throw arg;\n            } // Be forgiving, per 25.3.3.3.3 of the spec:\n            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n            return doneResult();\n          }\n\n          context.method = method;\n          context.arg = arg;\n\n          while (true) {\n            var delegate = context.delegate;\n\n            if (delegate) {\n              var delegateResult = maybeInvokeDelegate(delegate, context);\n\n              if (delegateResult) {\n                if (delegateResult === ContinueSentinel) continue;\n                return delegateResult;\n              }\n            }\n\n            if (context.method === \"next\") {\n              // Setting context._sent for legacy support of Babel's\n              // function.sent implementation.\n              context.sent = context._sent = context.arg;\n            } else if (context.method === \"throw\") {\n              if (state === GenStateSuspendedStart) {\n                state = GenStateCompleted;\n                throw context.arg;\n              }\n\n              context.dispatchException(context.arg);\n            } else if (context.method === \"return\") {\n              context.abrupt(\"return\", context.arg);\n            }\n\n            state = GenStateExecuting;\n            var record = tryCatch(innerFn, self, context);\n\n            if (record.type === \"normal\") {\n              // If an exception is thrown from innerFn, we leave state ===\n              // GenStateExecuting and loop back for another invocation.\n              state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n              if (record.arg === ContinueSentinel) {\n                continue;\n              }\n\n              return {\n                value: record.arg,\n                done: context.done\n              };\n            } else if (record.type === \"throw\") {\n              state = GenStateCompleted; // Dispatch the exception by looping back around to the\n              // context.dispatchException(context.arg) call above.\n\n              context.method = \"throw\";\n              context.arg = record.arg;\n            }\n          }\n        };\n      } // Call delegate.iterator[context.method](context.arg) and handle the\n      // result, either by returning a { value, done } result from the\n      // delegate iterator, or by modifying context.method and context.arg,\n      // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n      function maybeInvokeDelegate(delegate, context) {\n        var method = delegate.iterator[context.method];\n\n        if (method === undefined$1) {\n          // A .throw or .return when the delegate iterator has no .throw\n          // method always terminates the yield* loop.\n          context.delegate = null;\n\n          if (context.method === \"throw\") {\n            // Note: [\"return\"] must be used for ES3 parsing compatibility.\n            if (delegate.iterator[\"return\"]) {\n              // If the delegate iterator has a return method, give it a\n              // chance to clean up.\n              context.method = \"return\";\n              context.arg = undefined$1;\n              maybeInvokeDelegate(delegate, context);\n\n              if (context.method === \"throw\") {\n                // If maybeInvokeDelegate(context) changed context.method from\n                // \"return\" to \"throw\", let that override the TypeError below.\n                return ContinueSentinel;\n              }\n            }\n\n            context.method = \"throw\";\n            context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n          }\n\n          return ContinueSentinel;\n        }\n\n        var record = tryCatch(method, delegate.iterator, context.arg);\n\n        if (record.type === \"throw\") {\n          context.method = \"throw\";\n          context.arg = record.arg;\n          context.delegate = null;\n          return ContinueSentinel;\n        }\n\n        var info = record.arg;\n\n        if (!info) {\n          context.method = \"throw\";\n          context.arg = new TypeError(\"iterator result is not an object\");\n          context.delegate = null;\n          return ContinueSentinel;\n        }\n\n        if (info.done) {\n          // Assign the result of the finished delegate to the temporary\n          // variable specified by delegate.resultName (see delegateYield).\n          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n          context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n          // exception, let the outer generator proceed normally. If\n          // context.method was \"next\", forget context.arg since it has been\n          // \"consumed\" by the delegate iterator. If context.method was\n          // \"return\", allow the original .return call to continue in the\n          // outer generator.\n\n          if (context.method !== \"return\") {\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n        } else {\n          // Re-yield the result returned by the delegate method.\n          return info;\n        } // The delegate iterator is finished, so forget it and continue with\n        // the outer generator.\n\n\n        context.delegate = null;\n        return ContinueSentinel;\n      } // Define Generator.prototype.{next,throw,return} in terms of the\n      // unified ._invoke helper method.\n\n\n      defineIteratorMethods(Gp);\n      define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n      // @@iterator function is called on it. Some browsers' implementations of the\n      // iterator prototype chain incorrectly implement this, causing the Generator\n      // object to not be returned from this call. This ensures that doesn't happen.\n      // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n      Gp[iteratorSymbol] = function () {\n        return this;\n      };\n\n      Gp.toString = function () {\n        return \"[object Generator]\";\n      };\n\n      function pushTryEntry(locs) {\n        var entry = {\n          tryLoc: locs[0]\n        };\n\n        if (1 in locs) {\n          entry.catchLoc = locs[1];\n        }\n\n        if (2 in locs) {\n          entry.finallyLoc = locs[2];\n          entry.afterLoc = locs[3];\n        }\n\n        this.tryEntries.push(entry);\n      }\n\n      function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\";\n        delete record.arg;\n        entry.completion = record;\n      }\n\n      function Context(tryLocsList) {\n        // The root entry object (effectively a try statement without a catch\n        // or a finally block) gives us a place to store values thrown from\n        // locations where there is no enclosing try statement.\n        this.tryEntries = [{\n          tryLoc: \"root\"\n        }];\n        tryLocsList.forEach(pushTryEntry, this);\n        this.reset(true);\n      }\n\n      exports.keys = function (object) {\n        var keys = [];\n\n        for (var key in object) {\n          keys.push(key);\n        }\n\n        keys.reverse(); // Rather than returning an object with a next method, we keep\n        // things simple and return the next function itself.\n\n        return function next() {\n          while (keys.length) {\n            var key = keys.pop();\n\n            if (key in object) {\n              next.value = key;\n              next.done = false;\n              return next;\n            }\n          } // To avoid creating an additional object, we just hang the .value\n          // and .done properties off the next function object itself. This\n          // also ensures that the minifier will not anonymize the function.\n\n\n          next.done = true;\n          return next;\n        };\n      };\n\n      function values(iterable) {\n        if (iterable) {\n          var iteratorMethod = iterable[iteratorSymbol];\n\n          if (iteratorMethod) {\n            return iteratorMethod.call(iterable);\n          }\n\n          if (typeof iterable.next === \"function\") {\n            return iterable;\n          }\n\n          if (!isNaN(iterable.length)) {\n            var i = -1,\n                next = function next() {\n              while (++i < iterable.length) {\n                if (hasOwn.call(iterable, i)) {\n                  next.value = iterable[i];\n                  next.done = false;\n                  return next;\n                }\n              }\n\n              next.value = undefined$1;\n              next.done = true;\n              return next;\n            };\n\n            return next.next = next;\n          }\n        } // Return an iterator with no values.\n\n\n        return {\n          next: doneResult\n        };\n      }\n\n      exports.values = values;\n\n      function doneResult() {\n        return {\n          value: undefined$1,\n          done: true\n        };\n      }\n\n      Context.prototype = {\n        constructor: Context,\n        reset: function (skipTempReset) {\n          this.prev = 0;\n          this.next = 0; // Resetting context._sent for legacy support of Babel's\n          // function.sent implementation.\n\n          this.sent = this._sent = undefined$1;\n          this.done = false;\n          this.delegate = null;\n          this.method = \"next\";\n          this.arg = undefined$1;\n          this.tryEntries.forEach(resetTryEntry);\n\n          if (!skipTempReset) {\n            for (var name in this) {\n              // Not sure about the optimal order of these conditions:\n              if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n                this[name] = undefined$1;\n              }\n            }\n          }\n        },\n        stop: function () {\n          this.done = true;\n          var rootEntry = this.tryEntries[0];\n          var rootRecord = rootEntry.completion;\n\n          if (rootRecord.type === \"throw\") {\n            throw rootRecord.arg;\n          }\n\n          return this.rval;\n        },\n        dispatchException: function (exception) {\n          if (this.done) {\n            throw exception;\n          }\n\n          var context = this;\n\n          function handle(loc, caught) {\n            record.type = \"throw\";\n            record.arg = exception;\n            context.next = loc;\n\n            if (caught) {\n              // If the dispatched exception was caught by a catch block,\n              // then let that catch block handle the exception normally.\n              context.method = \"next\";\n              context.arg = undefined$1;\n            }\n\n            return !!caught;\n          }\n\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n            var record = entry.completion;\n\n            if (entry.tryLoc === \"root\") {\n              // Exception thrown outside of any try block that could handle\n              // it, so set the completion value of the entire function to\n              // throw the exception.\n              return handle(\"end\");\n            }\n\n            if (entry.tryLoc <= this.prev) {\n              var hasCatch = hasOwn.call(entry, \"catchLoc\");\n              var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n              if (hasCatch && hasFinally) {\n                if (this.prev < entry.catchLoc) {\n                  return handle(entry.catchLoc, true);\n                } else if (this.prev < entry.finallyLoc) {\n                  return handle(entry.finallyLoc);\n                }\n              } else if (hasCatch) {\n                if (this.prev < entry.catchLoc) {\n                  return handle(entry.catchLoc, true);\n                }\n              } else if (hasFinally) {\n                if (this.prev < entry.finallyLoc) {\n                  return handle(entry.finallyLoc);\n                }\n              } else {\n                throw new Error(\"try statement without catch or finally\");\n              }\n            }\n          }\n        },\n        abrupt: function (type, arg) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n              var finallyEntry = entry;\n              break;\n            }\n          }\n\n          if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n            // Ignore the finally entry if control is not jumping to a\n            // location outside the try/catch block.\n            finallyEntry = null;\n          }\n\n          var record = finallyEntry ? finallyEntry.completion : {};\n          record.type = type;\n          record.arg = arg;\n\n          if (finallyEntry) {\n            this.method = \"next\";\n            this.next = finallyEntry.finallyLoc;\n            return ContinueSentinel;\n          }\n\n          return this.complete(record);\n        },\n        complete: function (record, afterLoc) {\n          if (record.type === \"throw\") {\n            throw record.arg;\n          }\n\n          if (record.type === \"break\" || record.type === \"continue\") {\n            this.next = record.arg;\n          } else if (record.type === \"return\") {\n            this.rval = this.arg = record.arg;\n            this.method = \"return\";\n            this.next = \"end\";\n          } else if (record.type === \"normal\" && afterLoc) {\n            this.next = afterLoc;\n          }\n\n          return ContinueSentinel;\n        },\n        finish: function (finallyLoc) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.finallyLoc === finallyLoc) {\n              this.complete(entry.completion, entry.afterLoc);\n              resetTryEntry(entry);\n              return ContinueSentinel;\n            }\n          }\n        },\n        \"catch\": function (tryLoc) {\n          for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n            var entry = this.tryEntries[i];\n\n            if (entry.tryLoc === tryLoc) {\n              var record = entry.completion;\n\n              if (record.type === \"throw\") {\n                var thrown = record.arg;\n                resetTryEntry(entry);\n              }\n\n              return thrown;\n            }\n          } // The context.catch method must only be called with a location\n          // argument that corresponds to a known catch block.\n\n\n          throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function (iterable, resultName, nextLoc) {\n          this.delegate = {\n            iterator: values(iterable),\n            resultName: resultName,\n            nextLoc: nextLoc\n          };\n\n          if (this.method === \"next\") {\n            // Deliberately forget the last sent value so that we don't\n            // accidentally pass it on to the delegate.\n            this.arg = undefined$1;\n          }\n\n          return ContinueSentinel;\n        }\n      }; // Regardless of whether this script is executing as a CommonJS module\n      // or not, return the runtime object so that we can declare the variable\n      // regeneratorRuntime in the outer scope, which allows this module to be\n      // injected easily by `bin/regenerator --include-runtime script.js`.\n\n      return exports;\n    }( // If this script is executing as a CommonJS module, use module.exports\n    // as the regeneratorRuntime namespace. Otherwise create a new empty\n    // object. Either way, the resulting object will be used to initialize\n    // the regeneratorRuntime variable at the top of this file.\n    module.exports );\n\n    try {\n      regeneratorRuntime = runtime;\n    } catch (accidentalStrictMode) {\n      // This module should not be running in strict mode, so the above\n      // assignment should always work unless something is misconfigured. Just\n      // in case runtime.js accidentally runs in strict mode, we can escape\n      // strict mode using a global Function call. This could conceivably fail\n      // if a Content Security Policy forbids using Function, but in that case\n      // the proper solution is to fix the accidental strict mode problem. If\n      // you've misconfigured your bundler to force strict mode and applied a\n      // CSP to forbid Function, and you're not willing to fix either of those\n      // problems, please detail your unique predicament in a GitHub issue.\n      Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n  })(runtime);\n\n  var regeneratorRuntime$1 = runtime.exports;\n\n  var niceErrors = {\n    0: \"Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'\",\n    1: function _(annotationType, key) {\n      return \"Cannot apply '\" + annotationType + \"' to '\" + key.toString() + \"': Field not found.\";\n    },\n\n    /*\r\n    2(prop) {\r\n        return `invalid decorator for '${prop.toString()}'`\r\n    },\r\n    3(prop) {\r\n        return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\r\n    },\r\n    4(prop) {\r\n        return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\r\n    },\r\n    */\n    5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n    6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n    7: \"'entries()' can only be used on observable objects, arrays and maps\",\n    8: \"'set()' can only be used on observable objects, arrays and maps\",\n    9: \"'remove()' can only be used on observable objects, arrays and maps\",\n    10: \"'has()' can only be used on observable objects, arrays and maps\",\n    11: \"'get()' can only be used on observable objects, arrays and maps\",\n    12: \"Invalid annotation\",\n    13: \"Dynamic observable objects cannot be frozen\",\n    14: \"Intercept handlers should return nothing or a change object\",\n    15: \"Observable arrays cannot be frozen\",\n    16: \"Modification exception: the internal structure of an observable array was changed.\",\n    17: function _(index, length) {\n      return \"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + length;\n    },\n    18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n    19: function _(other) {\n      return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name;\n    },\n    20: function _(other) {\n      return \"Cannot initialize map from \" + other;\n    },\n    21: function _(dataStructure) {\n      return \"Cannot convert to map from '\" + dataStructure + \"'\";\n    },\n    22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n    23: \"It is not possible to get index atoms from arrays\",\n    24: function _(thing) {\n      return \"Cannot obtain administration from \" + thing;\n    },\n    25: function _(property, name) {\n      return \"the entry '\" + property + \"' does not exist in the observable map '\" + name + \"'\";\n    },\n    26: \"please specify a property\",\n    27: function _(property, name) {\n      return \"no observable property '\" + property.toString() + \"' found on the observable object '\" + name + \"'\";\n    },\n    28: function _(thing) {\n      return \"Cannot obtain atom from \" + thing;\n    },\n    29: \"Expecting some object\",\n    30: \"invalid action stack. did you forget to finish an action?\",\n    31: \"missing option for computed: get\",\n    32: function _(name, derivation) {\n      return \"Cycle detected in computation \" + name + \": \" + derivation;\n    },\n    33: function _(name) {\n      return \"The setter of computed value '\" + name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\";\n    },\n    34: function _(name) {\n      return \"[ComputedValue '\" + name + \"'] It is not possible to assign a new value to a computed value.\";\n    },\n    35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n    36: \"isolateGlobalState should be called before MobX is running any reactions\",\n    37: function _(method) {\n      return \"[mobx] `observableArray.\" + method + \"()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice().\" + method + \"()` instead\";\n    },\n    38: \"'ownKeys()' can only be used on observable objects\",\n    39: \"'defineProperty()' can only be used on observable objects\"\n  };\n  var errors =  true ? niceErrors : 0;\n\n  function die(error) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (true) {\n      var e = typeof error === \"string\" ? error : errors[error];\n      if (typeof e === \"function\") e = e.apply(null, args);\n      throw new Error(\"[MobX] \" + e);\n    }\n\n    throw new Error(typeof error === \"number\" ? \"[MobX] minified error nr: \" + error + (args.length ? \" \" + args.map(String).join(\",\") : \"\") + \". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts\" : \"[MobX] \" + error);\n  }\n\n  var mockGlobal = {};\n\n  function getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n      return globalThis;\n    }\n\n    if (typeof window !== \"undefined\") {\n      return window;\n    }\n\n    if (typeof __webpack_require__.g !== \"undefined\") {\n      return __webpack_require__.g;\n    }\n\n    if (typeof self !== \"undefined\") {\n      return self;\n    }\n\n    return mockGlobal;\n  }\n\n  var assign$2 = Object.assign;\n  var getDescriptor = Object.getOwnPropertyDescriptor;\n  var defineProperty = Object.defineProperty;\n  var objectPrototype = Object.prototype;\n  var EMPTY_ARRAY = [];\n  Object.freeze(EMPTY_ARRAY);\n  var EMPTY_OBJECT = {};\n  Object.freeze(EMPTY_OBJECT);\n  var hasProxy = typeof Proxy !== \"undefined\";\n  var plainObjectString = /*#__PURE__*/Object.toString();\n\n  function assertProxies() {\n    if (!hasProxy) {\n      die( true ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\" : 0);\n    }\n  }\n\n  function warnAboutProxyRequirement(msg) {\n    if ( true && globalState.verifyProxies) {\n      die(\"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" + msg);\n    }\n  }\n\n  function getNextId() {\n    return ++globalState.mobxGuid;\n  }\n  /**\r\n   * Makes sure that the provided function is invoked at most once.\r\n   */\n\n\n  function once(func) {\n    var invoked = false;\n    return function () {\n      if (invoked) return;\n      invoked = true;\n      return func.apply(this, arguments);\n    };\n  }\n\n  var noop = function noop() {};\n\n  function isFunction(fn) {\n    return typeof fn === \"function\";\n  }\n\n  function isStringish(value) {\n    var t = typeof value;\n\n    switch (t) {\n      case \"string\":\n      case \"symbol\":\n      case \"number\":\n        return true;\n    }\n\n    return false;\n  }\n\n  function isObject(value) {\n    return value !== null && typeof value === \"object\";\n  }\n\n  function isPlainObject(value) {\n    var _proto$constructor;\n\n    if (!isObject(value)) return false;\n    var proto = Object.getPrototypeOf(value);\n    if (proto == null) return true;\n    return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;\n  } // https://stackoverflow.com/a/37865170\n\n\n  function isGenerator(obj) {\n    var constructor = obj == null ? void 0 : obj.constructor;\n    if (!constructor) return false;\n    if (\"GeneratorFunction\" === constructor.name || \"GeneratorFunction\" === constructor.displayName) return true;\n    return false;\n  }\n\n  function addHiddenProp(object, propName, value) {\n    defineProperty(object, propName, {\n      enumerable: false,\n      writable: true,\n      configurable: true,\n      value: value\n    });\n  }\n\n  function addHiddenFinalProp(object, propName, value) {\n    defineProperty(object, propName, {\n      enumerable: false,\n      writable: false,\n      configurable: true,\n      value: value\n    });\n  }\n\n  function createInstanceofPredicate(name, theClass) {\n    var propName = \"isMobX\" + name;\n    theClass.prototype[propName] = true;\n    return function (x) {\n      return isObject(x) && x[propName] === true;\n    };\n  }\n\n  function isES6Map(thing) {\n    return thing instanceof Map;\n  }\n\n  function isES6Set(thing) {\n    return thing instanceof Set;\n  }\n\n  var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\";\n  /**\r\n   * Returns the following: own enumerable keys and symbols.\r\n   */\n\n  function getPlainObjectKeys(object) {\n    var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...\n\n    if (!hasGetOwnPropertySymbols) return keys;\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (!symbols.length) return keys;\n    return [].concat(keys, symbols.filter(function (s) {\n      return objectPrototype.propertyIsEnumerable.call(object, s);\n    }));\n  } // From Immer utils\n  // Returns all own keys, including non-enumerable and symbolic\n\n\n  var ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n  } :\n  /* istanbul ignore next */\n  Object.getOwnPropertyNames;\n\n  function stringifyKey(key) {\n    if (typeof key === \"string\") return key;\n    if (typeof key === \"symbol\") return key.toString();\n    return new String(key).toString();\n  }\n\n  function toPrimitive(value) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value;\n  }\n\n  function hasProp(target, prop) {\n    return objectPrototype.hasOwnProperty.call(target, prop);\n  } // From Immer utils\n\n\n  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n    // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n    var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up\n\n    ownKeys(target).forEach(function (key) {\n      res[key] = getDescriptor(target, key);\n    });\n    return res;\n  };\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it;\n\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    it = o[Symbol.iterator]();\n    return it.next.bind(it);\n  }\n\n  var storedAnnotationsSymbol = /*#__PURE__*/Symbol(\"mobx-stored-annotations\");\n  /**\r\n   * Creates a function that acts as\r\n   * - decorator\r\n   * - annotation object\r\n   */\n\n  function createDecoratorAnnotation(annotation) {\n    function decorator(target, property) {\n      storeAnnotation(target, property, annotation);\n    }\n\n    return Object.assign(decorator, annotation);\n  }\n  /**\r\n   * Stores annotation to prototype,\r\n   * so it can be inspected later by `makeObservable` called from constructor\r\n   */\n\n\n  function storeAnnotation(prototype, key, annotation) {\n    if (!hasProp(prototype, storedAnnotationsSymbol)) {\n      addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));\n    } // @override must override something\n\n\n    if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n      var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n      die(\"'\" + fieldName + \"' is decorated with 'override', \" + \"but no such decorated member was found on prototype.\");\n    } // Cannot re-decorate\n\n\n    assertNotDecorated(prototype, annotation, key); // Ignore override\n\n    if (!isOverride(annotation)) {\n      prototype[storedAnnotationsSymbol][key] = annotation;\n    }\n  }\n\n  function assertNotDecorated(prototype, annotation, key) {\n    if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n      var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n      var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;\n      var requestedAnnotationType = annotation.annotationType_;\n      die(\"Cannot apply '@\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already decorated with '@\" + currentAnnotationType + \"'.\") + \"\\nRe-decorating fields is not allowed.\" + \"\\nUse '@override' decorator for methods overriden by subclass.\");\n    }\n  }\n\n  var $mobx = /*#__PURE__*/Symbol(\"mobx administration\");\n\n  var Atom = /*#__PURE__*/function () {\n    // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n\n    /**\r\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\r\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\r\n     */\n    function Atom(name_) {\n      if (name_ === void 0) {\n        name_ =  true ? \"Atom@\" + getNextId() : 0;\n      }\n\n      this.name_ = void 0;\n      this.isPendingUnobservation_ = false;\n      this.isBeingObserved_ = false;\n      this.observers_ = new Set();\n      this.diffValue_ = 0;\n      this.lastAccessedBy_ = 0;\n      this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n      this.onBOL = void 0;\n      this.onBUOL = void 0;\n      this.name_ = name_;\n    } // onBecomeObservedListeners\n\n\n    var _proto = Atom.prototype;\n\n    _proto.onBO = function onBO() {\n      if (this.onBOL) {\n        this.onBOL.forEach(function (listener) {\n          return listener();\n        });\n      }\n    };\n\n    _proto.onBUO = function onBUO() {\n      if (this.onBUOL) {\n        this.onBUOL.forEach(function (listener) {\n          return listener();\n        });\n      }\n    }\n    /**\r\n     * Invoke this method to notify mobx that your atom has been used somehow.\r\n     * Returns true if there is currently a reactive context.\r\n     */\n    ;\n\n    _proto.reportObserved = function reportObserved$1() {\n      return reportObserved(this);\n    }\n    /**\r\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\r\n     */\n    ;\n\n    _proto.reportChanged = function reportChanged() {\n      startBatch();\n      propagateChanged(this);\n      endBatch();\n    };\n\n    _proto.toString = function toString() {\n      return this.name_;\n    };\n\n    return Atom;\n  }();\n\n  var isAtom = /*#__PURE__*/createInstanceofPredicate(\"Atom\", Atom);\n\n  function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n    if (onBecomeObservedHandler === void 0) {\n      onBecomeObservedHandler = noop;\n    }\n\n    if (onBecomeUnobservedHandler === void 0) {\n      onBecomeUnobservedHandler = noop;\n    }\n\n    var atom = new Atom(name); // default `noop` listener will not initialize the hook Set\n\n    if (onBecomeObservedHandler !== noop) {\n      onBecomeObserved(atom, onBecomeObservedHandler);\n    }\n\n    if (onBecomeUnobservedHandler !== noop) {\n      onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n    }\n\n    return atom;\n  }\n\n  function identityComparer(a, b) {\n    return a === b;\n  }\n\n  function structuralComparer(a, b) {\n    return deepEqual(a, b);\n  }\n\n  function shallowComparer(a, b) {\n    return deepEqual(a, b, 1);\n  }\n\n  function defaultComparer(a, b) {\n    return Object.is(a, b);\n  }\n\n  var comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    \"default\": defaultComparer,\n    shallow: shallowComparer\n  };\n\n  function deepEnhancer(v, _, name) {\n    // it is an observable already, done\n    if (isObservable(v)) return v; // something that can be converted and mutated?\n\n    if (Array.isArray(v)) return observable.array(v, {\n      name: name\n    });\n    if (isPlainObject(v)) return observable.object(v, undefined, {\n      name: name\n    });\n    if (isES6Map(v)) return observable.map(v, {\n      name: name\n    });\n    if (isES6Set(v)) return observable.set(v, {\n      name: name\n    });\n\n    if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n      if (isGenerator(v)) {\n        return flow(v);\n      } else {\n        return autoAction(name, v);\n      }\n    }\n\n    return v;\n  }\n\n  function shallowEnhancer(v, _, name) {\n    if (v === undefined || v === null) return v;\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;\n    if (Array.isArray(v)) return observable.array(v, {\n      name: name,\n      deep: false\n    });\n    if (isPlainObject(v)) return observable.object(v, undefined, {\n      name: name,\n      deep: false\n    });\n    if (isES6Map(v)) return observable.map(v, {\n      name: name,\n      deep: false\n    });\n    if (isES6Set(v)) return observable.set(v, {\n      name: name,\n      deep: false\n    });\n    if (true) die(\"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\");\n  }\n\n  function referenceEnhancer(newValue) {\n    // never turn into an observable\n    return newValue;\n  }\n\n  function refStructEnhancer(v, oldValue) {\n    if ( true && isObservable(v)) die(\"observable.struct should not be used with observable values\");\n    if (deepEqual(v, oldValue)) return oldValue;\n    return v;\n  }\n\n  var OVERRIDE = \"override\";\n\n  function isOverride(annotation) {\n    return annotation.annotationType_ === OVERRIDE;\n  }\n\n  function createActionAnnotation(name, options) {\n    return {\n      annotationType_: name,\n      options_: options,\n      make_: make_$1,\n      extend_: extend_$1\n    };\n  }\n\n  function make_$1(adm, key, descriptor, source) {\n    var _this$options_; // bound\n\n\n    if ((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) {\n      return this.extend_(adm, key, descriptor, false) === null ? 0\n      /* Cancel */\n      : 1\n      /* Break */\n      ;\n    } // own\n\n\n    if (source === adm.target_) {\n      return this.extend_(adm, key, descriptor, false) === null ? 0\n      /* Cancel */\n      : 2\n      /* Continue */\n      ;\n    } // prototype\n\n\n    if (isAction(descriptor.value)) {\n      // A prototype could have been annotated already by other constructor,\n      // rest of the proto chain must be annotated already\n      return 1\n      /* Break */\n      ;\n    }\n\n    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n    defineProperty(source, key, actionDescriptor);\n    return 2\n    /* Continue */\n    ;\n  }\n\n  function extend_$1(adm, key, descriptor, proxyTrap) {\n    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n    return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n  }\n\n  function assertActionDescriptor(adm, _ref, key, _ref2) {\n    var annotationType_ = _ref.annotationType_;\n    var value = _ref2.value;\n\n    if ( true && !isFunction(value)) {\n      die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a function value.\"));\n    }\n  }\n\n  function createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes\n  safeDescriptors) {\n    var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;\n\n    if (safeDescriptors === void 0) {\n      safeDescriptors = globalState.safeDescriptors;\n    }\n\n    assertActionDescriptor(adm, annotation, key, descriptor);\n    var value = descriptor.value;\n\n    if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {\n      var _adm$proxy_;\n\n      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    }\n\n    return {\n      value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),\n      // Non-configurable for classes\n      // prevents accidental field redefinition in subclass\n      configurable: safeDescriptors ? adm.isPlainObject_ : true,\n      // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n      enumerable: false,\n      // Non-obsevable, therefore non-writable\n      // Also prevents rewriting in subclass constructor\n      writable: safeDescriptors ? false : true\n    };\n  }\n\n  function createFlowAnnotation(name, options) {\n    return {\n      annotationType_: name,\n      options_: options,\n      make_: make_$2,\n      extend_: extend_$2\n    };\n  }\n\n  function make_$2(adm, key, descriptor, source) {\n    var _this$options_; // own\n\n\n    if (source === adm.target_) {\n      return this.extend_(adm, key, descriptor, false) === null ? 0\n      /* Cancel */\n      : 2\n      /* Continue */\n      ;\n    } // prototype\n    // bound - must annotate protos to support super.flow()\n\n\n    if (((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) && !isFlow(adm.target_[key])) {\n      if (this.extend_(adm, key, descriptor, false) === null) return 0\n      /* Cancel */\n      ;\n    }\n\n    if (isFlow(descriptor.value)) {\n      // A prototype could have been annotated already by other constructor,\n      // rest of the proto chain must be annotated already\n      return 1\n      /* Break */\n      ;\n    }\n\n    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n    defineProperty(source, key, flowDescriptor);\n    return 2\n    /* Continue */\n    ;\n  }\n\n  function extend_$2(adm, key, descriptor, proxyTrap) {\n    var _this$options_2;\n\n    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n    return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n  }\n\n  function assertFlowDescriptor(adm, _ref, key, _ref2) {\n    var annotationType_ = _ref.annotationType_;\n    var value = _ref2.value;\n\n    if ( true && !isFunction(value)) {\n      die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a generator function value.\"));\n    }\n  }\n\n  function createFlowDescriptor(adm, annotation, key, descriptor, bound, // provides ability to disable safeDescriptors for prototypes\n  safeDescriptors) {\n    if (safeDescriptors === void 0) {\n      safeDescriptors = globalState.safeDescriptors;\n    }\n\n    assertFlowDescriptor(adm, annotation, key, descriptor);\n    var value = descriptor.value;\n\n    if (bound) {\n      var _adm$proxy_;\n\n      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    }\n\n    return {\n      value: flow(value),\n      // Non-configurable for classes\n      // prevents accidental field redefinition in subclass\n      configurable: safeDescriptors ? adm.isPlainObject_ : true,\n      // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n      enumerable: false,\n      // Non-obsevable, therefore non-writable\n      // Also prevents rewriting in subclass constructor\n      writable: safeDescriptors ? false : true\n    };\n  }\n\n  function createComputedAnnotation(name, options) {\n    return {\n      annotationType_: name,\n      options_: options,\n      make_: make_$3,\n      extend_: extend_$3\n    };\n  }\n\n  function make_$3(adm, key, descriptor) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 1\n    /* Break */\n    ;\n  }\n\n  function extend_$3(adm, key, descriptor, proxyTrap) {\n    assertComputedDescriptor(adm, this, key, descriptor);\n    return adm.defineComputedProperty_(key, _extends({}, this.options_, {\n      get: descriptor.get,\n      set: descriptor.set\n    }), proxyTrap);\n  }\n\n  function assertComputedDescriptor(adm, _ref, key, _ref2) {\n    var annotationType_ = _ref.annotationType_;\n    var get = _ref2.get;\n\n    if ( true && !get) {\n      die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on getter(+setter) properties.\"));\n    }\n  }\n\n  function createObservableAnnotation(name, options) {\n    return {\n      annotationType_: name,\n      options_: options,\n      make_: make_$4,\n      extend_: extend_$4\n    };\n  }\n\n  function make_$4(adm, key, descriptor) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 1\n    /* Break */\n    ;\n  }\n\n  function extend_$4(adm, key, descriptor, proxyTrap) {\n    var _this$options_$enhanc, _this$options_;\n\n    assertObservableDescriptor(adm, this, key, descriptor);\n    return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n  }\n\n  function assertObservableDescriptor(adm, _ref, key, descriptor) {\n    var annotationType_ = _ref.annotationType_;\n\n    if ( true && !(\"value\" in descriptor)) {\n      die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' cannot be used on getter/setter properties\"));\n    }\n  }\n\n  var AUTO = \"true\";\n  var autoAnnotation = /*#__PURE__*/createAutoAnnotation();\n\n  function createAutoAnnotation(options) {\n    return {\n      annotationType_: AUTO,\n      options_: options,\n      make_: make_$5,\n      extend_: extend_$5\n    };\n  }\n\n  function make_$5(adm, key, descriptor, source) {\n    var _this$options_3, _this$options_4; // getter -> computed\n\n\n    if (descriptor.get) {\n      return computed.make_(adm, key, descriptor, source);\n    } // lone setter -> action setter\n\n\n    if (descriptor.set) {\n      // TODO make action applicable to setter and delegate to action.make_\n      var set = createAction(key.toString(), descriptor.set); // own\n\n      if (source === adm.target_) {\n        return adm.defineProperty_(key, {\n          configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n          set: set\n        }) === null ? 0\n        /* Cancel */\n        : 2\n        /* Continue */\n        ;\n      } // proto\n\n\n      defineProperty(source, key, {\n        configurable: true,\n        set: set\n      });\n      return 2\n      /* Continue */\n      ;\n    } // function on proto -> autoAction/flow\n\n\n    if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n      var _this$options_2;\n\n      if (isGenerator(descriptor.value)) {\n        var _this$options_;\n\n        var flowAnnotation = ((_this$options_ = this.options_) == null ? void 0 : _this$options_.autoBind) ? flow.bound : flow;\n        return flowAnnotation.make_(adm, key, descriptor, source);\n      }\n\n      var actionAnnotation = ((_this$options_2 = this.options_) == null ? void 0 : _this$options_2.autoBind) ? autoAction.bound : autoAction;\n      return actionAnnotation.make_(adm, key, descriptor, source);\n    } // other -> observable\n    // Copy props from proto as well, see test:\n    // \"decorate should work with Object.create\"\n\n\n    var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable; // if function respect autoBind option\n\n    if (typeof descriptor.value === \"function\" && ((_this$options_4 = this.options_) == null ? void 0 : _this$options_4.autoBind)) {\n      var _adm$proxy_;\n\n      descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n    }\n\n    return observableAnnotation.make_(adm, key, descriptor, source);\n  }\n\n  function extend_$5(adm, key, descriptor, proxyTrap) {\n    var _this$options_5, _this$options_6; // getter -> computed\n\n\n    if (descriptor.get) {\n      return computed.extend_(adm, key, descriptor, proxyTrap);\n    } // lone setter -> action setter\n\n\n    if (descriptor.set) {\n      // TODO make action applicable to setter and delegate to action.extend_\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: createAction(key.toString(), descriptor.set)\n      }, proxyTrap);\n    } // other -> observable\n    // if function respect autoBind option\n\n\n    if (typeof descriptor.value === \"function\" && ((_this$options_5 = this.options_) == null ? void 0 : _this$options_5.autoBind)) {\n      var _adm$proxy_2;\n\n      descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n    }\n\n    var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;\n    return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n  } // in the majority of cases\n\n\n  var defaultCreateObservableOptions = {\n    deep: true,\n    name: undefined,\n    defaultDecorator: undefined,\n    proxy: true\n  };\n  Object.freeze(defaultCreateObservableOptions);\n\n  function asCreateObservableOptions(thing) {\n    return thing || defaultCreateObservableOptions;\n  }\n\n  var observableAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable\");\n  var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.ref\", {\n    enhancer: referenceEnhancer\n  });\n  var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.shallow\", {\n    enhancer: shallowEnhancer\n  });\n  var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.struct\", {\n    enhancer: refStructEnhancer\n  });\n  var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\n\n  function getEnhancerFromOptions(options) {\n    return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n  }\n\n  function getAnnotationFromOptions(options) {\n    var _options$defaultDecor;\n\n    return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n  }\n\n  function getEnhancerFromAnnotation(annotation) {\n    var _annotation$options_$, _annotation$options_;\n\n    return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n  }\n  /**\r\n   * Turns an object, array or function into a reactive structure.\r\n   * @param v the value which should become observable.\r\n   */\n\n\n  function createObservable(v, arg2, arg3) {\n    // @observable someProp;\n    if (isStringish(arg2)) {\n      storeAnnotation(v, arg2, observableAnnotation);\n      return;\n    } // already observable - ignore\n\n\n    if (isObservable(v)) return v; // plain object\n\n    if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array\n\n    if (Array.isArray(v)) return observable.array(v, arg2); // Map\n\n    if (isES6Map(v)) return observable.map(v, arg2); // Set\n\n    if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore\n\n    if (typeof v === \"object\" && v !== null) return v; // anything else\n\n    return observable.box(v, arg2);\n  }\n\n  Object.assign(createObservable, observableDecoratorAnnotation);\n  var observableFactories = {\n    box: function box(value, options) {\n      var o = asCreateObservableOptions(options);\n      return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n    },\n    array: function array(initialValues, options) {\n      var o = asCreateObservableOptions(options);\n      return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n    },\n    map: function map(initialValues, options) {\n      var o = asCreateObservableOptions(options);\n      return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n    },\n    set: function set(initialValues, options) {\n      var o = asCreateObservableOptions(options);\n      return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n    },\n    object: function object(props, decorators, options) {\n      return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n    },\n    ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n    shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n    deep: observableDecoratorAnnotation,\n    struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n  }; // eslint-disable-next-line\n\n  var observable = /*#__PURE__*/assign$2(createObservable, observableFactories);\n  var COMPUTED = \"computed\";\n  var COMPUTED_STRUCT = \"computed.struct\";\n  var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\n  var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n    equals: comparer.structural\n  });\n  /**\r\n   * Decorator for class properties: @computed get value() { return expr; }.\r\n   * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\r\n   */\n\n  var computed = function computed(arg1, arg2) {\n    if (isStringish(arg2)) {\n      // @computed\n      return storeAnnotation(arg1, arg2, computedAnnotation);\n    }\n\n    if (isPlainObject(arg1)) {\n      // @computed({ options })\n      return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n    } // computed(expr, options?)\n\n\n    if (true) {\n      if (!isFunction(arg1)) die(\"First argument to `computed` should be an expression.\");\n      if (isFunction(arg2)) die(\"A setter as second argument is no longer supported, use `{ set: fn }` option instead\");\n    }\n\n    var opts = isPlainObject(arg2) ? arg2 : {};\n    opts.get = arg1;\n    opts.name || (opts.name = arg1.name || \"\");\n    /* for generated name */\n\n    return new ComputedValue(opts);\n  };\n\n  Object.assign(computed, computedAnnotation);\n  computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\n\n  var _getDescriptor$config, _getDescriptor; // mobx versions\n\n\n  var currentActionId = 0;\n  var nextActionId = 1;\n  var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, \"name\")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object\n\n  var tmpNameDescriptor = {\n    value: \"action\",\n    configurable: true,\n    writable: false,\n    enumerable: false\n  };\n\n  function createAction(actionName, fn, autoAction, ref) {\n    if (autoAction === void 0) {\n      autoAction = false;\n    }\n\n    if (true) {\n      if (!isFunction(fn)) die(\"`action` can only be invoked on functions\");\n      if (typeof actionName !== \"string\" || !actionName) die(\"actions should have valid names, got: '\" + actionName + \"'\");\n    }\n\n    function res() {\n      return executeAction(actionName, autoAction, fn, ref || this, arguments);\n    }\n\n    res.isMobxAction = true;\n\n    if (isFunctionNameConfigurable) {\n      tmpNameDescriptor.value = actionName;\n      Object.defineProperty(res, \"name\", tmpNameDescriptor);\n    }\n\n    return res;\n  }\n\n  function executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n    var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n\n    try {\n      return fn.apply(scope, args);\n    } catch (err) {\n      runInfo.error_ = err;\n      throw err;\n    } finally {\n      _endAction(runInfo);\n    }\n  }\n\n  function _startAction(actionName, canRunAsDerivation, // true for autoAction\n  scope, args) {\n    var notifySpy_ =  true && isSpyEnabled() && !!actionName;\n    var startTime_ = 0;\n\n    if ( true && notifySpy_) {\n      startTime_ = Date.now();\n      var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;\n      spyReportStart({\n        type: ACTION,\n        name: actionName,\n        object: scope,\n        arguments: flattenedArgs\n      });\n    }\n\n    var prevDerivation_ = globalState.trackingDerivation;\n    var runAsAction = !canRunAsDerivation || !prevDerivation_;\n    startBatch();\n    var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n\n    if (runAsAction) {\n      untrackedStart();\n      prevAllowStateChanges_ = allowStateChangesStart(true);\n    }\n\n    var prevAllowStateReads_ = allowStateReadsStart(true);\n    var runInfo = {\n      runAsAction_: runAsAction,\n      prevDerivation_: prevDerivation_,\n      prevAllowStateChanges_: prevAllowStateChanges_,\n      prevAllowStateReads_: prevAllowStateReads_,\n      notifySpy_: notifySpy_,\n      startTime_: startTime_,\n      actionId_: nextActionId++,\n      parentActionId_: currentActionId\n    };\n    currentActionId = runInfo.actionId_;\n    return runInfo;\n  }\n\n  function _endAction(runInfo) {\n    if (currentActionId !== runInfo.actionId_) {\n      die(30);\n    }\n\n    currentActionId = runInfo.parentActionId_;\n\n    if (runInfo.error_ !== undefined) {\n      globalState.suppressReactionErrors = true;\n    }\n\n    allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n    allowStateReadsEnd(runInfo.prevAllowStateReads_);\n    endBatch();\n    if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);\n\n    if ( true && runInfo.notifySpy_) {\n      spyReportEnd({\n        time: Date.now() - runInfo.startTime_\n      });\n    }\n\n    globalState.suppressReactionErrors = false;\n  }\n\n  function allowStateChangesStart(allowStateChanges) {\n    var prev = globalState.allowStateChanges;\n    globalState.allowStateChanges = allowStateChanges;\n    return prev;\n  }\n\n  function allowStateChangesEnd(prev) {\n    globalState.allowStateChanges = prev;\n  }\n\n  var _Symbol$toPrimitive;\n\n  var CREATE = \"create\";\n  _Symbol$toPrimitive = Symbol.toPrimitive;\n\n  var ObservableValue = /*#__PURE__*/function (_Atom) {\n    _inheritsLoose(ObservableValue, _Atom);\n\n    function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n      var _this;\n\n      if (name_ === void 0) {\n        name_ =  true ? \"ObservableValue@\" + getNextId() : 0;\n      }\n\n      if (notifySpy === void 0) {\n        notifySpy = true;\n      }\n\n      if (equals === void 0) {\n        equals = comparer[\"default\"];\n      }\n\n      _this = _Atom.call(this, name_) || this;\n      _this.enhancer = void 0;\n      _this.name_ = void 0;\n      _this.equals = void 0;\n      _this.hasUnreportedChange_ = false;\n      _this.interceptors_ = void 0;\n      _this.changeListeners_ = void 0;\n      _this.value_ = void 0;\n      _this.dehancer = void 0;\n      _this.enhancer = enhancer;\n      _this.name_ = name_;\n      _this.equals = equals;\n      _this.value_ = enhancer(value, undefined, name_);\n\n      if ( true && notifySpy && isSpyEnabled()) {\n        // only notify spy if this is a stand-alone observable\n        spyReport({\n          type: CREATE,\n          object: _assertThisInitialized(_this),\n          observableKind: \"value\",\n          debugObjectName: _this.name_,\n          newValue: \"\" + _this.value_\n        });\n      }\n\n      return _this;\n    }\n\n    var _proto = ObservableValue.prototype;\n\n    _proto.dehanceValue = function dehanceValue(value) {\n      if (this.dehancer !== undefined) return this.dehancer(value);\n      return value;\n    };\n\n    _proto.set = function set(newValue) {\n      var oldValue = this.value_;\n      newValue = this.prepareNewValue_(newValue);\n\n      if (newValue !== globalState.UNCHANGED) {\n        var notifySpy = isSpyEnabled();\n\n        if ( true && notifySpy) {\n          spyReportStart({\n            type: UPDATE,\n            object: this,\n            observableKind: \"value\",\n            debugObjectName: this.name_,\n            newValue: newValue,\n            oldValue: oldValue\n          });\n        }\n\n        this.setNewValue_(newValue);\n        if ( true && notifySpy) spyReportEnd();\n      }\n    };\n\n    _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n      checkIfStateModificationsAreAllowed(this);\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this,\n          type: UPDATE,\n          newValue: newValue\n        });\n        if (!change) return globalState.UNCHANGED;\n        newValue = change.newValue;\n      } // apply modifier\n\n\n      newValue = this.enhancer(newValue, this.value_, this.name_);\n      return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n    };\n\n    _proto.setNewValue_ = function setNewValue_(newValue) {\n      var oldValue = this.value_;\n      this.value_ = newValue;\n      this.reportChanged();\n\n      if (hasListeners(this)) {\n        notifyListeners(this, {\n          type: UPDATE,\n          object: this,\n          newValue: newValue,\n          oldValue: oldValue\n        });\n      }\n    };\n\n    _proto.get = function get() {\n      this.reportObserved();\n      return this.dehanceValue(this.value_);\n    };\n\n    _proto.intercept_ = function intercept_(handler) {\n      return registerInterceptor(this, handler);\n    };\n\n    _proto.observe_ = function observe_(listener, fireImmediately) {\n      if (fireImmediately) listener({\n        observableKind: \"value\",\n        debugObjectName: this.name_,\n        object: this,\n        type: UPDATE,\n        newValue: this.value_,\n        oldValue: undefined\n      });\n      return registerListener(this, listener);\n    };\n\n    _proto.raw = function raw() {\n      // used by MST ot get undehanced value\n      return this.value_;\n    };\n\n    _proto.toJSON = function toJSON() {\n      return this.get();\n    };\n\n    _proto.toString = function toString() {\n      return this.name_ + \"[\" + this.value_ + \"]\";\n    };\n\n    _proto.valueOf = function valueOf() {\n      return toPrimitive(this.get());\n    };\n\n    _proto[_Symbol$toPrimitive] = function () {\n      return this.valueOf();\n    };\n\n    return ObservableValue;\n  }(Atom);\n\n  var _Symbol$toPrimitive$1;\n  /**\r\n   * A node in the state dependency root that observes other nodes, and can be observed itself.\r\n   *\r\n   * ComputedValue will remember the result of the computation for the duration of the batch, or\r\n   * while being observed.\r\n   *\r\n   * During this time it will recompute only when one of its direct dependencies changed,\r\n   * but only when it is being accessed with `ComputedValue.get()`.\r\n   *\r\n   * Implementation description:\r\n   * 1. First time it's being accessed it will compute and remember result\r\n   *    give back remembered result until 2. happens\r\n   * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\r\n   * 3. When it's being accessed, recompute if any shallow dependency changed.\r\n   *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\r\n   *    go to step 2. either way\r\n   *\r\n   * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\r\n   */\n\n\n  _Symbol$toPrimitive$1 = Symbol.toPrimitive;\n\n  var ComputedValue = /*#__PURE__*/function () {\n    // nodes we are looking at. Our value depends on these nodes\n    // during tracking it's an array with new observed observers\n    // to check for cycles\n    // N.B: unminified as it is used by MST\n\n    /**\r\n     * Create a new computed value based on a function expression.\r\n     *\r\n     * The `name` property is for debug purposes only.\r\n     *\r\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\r\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\r\n     * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\r\n     * Structural comparison can be convenient if you always produce a new aggregated object and\r\n     * don't want to notify observers if it is structurally the same.\r\n     * This is useful for working with vectors, mouse coordinates etc.\r\n     */\n    function ComputedValue(options) {\n      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n      this.observing_ = [];\n      this.newObserving_ = null;\n      this.isBeingObserved_ = false;\n      this.isPendingUnobservation_ = false;\n      this.observers_ = new Set();\n      this.diffValue_ = 0;\n      this.runId_ = 0;\n      this.lastAccessedBy_ = 0;\n      this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n      this.unboundDepsCount_ = 0;\n      this.value_ = new CaughtException(null);\n      this.name_ = void 0;\n      this.triggeredBy_ = void 0;\n      this.isComputing_ = false;\n      this.isRunningSetter_ = false;\n      this.derivation = void 0;\n      this.setter_ = void 0;\n      this.isTracing_ = TraceMode.NONE;\n      this.scope_ = void 0;\n      this.equals_ = void 0;\n      this.requiresReaction_ = void 0;\n      this.keepAlive_ = void 0;\n      this.onBOL = void 0;\n      this.onBUOL = void 0;\n      if (!options.get) die(31);\n      this.derivation = options.get;\n      this.name_ = options.name || ( true ? \"ComputedValue@\" + getNextId() : 0);\n\n      if (options.set) {\n        this.setter_ = createAction( true ? this.name_ + \"-setter\" : 0, options.set);\n      }\n\n      this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer[\"default\"]);\n      this.scope_ = options.context;\n      this.requiresReaction_ = !!options.requiresReaction;\n      this.keepAlive_ = !!options.keepAlive;\n    }\n\n    var _proto = ComputedValue.prototype;\n\n    _proto.onBecomeStale_ = function onBecomeStale_() {\n      propagateMaybeChanged(this);\n    };\n\n    _proto.onBO = function onBO() {\n      if (this.onBOL) {\n        this.onBOL.forEach(function (listener) {\n          return listener();\n        });\n      }\n    };\n\n    _proto.onBUO = function onBUO() {\n      if (this.onBUOL) {\n        this.onBUOL.forEach(function (listener) {\n          return listener();\n        });\n      }\n    }\n    /**\r\n     * Returns the current value of this computed value.\r\n     * Will evaluate its computation first if needed.\r\n     */\n    ;\n\n    _proto.get = function get() {\n      if (this.isComputing_) die(32, this.name_, this.derivation);\n\n      if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&\n      this.observers_.size === 0 && !this.keepAlive_) {\n        if (shouldCompute(this)) {\n          this.warnAboutUntrackedRead_();\n          startBatch(); // See perf test 'computed memoization'\n\n          this.value_ = this.computeValue_(false);\n          endBatch();\n        }\n      } else {\n        reportObserved(this);\n\n        if (shouldCompute(this)) {\n          var prevTrackingContext = globalState.trackingContext;\n          if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;\n          if (this.trackAndCompute()) propagateChangeConfirmed(this);\n          globalState.trackingContext = prevTrackingContext;\n        }\n      }\n\n      var result = this.value_;\n      if (isCaughtException(result)) throw result.cause;\n      return result;\n    };\n\n    _proto.set = function set(value) {\n      if (this.setter_) {\n        if (this.isRunningSetter_) die(33, this.name_);\n        this.isRunningSetter_ = true;\n\n        try {\n          this.setter_.call(this.scope_, value);\n        } finally {\n          this.isRunningSetter_ = false;\n        }\n      } else die(34, this.name_);\n    };\n\n    _proto.trackAndCompute = function trackAndCompute() {\n      // N.B: unminified as it is used by MST\n      var oldValue = this.value_;\n      var wasSuspended =\n      /* see #1208 */\n      this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n      var newValue = this.computeValue_(true);\n\n      if ( true && isSpyEnabled()) {\n        spyReport({\n          observableKind: \"computed\",\n          debugObjectName: this.name_,\n          object: this.scope_,\n          type: \"update\",\n          oldValue: this.value_,\n          newValue: newValue\n        });\n      }\n\n      var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n\n      if (changed) {\n        this.value_ = newValue;\n      }\n\n      return changed;\n    };\n\n    _proto.computeValue_ = function computeValue_(track) {\n      this.isComputing_ = true; // don't allow state changes during computation\n\n      var prev = allowStateChangesStart(false);\n      var res;\n\n      if (track) {\n        res = trackDerivedFunction(this, this.derivation, this.scope_);\n      } else {\n        if (globalState.disableErrorBoundaries === true) {\n          res = this.derivation.call(this.scope_);\n        } else {\n          try {\n            res = this.derivation.call(this.scope_);\n          } catch (e) {\n            res = new CaughtException(e);\n          }\n        }\n      }\n\n      allowStateChangesEnd(prev);\n      this.isComputing_ = false;\n      return res;\n    };\n\n    _proto.suspend_ = function suspend_() {\n      if (!this.keepAlive_) {\n        clearObserving(this);\n        this.value_ = undefined; // don't hold on to computed value!\n      }\n    };\n\n    _proto.observe_ = function observe_(listener, fireImmediately) {\n      var _this = this;\n\n      var firstTime = true;\n      var prevValue = undefined;\n      return autorun(function () {\n        // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n        var newValue = _this.get();\n\n        if (!firstTime || fireImmediately) {\n          var prevU = untrackedStart();\n          listener({\n            observableKind: \"computed\",\n            debugObjectName: _this.name_,\n            type: UPDATE,\n            object: _this,\n            newValue: newValue,\n            oldValue: prevValue\n          });\n          untrackedEnd(prevU);\n        }\n\n        firstTime = false;\n        prevValue = newValue;\n      });\n    };\n\n    _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n      if (false) {}\n\n      if (this.requiresReaction_ === true) {\n        die(\"[mobx] Computed value \" + this.name_ + \" is read outside a reactive context\");\n      }\n\n      if (this.isTracing_ !== TraceMode.NONE) {\n        console.log(\"[mobx.trace] '\" + this.name_ + \"' is being read outside a reactive context. Doing a full recompute\");\n      }\n\n      if (globalState.computedRequiresReaction) {\n        console.warn(\"[mobx] Computed value \" + this.name_ + \" is being read outside a reactive context. Doing a full recompute\");\n      }\n    };\n\n    _proto.toString = function toString() {\n      return this.name_ + \"[\" + this.derivation.toString() + \"]\";\n    };\n\n    _proto.valueOf = function valueOf() {\n      return toPrimitive(this.get());\n    };\n\n    _proto[_Symbol$toPrimitive$1] = function () {\n      return this.valueOf();\n    };\n\n    return ComputedValue;\n  }();\n\n  var isComputedValue = /*#__PURE__*/createInstanceofPredicate(\"ComputedValue\", ComputedValue);\n  var IDerivationState_;\n\n  (function (IDerivationState_) {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    IDerivationState_[IDerivationState_[\"NOT_TRACKING_\"] = -1] = \"NOT_TRACKING_\"; // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n\n    IDerivationState_[IDerivationState_[\"UP_TO_DATE_\"] = 0] = \"UP_TO_DATE_\"; // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n\n    IDerivationState_[IDerivationState_[\"POSSIBLY_STALE_\"] = 1] = \"POSSIBLY_STALE_\"; // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n\n    IDerivationState_[IDerivationState_[\"STALE_\"] = 2] = \"STALE_\";\n  })(IDerivationState_ || (IDerivationState_ = {}));\n\n  var TraceMode;\n\n  (function (TraceMode) {\n    TraceMode[TraceMode[\"NONE\"] = 0] = \"NONE\";\n    TraceMode[TraceMode[\"LOG\"] = 1] = \"LOG\";\n    TraceMode[TraceMode[\"BREAK\"] = 2] = \"BREAK\";\n  })(TraceMode || (TraceMode = {}));\n\n  var CaughtException = function CaughtException(cause) {\n    this.cause = void 0;\n    this.cause = cause; // Empty\n  };\n\n  function isCaughtException(e) {\n    return e instanceof CaughtException;\n  }\n  /**\r\n   * Finds out whether any dependency of the derivation has actually changed.\r\n   * If dependenciesState is 1 then it will recalculate dependencies,\r\n   * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n   *\r\n   * By iterating over the dependencies in the same order that they were reported and\r\n   * stopping on the first change, all the recalculations are only called for ComputedValues\r\n   * that will be tracked by derivation. That is because we assume that if the first x\r\n   * dependencies of the derivation doesn't change then the derivation should run the same way\r\n   * up until accessing x-th dependency.\r\n   */\n\n\n  function shouldCompute(derivation) {\n    switch (derivation.dependenciesState_) {\n      case IDerivationState_.UP_TO_DATE_:\n        return false;\n\n      case IDerivationState_.NOT_TRACKING_:\n      case IDerivationState_.STALE_:\n        return true;\n\n      case IDerivationState_.POSSIBLY_STALE_:\n        {\n          // state propagation can occur outside of action/reactive context #2195\n          var prevAllowStateReads = allowStateReadsStart(true);\n          var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n\n          var obs = derivation.observing_,\n              l = obs.length;\n\n          for (var i = 0; i < l; i++) {\n            var obj = obs[i];\n\n            if (isComputedValue(obj)) {\n              if (globalState.disableErrorBoundaries) {\n                obj.get();\n              } else {\n                try {\n                  obj.get();\n                } catch (e) {\n                  // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                  untrackedEnd(prevUntracked);\n                  allowStateReadsEnd(prevAllowStateReads);\n                  return true;\n                }\n              } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n              // and `derivation` is an observer of `obj`\n              // invariantShouldCompute(derivation)\n\n\n              if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            }\n          }\n\n          changeDependenciesStateTo0(derivation);\n          untrackedEnd(prevUntracked);\n          allowStateReadsEnd(prevAllowStateReads);\n          return false;\n        }\n    }\n  }\n\n  function checkIfStateModificationsAreAllowed(atom) {\n    if (false) {}\n\n    var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n\n    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === \"always\")) console.warn(\"[MobX] \" + (globalState.enforceActions ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \" : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") + atom.name_);\n  }\n\n  function checkIfStateReadsAreAllowed(observable) {\n    if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n      console.warn(\"[mobx] Observable \" + observable.name_ + \" being read outside a reactive context\");\n    }\n  }\n  /**\r\n   * Executes the provided function `f` and tracks which observables are being accessed.\r\n   * The tracking information is stored on the `derivation` object and the derivation is registered\r\n   * as observer of any of the accessed observables.\r\n   */\n\n\n  function trackDerivedFunction(derivation, f, context) {\n    var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps\n    // array will be trimmed by bindDependencies\n\n    changeDependenciesStateTo0(derivation);\n    derivation.newObserving_ = new Array(derivation.observing_.length + 100);\n    derivation.unboundDepsCount_ = 0;\n    derivation.runId_ = ++globalState.runId;\n    var prevTracking = globalState.trackingDerivation;\n    globalState.trackingDerivation = derivation;\n    globalState.inBatch++;\n    var result;\n\n    if (globalState.disableErrorBoundaries === true) {\n      result = f.call(context);\n    } else {\n      try {\n        result = f.call(context);\n      } catch (e) {\n        result = new CaughtException(e);\n      }\n    }\n\n    globalState.inBatch--;\n    globalState.trackingDerivation = prevTracking;\n    bindDependencies(derivation);\n    warnAboutDerivationWithoutDependencies(derivation);\n    allowStateReadsEnd(prevAllowStateReads);\n    return result;\n  }\n\n  function warnAboutDerivationWithoutDependencies(derivation) {\n    if (false) {}\n    if (derivation.observing_.length !== 0) return;\n\n    if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {\n      console.warn(\"[mobx] Derivation \" + derivation.name_ + \" is created/updated without reading any observable value\");\n    }\n  }\n  /**\r\n   * diffs newObserving with observing.\r\n   * update observing to be newObserving with unique observables\r\n   * notify observers that become observed/unobserved\r\n   */\n\n\n  function bindDependencies(derivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    var prevObserving = derivation.observing_;\n    var observing = derivation.observing_ = derivation.newObserving_;\n    var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n\n    var i0 = 0,\n        l = derivation.unboundDepsCount_;\n\n    for (var i = 0; i < l; i++) {\n      var dep = observing[i];\n\n      if (dep.diffValue_ === 0) {\n        dep.diffValue_ = 1;\n        if (i0 !== i) observing[i0] = dep;\n        i0++;\n      } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n      // not hitting the condition\n\n\n      if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n        lowestNewObservingDerivationState = dep.dependenciesState_;\n      }\n    }\n\n    observing.length = i0;\n    derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n\n    l = prevObserving.length;\n\n    while (l--) {\n      var _dep = prevObserving[l];\n\n      if (_dep.diffValue_ === 0) {\n        removeObserver(_dep, derivation);\n      }\n\n      _dep.diffValue_ = 0;\n    } // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n\n\n    while (i0--) {\n      var _dep2 = observing[i0];\n\n      if (_dep2.diffValue_ === 1) {\n        _dep2.diffValue_ = 0;\n        addObserver(_dep2, derivation);\n      }\n    } // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n\n\n    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n      derivation.dependenciesState_ = lowestNewObservingDerivationState;\n      derivation.onBecomeStale_();\n    }\n  }\n\n  function clearObserving(derivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    var obs = derivation.observing_;\n    derivation.observing_ = [];\n    var i = obs.length;\n\n    while (i--) {\n      removeObserver(obs[i], derivation);\n    }\n\n    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n  }\n\n  function untracked(action) {\n    var prev = untrackedStart();\n\n    try {\n      return action();\n    } finally {\n      untrackedEnd(prev);\n    }\n  }\n\n  function untrackedStart() {\n    var prev = globalState.trackingDerivation;\n    globalState.trackingDerivation = null;\n    return prev;\n  }\n\n  function untrackedEnd(prev) {\n    globalState.trackingDerivation = prev;\n  }\n\n  function allowStateReadsStart(allowStateReads) {\n    var prev = globalState.allowStateReads;\n    globalState.allowStateReads = allowStateReads;\n    return prev;\n  }\n\n  function allowStateReadsEnd(prev) {\n    globalState.allowStateReads = prev;\n  }\n  /**\r\n   * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n   *\r\n   */\n\n\n  function changeDependenciesStateTo0(derivation) {\n    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;\n    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n    var obs = derivation.observing_;\n    var i = obs.length;\n\n    while (i--) {\n      obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    }\n  }\n\n  var MobXGlobals = function MobXGlobals() {\n    this.version = 6;\n    this.UNCHANGED = {};\n    this.trackingDerivation = null;\n    this.trackingContext = null;\n    this.runId = 0;\n    this.mobxGuid = 0;\n    this.inBatch = 0;\n    this.pendingUnobservations = [];\n    this.pendingReactions = [];\n    this.isRunningReactions = false;\n    this.allowStateChanges = false;\n    this.allowStateReads = true;\n    this.enforceActions = true;\n    this.spyListeners = [];\n    this.globalReactionErrorHandlers = [];\n    this.computedRequiresReaction = false;\n    this.reactionRequiresObservable = false;\n    this.observableRequiresReaction = false;\n    this.disableErrorBoundaries = false;\n    this.suppressReactionErrors = false;\n    this.useProxies = true;\n    this.verifyProxies = false;\n    this.safeDescriptors = true;\n  };\n\n  var canMergeGlobalState = true;\n\n  var globalState = /*#__PURE__*/function () {\n    var global = /*#__PURE__*/getGlobal();\n    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;\n    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;\n\n    if (!canMergeGlobalState) {\n      setTimeout(function () {\n        {\n          die(35);\n        }\n      }, 1);\n      return new MobXGlobals();\n    } else if (global.__mobxGlobals) {\n      global.__mobxInstanceCount += 1;\n      if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible\n\n      return global.__mobxGlobals;\n    } else {\n      global.__mobxInstanceCount = 1;\n      return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n    }\n  }();\n  //     const list = observable.observers\n  //     const map = observable.observersIndexes\n  //     const l = list.length\n  //     for (let i = 0; i < l; i++) {\n  //         const id = list[i].__mapid\n  //         if (i) {\n  //             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n  //         } else {\n  //             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n  //         }\n  //     }\n  //     invariant(\n  //         list.length === 0 || Object.keys(map).length === list.length - 1,\n  //         \"INTERNAL ERROR there is no junk in map\"\n  //     )\n  // }\n\n\n  function addObserver(observable, node) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n    observable.observers_.add(node);\n    if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n  }\n\n  function removeObserver(observable, node) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    observable.observers_[\"delete\"](node);\n\n    if (observable.observers_.size === 0) {\n      // deleting last observer\n      queueForUnobservation(observable);\n    } // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n\n  }\n\n  function queueForUnobservation(observable) {\n    if (observable.isPendingUnobservation_ === false) {\n      // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n      observable.isPendingUnobservation_ = true;\n      globalState.pendingUnobservations.push(observable);\n    }\n  }\n  /**\r\n   * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n   * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n   * Avoids unnecessary recalculations.\r\n   */\n\n\n  function startBatch() {\n    globalState.inBatch++;\n  }\n\n  function endBatch() {\n    if (--globalState.inBatch === 0) {\n      runReactions(); // the batch is actually about to finish, all unobserving should happen here.\n\n      var list = globalState.pendingUnobservations;\n\n      for (var i = 0; i < list.length; i++) {\n        var observable = list[i];\n        observable.isPendingUnobservation_ = false;\n\n        if (observable.observers_.size === 0) {\n          if (observable.isBeingObserved_) {\n            // if this observable had reactive observers, trigger the hooks\n            observable.isBeingObserved_ = false;\n            observable.onBUO();\n          }\n\n          if (observable instanceof ComputedValue) {\n            // computed values are automatically teared down when the last observer leaves\n            // this process happens recursively, this computed might be the last observabe of another, etc..\n            observable.suspend_();\n          }\n        }\n      }\n\n      globalState.pendingUnobservations = [];\n    }\n  }\n\n  function reportObserved(observable) {\n    checkIfStateReadsAreAllowed(observable);\n    var derivation = globalState.trackingDerivation;\n\n    if (derivation !== null) {\n      /**\r\n       * Simple optimization, give each derivation run an unique id (runId)\r\n       * Check if last time this observable was accessed the same runId is used\r\n       * if this is the case, the relation is already known\r\n       */\n      if (derivation.runId_ !== observable.lastAccessedBy_) {\n        observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n\n        derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n\n        if (!observable.isBeingObserved_ && globalState.trackingContext) {\n          observable.isBeingObserved_ = true;\n          observable.onBO();\n        }\n      }\n\n      return true;\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n      queueForUnobservation(observable);\n    }\n\n    return false;\n  } // function invariantLOS(observable: IObservable, msg: string) {\n  //     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n  //     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n  //     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n  //     throw new Error(\n  //         \"lowestObserverState is wrong for \" +\n  //             msg +\n  //             \" because \" +\n  //             min +\n  //             \" < \" +\n  //             observable.lowestObserverState\n  //     )\n  // }\n\n  /**\r\n   * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n   * It will propagate changes to observers from previous run\r\n   * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n   * Hopefully self reruning autoruns aren't a feature people should depend on\r\n   * Also most basic use cases should be ok\r\n   */\n  // Called by Atom when its value changes\n\n\n  function propagateChanged(observable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n    observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...\n\n    observable.observers_.forEach(function (d) {\n      if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n        if ( true && d.isTracing_ !== TraceMode.NONE) {\n          logTraceInfo(d, observable);\n        }\n\n        d.onBecomeStale_();\n      }\n\n      d.dependenciesState_ = IDerivationState_.STALE_;\n    }); // invariantLOS(observable, \"changed end\");\n  } // Called by ComputedValue when it recalculate and its value changed\n\n\n  function propagateChangeConfirmed(observable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n    observable.lowestObserverState_ = IDerivationState_.STALE_;\n    observable.observers_.forEach(function (d) {\n      if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n        d.dependenciesState_ = IDerivationState_.STALE_;\n\n        if ( true && d.isTracing_ !== TraceMode.NONE) {\n          logTraceInfo(d, observable);\n        }\n      } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n      ) {\n          observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n        }\n    }); // invariantLOS(observable, \"confirmed end\");\n  } // Used by computed when its dependency changed, but we don't wan't to immediately recompute.\n\n\n  function propagateMaybeChanged(observable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;\n    observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n    observable.observers_.forEach(function (d) {\n      if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n        d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n        d.onBecomeStale_();\n      }\n    }); // invariantLOS(observable, \"maybe end\");\n  }\n\n  function logTraceInfo(derivation, observable) {\n    console.log(\"[mobx.trace] '\" + derivation.name_ + \"' is invalidated due to a change in: '\" + observable.name_ + \"'\");\n\n    if (derivation.isTracing_ === TraceMode.BREAK) {\n      var lines = [];\n      printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore\n\n      new Function(\"debugger;\\n/*\\nTracing '\" + derivation.name_ + \"'\\n\\nYou are entering this break point because derivation '\" + derivation.name_ + \"' is being traced and '\" + observable.name_ + \"' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n\" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\") + \"\\n\\nThe dependencies for this derivation are:\\n\\n\" + lines.join(\"\\n\") + \"\\n*/\\n    \")();\n    }\n  }\n\n  function printDepTree(tree, lines, depth) {\n    if (lines.length >= 1000) {\n      lines.push(\"(and many more)\");\n      return;\n    }\n\n    lines.push(\"\" + new Array(depth).join(\"\\t\") + tree.name); // MWE: not the fastest, but the easiest way :)\n\n    if (tree.dependencies) tree.dependencies.forEach(function (child) {\n      return printDepTree(child, lines, depth + 1);\n    });\n  }\n\n  var Reaction = /*#__PURE__*/function () {\n    // nodes we are looking at. Our value depends on these nodes\n    function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n      if (name_ === void 0) {\n        name_ =  true ? \"Reaction@\" + getNextId() : 0;\n      }\n\n      if (requiresObservable_ === void 0) {\n        requiresObservable_ = false;\n      }\n\n      this.name_ = void 0;\n      this.onInvalidate_ = void 0;\n      this.errorHandler_ = void 0;\n      this.requiresObservable_ = void 0;\n      this.observing_ = [];\n      this.newObserving_ = [];\n      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n      this.diffValue_ = 0;\n      this.runId_ = 0;\n      this.unboundDepsCount_ = 0;\n      this.isDisposed_ = false;\n      this.isScheduled_ = false;\n      this.isTrackPending_ = false;\n      this.isRunning_ = false;\n      this.isTracing_ = TraceMode.NONE;\n      this.name_ = name_;\n      this.onInvalidate_ = onInvalidate_;\n      this.errorHandler_ = errorHandler_;\n      this.requiresObservable_ = requiresObservable_;\n    }\n\n    var _proto = Reaction.prototype;\n\n    _proto.onBecomeStale_ = function onBecomeStale_() {\n      this.schedule_();\n    };\n\n    _proto.schedule_ = function schedule_() {\n      if (!this.isScheduled_) {\n        this.isScheduled_ = true;\n        globalState.pendingReactions.push(this);\n        runReactions();\n      }\n    };\n\n    _proto.isScheduled = function isScheduled() {\n      return this.isScheduled_;\n    }\n    /**\r\n     * internal, use schedule() if you intend to kick off a reaction\r\n     */\n    ;\n\n    _proto.runReaction_ = function runReaction_() {\n      if (!this.isDisposed_) {\n        startBatch();\n        this.isScheduled_ = false;\n        var prev = globalState.trackingContext;\n        globalState.trackingContext = this;\n\n        if (shouldCompute(this)) {\n          this.isTrackPending_ = true;\n\n          try {\n            this.onInvalidate_();\n\n            if ( true && this.isTrackPending_ && isSpyEnabled()) {\n              // onInvalidate didn't trigger track right away..\n              spyReport({\n                name: this.name_,\n                type: \"scheduled-reaction\"\n              });\n            }\n          } catch (e) {\n            this.reportExceptionInDerivation_(e);\n          }\n        }\n\n        globalState.trackingContext = prev;\n        endBatch();\n      }\n    };\n\n    _proto.track = function track(fn) {\n      if (this.isDisposed_) {\n        return; // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n      }\n\n      startBatch();\n      var notify = isSpyEnabled();\n      var startTime;\n\n      if ( true && notify) {\n        startTime = Date.now();\n        spyReportStart({\n          name: this.name_,\n          type: \"reaction\"\n        });\n      }\n\n      this.isRunning_ = true;\n      var prevReaction = globalState.trackingContext; // reactions could create reactions...\n\n      globalState.trackingContext = this;\n      var result = trackDerivedFunction(this, fn, undefined);\n      globalState.trackingContext = prevReaction;\n      this.isRunning_ = false;\n      this.isTrackPending_ = false;\n\n      if (this.isDisposed_) {\n        // disposed during last run. Clean up everything that was bound after the dispose call.\n        clearObserving(this);\n      }\n\n      if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);\n\n      if ( true && notify) {\n        spyReportEnd({\n          time: Date.now() - startTime\n        });\n      }\n\n      endBatch();\n    };\n\n    _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n      var _this = this;\n\n      if (this.errorHandler_) {\n        this.errorHandler_(error, this);\n        return;\n      }\n\n      if (globalState.disableErrorBoundaries) throw error;\n      var message =  true ? \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this + \"'\" : 0;\n\n      if (!globalState.suppressReactionErrors) {\n        console.error(message, error);\n        /** If debugging brought you here, please, read the above message :-). Tnx! */\n      } else if (true) console.warn(\"[mobx] (error in reaction '\" + this.name_ + \"' suppressed, fix error of causing action below)\"); // prettier-ignore\n\n\n      if ( true && isSpyEnabled()) {\n        spyReport({\n          type: \"error\",\n          name: this.name_,\n          message: message,\n          error: \"\" + error\n        });\n      }\n\n      globalState.globalReactionErrorHandlers.forEach(function (f) {\n        return f(error, _this);\n      });\n    };\n\n    _proto.dispose = function dispose() {\n      if (!this.isDisposed_) {\n        this.isDisposed_ = true;\n\n        if (!this.isRunning_) {\n          // if disposed while running, clean up later. Maybe not optimal, but rare case\n          startBatch();\n          clearObserving(this);\n          endBatch();\n        }\n      }\n    };\n\n    _proto.getDisposer_ = function getDisposer_() {\n      var r = this.dispose.bind(this);\n      r[$mobx] = this;\n      return r;\n    };\n\n    _proto.toString = function toString() {\n      return \"Reaction[\" + this.name_ + \"]\";\n    };\n\n    _proto.trace = function trace$1(enterBreakPoint) {\n      if (enterBreakPoint === void 0) {\n        enterBreakPoint = false;\n      }\n\n      trace(this, enterBreakPoint);\n    };\n\n    return Reaction;\n  }();\n  /**\r\n   * Magic number alert!\r\n   * Defines within how many times a reaction is allowed to re-trigger itself\r\n   * until it is assumed that this is gonna be a never ending loop...\r\n   */\n\n\n  var MAX_REACTION_ITERATIONS = 100;\n\n  var reactionScheduler = function reactionScheduler(f) {\n    return f();\n  };\n\n  function runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions) return;\n    reactionScheduler(runReactionsHelper);\n  }\n\n  function runReactionsHelper() {\n    globalState.isRunningReactions = true;\n    var allReactions = globalState.pendingReactions;\n    var iterations = 0; // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n\n    while (allReactions.length > 0) {\n      if (++iterations === MAX_REACTION_ITERATIONS) {\n        console.error( true ? \"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\" + (\" Probably there is a cycle in the reactive function: \" + allReactions[0]) : 0);\n        allReactions.splice(0); // clear reactions\n      }\n\n      var remainingReactions = allReactions.splice(0);\n\n      for (var i = 0, l = remainingReactions.length; i < l; i++) {\n        remainingReactions[i].runReaction_();\n      }\n    }\n\n    globalState.isRunningReactions = false;\n  }\n\n  var isReaction = /*#__PURE__*/createInstanceofPredicate(\"Reaction\", Reaction);\n\n  function isSpyEnabled() {\n    return  true && !!globalState.spyListeners.length;\n  }\n\n  function spyReport(event) {\n    if (false) {} // dead code elimination can do the rest\n\n    if (!globalState.spyListeners.length) return;\n    var listeners = globalState.spyListeners;\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i](event);\n    }\n  }\n\n  function spyReportStart(event) {\n    if (false) {}\n\n    var change = _extends({}, event, {\n      spyReportStart: true\n    });\n\n    spyReport(change);\n  }\n\n  var END_EVENT = {\n    type: \"report-end\",\n    spyReportEnd: true\n  };\n\n  function spyReportEnd(change) {\n    if (false) {}\n    if (change) spyReport(_extends({}, change, {\n      type: \"report-end\",\n      spyReportEnd: true\n    }));else spyReport(END_EVENT);\n  }\n\n  function spy(listener) {\n    if (false) {} else {\n      globalState.spyListeners.push(listener);\n      return once(function () {\n        globalState.spyListeners = globalState.spyListeners.filter(function (l) {\n          return l !== listener;\n        });\n      });\n    }\n  }\n\n  var ACTION = \"action\";\n  var ACTION_BOUND = \"action.bound\";\n  var AUTOACTION = \"autoAction\";\n  var AUTOACTION_BOUND = \"autoAction.bound\";\n  var DEFAULT_ACTION_NAME = \"<unnamed action>\";\n  var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\n  var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n    bound: true\n  });\n  var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n    autoAction: true\n  });\n  var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n    autoAction: true,\n    bound: true\n  });\n\n  function createActionFactory(autoAction) {\n    var res = function action(arg1, arg2) {\n      // action(fn() {})\n      if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action(\"name\", fn() {})\n\n      if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action\n\n      if (isStringish(arg2)) {\n        return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n      } // action(\"name\") & @action(\"name\")\n\n\n      if (isStringish(arg1)) {\n        return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n          name: arg1,\n          autoAction: autoAction\n        }));\n      }\n\n      if (true) die(\"Invalid arguments for `action`\");\n    };\n\n    return res;\n  }\n\n  var action = /*#__PURE__*/createActionFactory(false);\n  Object.assign(action, actionAnnotation);\n  var autoAction = /*#__PURE__*/createActionFactory(true);\n  Object.assign(autoAction, autoActionAnnotation);\n  action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\n  autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\n\n  function isAction(thing) {\n    return isFunction(thing) && thing.isMobxAction === true;\n  }\n  /**\r\n   * Creates a named reactive view and keeps it alive, so that the view is always\r\n   * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n   * @param view The reactive view\r\n   * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n   */\n\n\n  function autorun(view, opts) {\n    var _opts$name, _opts;\n\n    if (opts === void 0) {\n      opts = EMPTY_OBJECT;\n    }\n\n    if (true) {\n      if (!isFunction(view)) die(\"Autorun expects a function as first argument\");\n      if (isAction(view)) die(\"Autorun does not accept actions since actions are untrackable\");\n    }\n\n    var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || \"Autorun@\" + getNextId() : 0;\n    var runSync = !opts.scheduler && !opts.delay;\n    var reaction;\n\n    if (runSync) {\n      // normal autorun\n      reaction = new Reaction(name, function () {\n        this.track(reactionRunner);\n      }, opts.onError, opts.requiresObservable);\n    } else {\n      var scheduler = createSchedulerFromOptions(opts); // debounced autorun\n\n      var isScheduled = false;\n      reaction = new Reaction(name, function () {\n        if (!isScheduled) {\n          isScheduled = true;\n          scheduler(function () {\n            isScheduled = false;\n            if (!reaction.isDisposed_) reaction.track(reactionRunner);\n          });\n        }\n      }, opts.onError, opts.requiresObservable);\n    }\n\n    function reactionRunner() {\n      view(reaction);\n    }\n\n    reaction.schedule_();\n    return reaction.getDisposer_();\n  }\n\n  var run = function run(f) {\n    return f();\n  };\n\n  function createSchedulerFromOptions(opts) {\n    return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n      return setTimeout(f, opts.delay);\n    } : run;\n  }\n\n  var ON_BECOME_OBSERVED = \"onBO\";\n  var ON_BECOME_UNOBSERVED = \"onBUO\";\n\n  function onBecomeObserved(thing, arg2, arg3) {\n    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n  }\n\n  function onBecomeUnobserved(thing, arg2, arg3) {\n    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n  }\n\n  function interceptHook(hook, thing, arg2, arg3) {\n    var atom = typeof arg3 === \"function\" ? getAtom(thing, arg2) : getAtom(thing);\n    var cb = isFunction(arg3) ? arg3 : arg2;\n    var listenersKey = hook + \"L\";\n\n    if (atom[listenersKey]) {\n      atom[listenersKey].add(cb);\n    } else {\n      atom[listenersKey] = new Set([cb]);\n    }\n\n    return function () {\n      var hookListeners = atom[listenersKey];\n\n      if (hookListeners) {\n        hookListeners[\"delete\"](cb);\n\n        if (hookListeners.size === 0) {\n          delete atom[listenersKey];\n        }\n      }\n    };\n  }\n\n  function extendObservable(target, properties, annotations, options) {\n    if (true) {\n      if (arguments.length > 4) die(\"'extendObservable' expected 2-4 arguments\");\n      if (typeof target !== \"object\") die(\"'extendObservable' expects an object as first argument\");\n      if (isObservableMap(target)) die(\"'extendObservable' should not be used on maps, use map.merge instead\");\n      if (!isPlainObject(properties)) die(\"'extendObservabe' only accepts plain objects as second argument\");\n      if (isObservable(properties) || isObservable(annotations)) die(\"Extending an object with another observable (object) is not supported\");\n    } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n\n\n    var descriptors = getOwnPropertyDescriptors(properties);\n    var adm = asObservableObject(target, options)[$mobx];\n    startBatch();\n\n    try {\n      ownKeys(descriptors).forEach(function (key) {\n        adm.extend_(key, descriptors[key], // must pass \"undefined\" for { key: undefined }\n        !annotations ? true : key in annotations ? annotations[key] : true);\n      });\n    } finally {\n      endBatch();\n    }\n\n    return target;\n  }\n\n  function getDependencyTree(thing, property) {\n    return nodeToDependencyTree(getAtom(thing, property));\n  }\n\n  function nodeToDependencyTree(node) {\n    var result = {\n      name: node.name_\n    };\n    if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n    return result;\n  }\n\n  function unique(list) {\n    return Array.from(new Set(list));\n  }\n\n  var generatorId = 0;\n\n  function FlowCancellationError() {\n    this.message = \"FLOW_CANCELLED\";\n  }\n\n  FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\n\n  var flowAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow\");\n  var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow.bound\", {\n    bound: true\n  });\n  var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n    // @flow\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, flowAnnotation);\n    } // flow(fn)\n\n\n    if ( true && arguments.length !== 1) die(\"Flow expects single argument with generator function\");\n    var generator = arg1;\n    var name = generator.name || \"<unnamed flow>\"; // Implementation based on https://github.com/tj/co/blob/master/index.js\n\n    var res = function res() {\n      var ctx = this;\n      var args = arguments;\n      var runId = ++generatorId;\n      var gen = action(name + \" - runid: \" + runId + \" - init\", generator).apply(ctx, args);\n      var rejector;\n      var pendingPromise = undefined;\n      var promise = new Promise(function (resolve, reject) {\n        var stepId = 0;\n        rejector = reject;\n\n        function onFulfilled(res) {\n          pendingPromise = undefined;\n          var ret;\n\n          try {\n            ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen.next).call(gen, res);\n          } catch (e) {\n            return reject(e);\n          }\n\n          next(ret);\n        }\n\n        function onRejected(err) {\n          pendingPromise = undefined;\n          var ret;\n\n          try {\n            ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen[\"throw\"]).call(gen, err);\n          } catch (e) {\n            return reject(e);\n          }\n\n          next(ret);\n        }\n\n        function next(ret) {\n          if (isFunction(ret == null ? void 0 : ret.then)) {\n            // an async iterator\n            ret.then(next, reject);\n            return;\n          }\n\n          if (ret.done) return resolve(ret.value);\n          pendingPromise = Promise.resolve(ret.value);\n          return pendingPromise.then(onFulfilled, onRejected);\n        }\n\n        onFulfilled(undefined); // kick off the process\n      });\n      promise.cancel = action(name + \" - runid: \" + runId + \" - cancel\", function () {\n        try {\n          if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..\n\n          var _res = gen[\"return\"](undefined); // eat anything that promise would do, it's cancelled!\n\n\n          var yieldedPromise = Promise.resolve(_res.value);\n          yieldedPromise.then(noop, noop);\n          cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n          // reject our original promise\n\n          rejector(new FlowCancellationError());\n        } catch (e) {\n          rejector(e); // there could be a throwing finally block\n        }\n      });\n      return promise;\n    };\n\n    res.isMobXFlow = true;\n    return res;\n  }, flowAnnotation);\n  flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\n\n  function cancelPromise(promise) {\n    if (isFunction(promise.cancel)) promise.cancel();\n  }\n\n  function isFlow(fn) {\n    return (fn == null ? void 0 : fn.isMobXFlow) === true;\n  }\n\n  function _isObservable(value, property) {\n    if (!value) return false;\n\n    if (property !== undefined) {\n      if ( true && (isObservableMap(value) || isObservableArray(value))) return die(\"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\");\n\n      if (isObservableObject(value)) {\n        return value[$mobx].values_.has(property);\n      }\n\n      return false;\n    } // For first check, see #701\n\n\n    return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n  }\n\n  function isObservable(value) {\n    if ( true && arguments.length !== 1) die(\"isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property\");\n    return _isObservable(value);\n  }\n\n  function trace() {\n    if (false) {}\n    var enterBreakPoint = false;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[args.length - 1] === \"boolean\") enterBreakPoint = args.pop();\n    var derivation = getAtomFromArgs(args);\n\n    if (!derivation) {\n      return die(\"'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly\");\n    }\n\n    if (derivation.isTracing_ === TraceMode.NONE) {\n      console.log(\"[mobx.trace] '\" + derivation.name_ + \"' tracing enabled\");\n    }\n\n    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n  }\n\n  function getAtomFromArgs(args) {\n    switch (args.length) {\n      case 0:\n        return globalState.trackingDerivation;\n\n      case 1:\n        return getAtom(args[0]);\n\n      case 2:\n        return getAtom(args[0], args[1]);\n    }\n  }\n  /**\r\n   * During a transaction no views are updated until the end of the transaction.\r\n   * The transaction will be run synchronously nonetheless.\r\n   *\r\n   * @param action a function that updates some reactive state\r\n   * @returns any value that was returned by the 'action' parameter.\r\n   */\n\n\n  function transaction(action, thisArg) {\n    if (thisArg === void 0) {\n      thisArg = undefined;\n    }\n\n    startBatch();\n\n    try {\n      return action.apply(thisArg);\n    } finally {\n      endBatch();\n    }\n  }\n\n  function getAdm(target) {\n    return target[$mobx];\n  } // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n  // and skip either the internal values map, or the base object with its property descriptors!\n\n\n  var objectProxyTraps = {\n    has: function has(target, name) {\n      if ( true && globalState.trackingDerivation) warnAboutProxyRequirement(\"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\");\n      return getAdm(target).has_(name);\n    },\n    get: function get(target, name) {\n      return getAdm(target).get_(name);\n    },\n    set: function set(target, name, value) {\n      var _getAdm$set_;\n\n      if (!isStringish(name)) return false;\n\n      if ( true && !getAdm(target).values_.has(name)) {\n        warnAboutProxyRequirement(\"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\");\n      } // null (intercepted) -> true (success)\n\n\n      return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n    },\n    deleteProperty: function deleteProperty(target, name) {\n      var _getAdm$delete_;\n\n      if (true) {\n        warnAboutProxyRequirement(\"delete properties from an observable object. Use 'remove' from 'mobx' instead.\");\n      }\n\n      if (!isStringish(name)) return false; // null (intercepted) -> true (success)\n\n      return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n    },\n    defineProperty: function defineProperty(target, name, descriptor) {\n      var _getAdm$definePropert;\n\n      if (true) {\n        warnAboutProxyRequirement(\"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\");\n      } // null (intercepted) -> true (success)\n\n\n      return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n    },\n    ownKeys: function ownKeys(target) {\n      if ( true && globalState.trackingDerivation) warnAboutProxyRequirement(\"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\");\n      return getAdm(target).ownKeys_();\n    },\n    preventExtensions: function preventExtensions(target) {\n      die(13);\n    }\n  };\n\n  function asDynamicObservableObject(target, options) {\n    var _target$$mobx, _target$$mobx$proxy_;\n\n    assertProxies();\n    target = asObservableObject(target, options);\n    return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n  }\n\n  function hasInterceptors(interceptable) {\n    return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n  }\n\n  function registerInterceptor(interceptable, handler) {\n    var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n    interceptors.push(handler);\n    return once(function () {\n      var idx = interceptors.indexOf(handler);\n      if (idx !== -1) interceptors.splice(idx, 1);\n    });\n  }\n\n  function interceptChange(interceptable, change) {\n    var prevU = untrackedStart();\n\n    try {\n      // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n      var interceptors = [].concat(interceptable.interceptors_ || []);\n\n      for (var i = 0, l = interceptors.length; i < l; i++) {\n        change = interceptors[i](change);\n        if (change && !change.type) die(14);\n        if (!change) break;\n      }\n\n      return change;\n    } finally {\n      untrackedEnd(prevU);\n    }\n  }\n\n  function hasListeners(listenable) {\n    return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n  }\n\n  function registerListener(listenable, handler) {\n    var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n    listeners.push(handler);\n    return once(function () {\n      var idx = listeners.indexOf(handler);\n      if (idx !== -1) listeners.splice(idx, 1);\n    });\n  }\n\n  function notifyListeners(listenable, change) {\n    var prevU = untrackedStart();\n    var listeners = listenable.changeListeners_;\n    if (!listeners) return;\n    listeners = listeners.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i](change);\n    }\n\n    untrackedEnd(prevU);\n  }\n\n  var SPLICE = \"splice\";\n  var UPDATE = \"update\";\n  var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\n\n  var arrayTraps = {\n    get: function get(target, name) {\n      var adm = target[$mobx];\n      if (name === $mobx) return adm;\n      if (name === \"length\") return adm.getArrayLength_();\n\n      if (typeof name === \"string\" && !isNaN(name)) {\n        return adm.get_(parseInt(name));\n      }\n\n      if (hasProp(arrayExtensions, name)) {\n        return arrayExtensions[name];\n      }\n\n      return target[name];\n    },\n    set: function set(target, name, value) {\n      var adm = target[$mobx];\n\n      if (name === \"length\") {\n        adm.setArrayLength_(value);\n      }\n\n      if (typeof name === \"symbol\" || isNaN(name)) {\n        target[name] = value;\n      } else {\n        // numeric string\n        adm.set_(parseInt(name), value);\n      }\n\n      return true;\n    },\n    preventExtensions: function preventExtensions() {\n      die(15);\n    }\n  };\n\n  var ObservableArrayAdministration = /*#__PURE__*/function () {\n    // this is the prop that gets proxied, so can't replace it!\n    function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n      if (name === void 0) {\n        name =  true ? \"ObservableArray@\" + getNextId() : 0;\n      }\n\n      this.owned_ = void 0;\n      this.legacyMode_ = void 0;\n      this.atom_ = void 0;\n      this.values_ = [];\n      this.interceptors_ = void 0;\n      this.changeListeners_ = void 0;\n      this.enhancer_ = void 0;\n      this.dehancer = void 0;\n      this.proxy_ = void 0;\n      this.lastKnownLength_ = 0;\n      this.owned_ = owned_;\n      this.legacyMode_ = legacyMode_;\n      this.atom_ = new Atom(name);\n\n      this.enhancer_ = function (newV, oldV) {\n        return enhancer(newV, oldV,  true ? name + \"[..]\" : 0);\n      };\n    }\n\n    var _proto = ObservableArrayAdministration.prototype;\n\n    _proto.dehanceValue_ = function dehanceValue_(value) {\n      if (this.dehancer !== undefined) return this.dehancer(value);\n      return value;\n    };\n\n    _proto.dehanceValues_ = function dehanceValues_(values) {\n      if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);\n      return values;\n    };\n\n    _proto.intercept_ = function intercept_(handler) {\n      return registerInterceptor(this, handler);\n    };\n\n    _proto.observe_ = function observe_(listener, fireImmediately) {\n      if (fireImmediately === void 0) {\n        fireImmediately = false;\n      }\n\n      if (fireImmediately) {\n        listener({\n          observableKind: \"array\",\n          object: this.proxy_,\n          debugObjectName: this.atom_.name_,\n          type: \"splice\",\n          index: 0,\n          added: this.values_.slice(),\n          addedCount: this.values_.length,\n          removed: [],\n          removedCount: 0\n        });\n      }\n\n      return registerListener(this, listener);\n    };\n\n    _proto.getArrayLength_ = function getArrayLength_() {\n      this.atom_.reportObserved();\n      return this.values_.length;\n    };\n\n    _proto.setArrayLength_ = function setArrayLength_(newLength) {\n      if (typeof newLength !== \"number\" || newLength < 0) die(\"Out of range: \" + newLength);\n      var currentLength = this.values_.length;\n      if (newLength === currentLength) return;else if (newLength > currentLength) {\n        var newItems = new Array(newLength - currentLength);\n\n        for (var i = 0; i < newLength - currentLength; i++) {\n          newItems[i] = undefined;\n        } // No Array.fill everywhere...\n\n\n        this.spliceWithArray_(currentLength, 0, newItems);\n      } else this.spliceWithArray_(newLength, currentLength - newLength);\n    };\n\n    _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n      if (oldLength !== this.lastKnownLength_) die(16);\n      this.lastKnownLength_ += delta;\n      if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);\n    };\n\n    _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n      var _this = this;\n\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var length = this.values_.length;\n      if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);\n      if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n      if (newItems === undefined) newItems = EMPTY_ARRAY;\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_,\n          type: SPLICE,\n          index: index,\n          removedCount: deleteCount,\n          added: newItems\n        });\n        if (!change) return EMPTY_ARRAY;\n        deleteCount = change.removedCount;\n        newItems = change.added;\n      }\n\n      newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n        return _this.enhancer_(v, undefined);\n      });\n\n      if (this.legacyMode_ || \"development\" !== \"production\") {\n        var lengthDelta = newItems.length - deleteCount;\n        this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified\n      }\n\n      var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n      if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);\n      return this.dehanceValues_(res);\n    };\n\n    _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n      if (newItems.length < MAX_SPLICE_SIZE) {\n        var _this$values_;\n\n        return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n      } else {\n        var res = this.values_.slice(index, index + deleteCount);\n        var oldItems = this.values_.slice(index + deleteCount);\n        this.values_.length = index + newItems.length - deleteCount;\n\n        for (var i = 0; i < newItems.length; i++) {\n          this.values_[index + i] = newItems[i];\n        }\n\n        for (var _i = 0; _i < oldItems.length; _i++) {\n          this.values_[index + newItems.length + _i] = oldItems[_i];\n        }\n\n        return res;\n      }\n    };\n\n    _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n      var notifySpy = !this.owned_ && isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: \"array\",\n        object: this.proxy_,\n        type: UPDATE,\n        debugObjectName: this.atom_.name_,\n        index: index,\n        newValue: newValue,\n        oldValue: oldValue\n      } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n      // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n\n      if ( true && notifySpy) spyReportStart(change);\n      this.atom_.reportChanged();\n      if (notify) notifyListeners(this, change);\n      if ( true && notifySpy) spyReportEnd();\n    };\n\n    _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n      var notifySpy = !this.owned_ && isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: \"array\",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: SPLICE,\n        index: index,\n        removed: removed,\n        added: added,\n        removedCount: removed.length,\n        addedCount: added.length\n      } : null;\n      if ( true && notifySpy) spyReportStart(change);\n      this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n\n      if (notify) notifyListeners(this, change);\n      if ( true && notifySpy) spyReportEnd();\n    };\n\n    _proto.get_ = function get_(index) {\n      if (index < this.values_.length) {\n        this.atom_.reportObserved();\n        return this.dehanceValue_(this.values_[index]);\n      }\n\n      console.warn( true ? \"[mobx] Out of bounds read: \" + index : 0);\n    };\n\n    _proto.set_ = function set_(index, newValue) {\n      var values = this.values_;\n\n      if (index < values.length) {\n        // update at index in range\n        checkIfStateModificationsAreAllowed(this.atom_);\n        var oldValue = values[index];\n\n        if (hasInterceptors(this)) {\n          var change = interceptChange(this, {\n            type: UPDATE,\n            object: this.proxy_,\n            index: index,\n            newValue: newValue\n          });\n          if (!change) return;\n          newValue = change.newValue;\n        }\n\n        newValue = this.enhancer_(newValue, oldValue);\n        var changed = newValue !== oldValue;\n\n        if (changed) {\n          values[index] = newValue;\n          this.notifyArrayChildUpdate_(index, newValue, oldValue);\n        }\n      } else if (index === values.length) {\n        // add a new item\n        this.spliceWithArray_(index, 0, [newValue]);\n      } else {\n        // out of bounds\n        die(17, index, values.length);\n      }\n    };\n\n    return ObservableArrayAdministration;\n  }();\n\n  function createObservableArray(initialValues, enhancer, name, owned) {\n    if (name === void 0) {\n      name =  true ? \"ObservableArray@\" + getNextId() : 0;\n    }\n\n    if (owned === void 0) {\n      owned = false;\n    }\n\n    assertProxies();\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n    addHiddenFinalProp(adm.values_, $mobx, adm);\n    var proxy = new Proxy(adm.values_, arrayTraps);\n    adm.proxy_ = proxy;\n\n    if (initialValues && initialValues.length) {\n      var prev = allowStateChangesStart(true);\n      adm.spliceWithArray_(0, 0, initialValues);\n      allowStateChangesEnd(prev);\n    }\n\n    return proxy;\n  } // eslint-disable-next-line\n\n\n  var arrayExtensions = {\n    clear: function clear() {\n      return this.splice(0);\n    },\n    replace: function replace(newItems) {\n      var adm = this[$mobx];\n      return adm.spliceWithArray_(0, adm.values_.length, newItems);\n    },\n    // Used by JSON.stringify\n    toJSON: function toJSON() {\n      return this.slice();\n    },\n\n    /*\r\n     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\r\n     * since these functions alter the inner structure of the array, the have side effects.\r\n     * Because the have side effects, they should not be used in computed function,\r\n     * and for that reason the do not call dependencyState.notifyObserved\r\n     */\n    splice: function splice(index, deleteCount) {\n      for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        newItems[_key - 2] = arguments[_key];\n      }\n\n      var adm = this[$mobx];\n\n      switch (arguments.length) {\n        case 0:\n          return [];\n\n        case 1:\n          return adm.spliceWithArray_(index);\n\n        case 2:\n          return adm.spliceWithArray_(index, deleteCount);\n      }\n\n      return adm.spliceWithArray_(index, deleteCount, newItems);\n    },\n    spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n      return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n    },\n    push: function push() {\n      var adm = this[$mobx];\n\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      adm.spliceWithArray_(adm.values_.length, 0, items);\n      return adm.values_.length;\n    },\n    pop: function pop() {\n      return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n    },\n    shift: function shift() {\n      return this.splice(0, 1)[0];\n    },\n    unshift: function unshift() {\n      var adm = this[$mobx];\n\n      for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        items[_key3] = arguments[_key3];\n      }\n\n      adm.spliceWithArray_(0, 0, items);\n      return adm.values_.length;\n    },\n    reverse: function reverse() {\n      // reverse by default mutates in place before returning the result\n      // which makes it both a 'derivation' and a 'mutation'.\n      if (globalState.trackingDerivation) {\n        die(37, \"reverse\");\n      }\n\n      this.replace(this.slice().reverse());\n      return this;\n    },\n    sort: function sort() {\n      // sort by default mutates in place before returning the result\n      // which goes against all good practices. Let's not change the array in place!\n      if (globalState.trackingDerivation) {\n        die(37, \"sort\");\n      }\n\n      var copy = this.slice();\n      copy.sort.apply(copy, arguments);\n      this.replace(copy);\n      return this;\n    },\n    remove: function remove(value) {\n      var adm = this[$mobx];\n      var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n\n      if (idx > -1) {\n        this.splice(idx, 1);\n        return true;\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Wrap function from prototype\r\n   * Without this, everything works as well, but this works\r\n   * faster as everything works on unproxied values\r\n   */\n\n  addArrayExtension(\"concat\", simpleFunc);\n  addArrayExtension(\"flat\", simpleFunc);\n  addArrayExtension(\"includes\", simpleFunc);\n  addArrayExtension(\"indexOf\", simpleFunc);\n  addArrayExtension(\"join\", simpleFunc);\n  addArrayExtension(\"lastIndexOf\", simpleFunc);\n  addArrayExtension(\"slice\", simpleFunc);\n  addArrayExtension(\"toString\", simpleFunc);\n  addArrayExtension(\"toLocaleString\", simpleFunc); // map\n\n  addArrayExtension(\"every\", mapLikeFunc);\n  addArrayExtension(\"filter\", mapLikeFunc);\n  addArrayExtension(\"find\", mapLikeFunc);\n  addArrayExtension(\"findIndex\", mapLikeFunc);\n  addArrayExtension(\"flatMap\", mapLikeFunc);\n  addArrayExtension(\"forEach\", mapLikeFunc);\n  addArrayExtension(\"map\", mapLikeFunc);\n  addArrayExtension(\"some\", mapLikeFunc); // reduce\n\n  addArrayExtension(\"reduce\", reduceLikeFunc);\n  addArrayExtension(\"reduceRight\", reduceLikeFunc);\n\n  function addArrayExtension(funcName, funcFactory) {\n    if (typeof Array.prototype[funcName] === \"function\") {\n      arrayExtensions[funcName] = funcFactory(funcName);\n    }\n  } // Report and delegate to dehanced array\n\n\n  function simpleFunc(funcName) {\n    return function () {\n      var adm = this[$mobx];\n      adm.atom_.reportObserved();\n      var dehancedValues = adm.dehanceValues_(adm.values_);\n      return dehancedValues[funcName].apply(dehancedValues, arguments);\n    };\n  } // Make sure callbacks recieve correct array arg #2326\n\n\n  function mapLikeFunc(funcName) {\n    return function (callback, thisArg) {\n      var _this2 = this;\n\n      var adm = this[$mobx];\n      adm.atom_.reportObserved();\n      var dehancedValues = adm.dehanceValues_(adm.values_);\n      return dehancedValues[funcName](function (element, index) {\n        return callback.call(thisArg, element, index, _this2);\n      });\n    };\n  } // Make sure callbacks recieve correct array arg #2326\n\n\n  function reduceLikeFunc(funcName) {\n    return function () {\n      var _this3 = this;\n\n      var adm = this[$mobx];\n      adm.atom_.reportObserved();\n      var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length\n\n      var callback = arguments[0];\n\n      arguments[0] = function (accumulator, currentValue, index) {\n        return callback(accumulator, currentValue, index, _this3);\n      };\n\n      return dehancedValues[funcName].apply(dehancedValues, arguments);\n    };\n  }\n\n  var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\n\n  function isObservableArray(thing) {\n    return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n  }\n\n  var _Symbol$iterator$1, _Symbol$toStringTag;\n\n  var ObservableMapMarker = {};\n  var ADD = \"add\";\n  var DELETE = \"delete\"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n  // But: https://github.com/mobxjs/mobx/issues/1556\n\n  _Symbol$iterator$1 = Symbol.iterator;\n  _Symbol$toStringTag = Symbol.toStringTag;\n\n  var ObservableMap = /*#__PURE__*/function () {\n    // hasMap, not hashMap >-).\n    function ObservableMap(initialData, enhancer_, name_) {\n      if (enhancer_ === void 0) {\n        enhancer_ = deepEnhancer;\n      }\n\n      if (name_ === void 0) {\n        name_ =  true ? \"ObservableMap@\" + getNextId() : 0;\n      }\n\n      this.enhancer_ = void 0;\n      this.name_ = void 0;\n      this[$mobx] = ObservableMapMarker;\n      this.data_ = void 0;\n      this.hasMap_ = void 0;\n      this.keysAtom_ = void 0;\n      this.interceptors_ = void 0;\n      this.changeListeners_ = void 0;\n      this.dehancer = void 0;\n      this.enhancer_ = enhancer_;\n      this.name_ = name_;\n\n      if (!isFunction(Map)) {\n        die(18);\n      }\n\n      this.keysAtom_ = createAtom( true ? this.name_ + \".keys()\" : 0);\n      this.data_ = new Map();\n      this.hasMap_ = new Map();\n      this.merge(initialData);\n    }\n\n    var _proto = ObservableMap.prototype;\n\n    _proto.has_ = function has_(key) {\n      return this.data_.has(key);\n    };\n\n    _proto.has = function has(key) {\n      var _this = this;\n\n      if (!globalState.trackingDerivation) return this.has_(key);\n      var entry = this.hasMap_.get(key);\n\n      if (!entry) {\n        var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n        this.hasMap_.set(key, newEntry);\n        onBecomeUnobserved(newEntry, function () {\n          return _this.hasMap_[\"delete\"](key);\n        });\n      }\n\n      return entry.get();\n    };\n\n    _proto.set = function set(key, value) {\n      var hasKey = this.has_(key);\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: hasKey ? UPDATE : ADD,\n          object: this,\n          newValue: value,\n          name: key\n        });\n        if (!change) return this;\n        value = change.newValue;\n      }\n\n      if (hasKey) {\n        this.updateValue_(key, value);\n      } else {\n        this.addValue_(key, value);\n      }\n\n      return this;\n    };\n\n    _proto[\"delete\"] = function _delete(key) {\n      var _this2 = this;\n\n      checkIfStateModificationsAreAllowed(this.keysAtom_);\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: DELETE,\n          object: this,\n          name: key\n        });\n        if (!change) return false;\n      }\n\n      if (this.has_(key)) {\n        var notifySpy = isSpyEnabled();\n        var notify = hasListeners(this);\n\n        var _change = notify || notifySpy ? {\n          observableKind: \"map\",\n          debugObjectName: this.name_,\n          type: DELETE,\n          object: this,\n          oldValue: this.data_.get(key).value_,\n          name: key\n        } : null;\n\n        if ( true && notifySpy) spyReportStart(_change);\n        transaction(function () {\n          _this2.keysAtom_.reportChanged();\n\n          _this2.updateHasMapEntry_(key, false);\n\n          var observable = _this2.data_.get(key);\n\n          observable.setNewValue_(undefined);\n\n          _this2.data_[\"delete\"](key);\n        });\n        if (notify) notifyListeners(this, _change);\n        if ( true && notifySpy) spyReportEnd();\n        return true;\n      }\n\n      return false;\n    };\n\n    _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {\n      var entry = this.hasMap_.get(key);\n\n      if (entry) {\n        entry.setNewValue_(value);\n      }\n    };\n\n    _proto.updateValue_ = function updateValue_(key, newValue) {\n      var observable = this.data_.get(key);\n      newValue = observable.prepareNewValue_(newValue);\n\n      if (newValue !== globalState.UNCHANGED) {\n        var notifySpy = isSpyEnabled();\n        var notify = hasListeners(this);\n        var change = notify || notifySpy ? {\n          observableKind: \"map\",\n          debugObjectName: this.name_,\n          type: UPDATE,\n          object: this,\n          oldValue: observable.value_,\n          name: key,\n          newValue: newValue\n        } : null;\n        if ( true && notifySpy) spyReportStart(change);\n        observable.setNewValue_(newValue);\n        if (notify) notifyListeners(this, change);\n        if ( true && notifySpy) spyReportEnd();\n      }\n    };\n\n    _proto.addValue_ = function addValue_(key, newValue) {\n      var _this3 = this;\n\n      checkIfStateModificationsAreAllowed(this.keysAtom_);\n      transaction(function () {\n        var observable = new ObservableValue(newValue, _this3.enhancer_,  true ? _this3.name_ + \".\" + stringifyKey(key) : 0, false);\n\n        _this3.data_.set(key, observable);\n\n        newValue = observable.value_; // value might have been changed\n\n        _this3.updateHasMapEntry_(key, true);\n\n        _this3.keysAtom_.reportChanged();\n      });\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: \"map\",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        name: key,\n        newValue: newValue\n      } : null;\n      if ( true && notifySpy) spyReportStart(change);\n      if (notify) notifyListeners(this, change);\n      if ( true && notifySpy) spyReportEnd();\n    };\n\n    _proto.get = function get(key) {\n      if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());\n      return this.dehanceValue_(undefined);\n    };\n\n    _proto.dehanceValue_ = function dehanceValue_(value) {\n      if (this.dehancer !== undefined) {\n        return this.dehancer(value);\n      }\n\n      return value;\n    };\n\n    _proto.keys = function keys() {\n      this.keysAtom_.reportObserved();\n      return this.data_.keys();\n    };\n\n    _proto.values = function values() {\n      var self = this;\n      var keys = this.keys();\n      return makeIterable({\n        next: function next() {\n          var _keys$next = keys.next(),\n              done = _keys$next.done,\n              value = _keys$next.value;\n\n          return {\n            done: done,\n            value: done ? undefined : self.get(value)\n          };\n        }\n      });\n    };\n\n    _proto.entries = function entries() {\n      var self = this;\n      var keys = this.keys();\n      return makeIterable({\n        next: function next() {\n          var _keys$next2 = keys.next(),\n              done = _keys$next2.done,\n              value = _keys$next2.value;\n\n          return {\n            done: done,\n            value: done ? undefined : [value, self.get(value)]\n          };\n        }\n      });\n    };\n\n    _proto[_Symbol$iterator$1] = function () {\n      return this.entries();\n    };\n\n    _proto.forEach = function forEach(callback, thisArg) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n        var _step$value = _step.value,\n            key = _step$value[0],\n            value = _step$value[1];\n        callback.call(thisArg, value, key, this);\n      }\n    }\n    /** Merge another object into this object, returns this. */\n    ;\n\n    _proto.merge = function merge(other) {\n      var _this4 = this;\n\n      if (isObservableMap(other)) {\n        other = new Map(other);\n      }\n\n      transaction(function () {\n        if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {\n          return _this4.set(key, other[key]);\n        });else if (Array.isArray(other)) other.forEach(function (_ref) {\n          var key = _ref[0],\n              value = _ref[1];\n          return _this4.set(key, value);\n        });else if (isES6Map(other)) {\n          if (other.constructor !== Map) die(19, other);\n          other.forEach(function (value, key) {\n            return _this4.set(key, value);\n          });\n        } else if (other !== null && other !== undefined) die(20, other);\n      });\n      return this;\n    };\n\n    _proto.clear = function clear() {\n      var _this5 = this;\n\n      transaction(function () {\n        untracked(function () {\n          for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {\n            var key = _step2.value;\n\n            _this5[\"delete\"](key);\n          }\n        });\n      });\n    };\n\n    _proto.replace = function replace(values) {\n      var _this6 = this; // Implementation requirements:\n      // - respect ordering of replacement map\n      // - allow interceptors to run and potentially prevent individual operations\n      // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n      // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n      // - note that result map may differ from replacement map due to the interceptors\n\n\n      transaction(function () {\n        // Convert to map so we can do quick key lookups\n        var replacementMap = convertToMap(values);\n        var orderedData = new Map(); // Used for optimization\n\n        var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map\n        // if the key deletion is prevented by interceptor\n        // add entry at the beginning of the result map\n\n        for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n          var key = _step3.value; // Concurrently iterating/deleting keys\n          // iterator should handle this correctly\n\n          if (!replacementMap.has(key)) {\n            var deleted = _this6[\"delete\"](key); // Was the key removed?\n\n\n            if (deleted) {\n              // _keysAtom.reportChanged() was already called\n              keysReportChangedCalled = true;\n            } else {\n              // Delete prevented by interceptor\n              var value = _this6.data_.get(key);\n\n              orderedData.set(key, value);\n            }\n          }\n        } // Merge entries\n\n\n        for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n          var _step4$value = _step4.value,\n              _key = _step4$value[0],\n              _value = _step4$value[1]; // We will want to know whether a new key is added\n\n          var keyExisted = _this6.data_.has(_key); // Add or update value\n\n\n          _this6.set(_key, _value); // The addition could have been prevent by interceptor\n\n\n          if (_this6.data_.has(_key)) {\n            // The update could have been prevented by interceptor\n            // and also we want to preserve existing values\n            // so use value from _data map (instead of replacement map)\n            var _value2 = _this6.data_.get(_key);\n\n            orderedData.set(_key, _value2); // Was a new key added?\n\n            if (!keyExisted) {\n              // _keysAtom.reportChanged() was already called\n              keysReportChangedCalled = true;\n            }\n          }\n        } // Check for possible key order change\n\n\n        if (!keysReportChangedCalled) {\n          if (_this6.data_.size !== orderedData.size) {\n            // If size differs, keys are definitely modified\n            _this6.keysAtom_.reportChanged();\n          } else {\n            var iter1 = _this6.data_.keys();\n\n            var iter2 = orderedData.keys();\n            var next1 = iter1.next();\n            var next2 = iter2.next();\n\n            while (!next1.done) {\n              if (next1.value !== next2.value) {\n                _this6.keysAtom_.reportChanged();\n\n                break;\n              }\n\n              next1 = iter1.next();\n              next2 = iter2.next();\n            }\n          }\n        } // Use correctly ordered map\n\n\n        _this6.data_ = orderedData;\n      });\n      return this;\n    };\n\n    _proto.toString = function toString() {\n      return \"[object ObservableMap]\";\n    };\n\n    _proto.toJSON = function toJSON() {\n      return Array.from(this);\n    };\n    /**\r\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n     * for callback details\r\n     */\n\n\n    _proto.observe_ = function observe_(listener, fireImmediately) {\n      if ( true && fireImmediately === true) die(\"`observe` doesn't support fireImmediately=true in combination with maps.\");\n      return registerListener(this, listener);\n    };\n\n    _proto.intercept_ = function intercept_(handler) {\n      return registerInterceptor(this, handler);\n    };\n\n    _createClass(ObservableMap, [{\n      key: \"size\",\n      get: function get() {\n        this.keysAtom_.reportObserved();\n        return this.data_.size;\n      }\n    }, {\n      key: _Symbol$toStringTag,\n      get: function get() {\n        return \"Map\";\n      }\n    }]);\n\n    return ObservableMap;\n  }(); // eslint-disable-next-line\n\n\n  var isObservableMap = /*#__PURE__*/createInstanceofPredicate(\"ObservableMap\", ObservableMap);\n\n  function convertToMap(dataStructure) {\n    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n      return dataStructure;\n    } else if (Array.isArray(dataStructure)) {\n      return new Map(dataStructure);\n    } else if (isPlainObject(dataStructure)) {\n      var map = new Map();\n\n      for (var key in dataStructure) {\n        map.set(key, dataStructure[key]);\n      }\n\n      return map;\n    } else {\n      return die(21, dataStructure);\n    }\n  }\n\n  var _Symbol$iterator$1$1, _Symbol$toStringTag$1;\n\n  var ObservableSetMarker = {};\n  _Symbol$iterator$1$1 = Symbol.iterator;\n  _Symbol$toStringTag$1 = Symbol.toStringTag;\n\n  var ObservableSet = /*#__PURE__*/function () {\n    function ObservableSet(initialData, enhancer, name_) {\n      if (enhancer === void 0) {\n        enhancer = deepEnhancer;\n      }\n\n      if (name_ === void 0) {\n        name_ =  true ? \"ObservableSet@\" + getNextId() : 0;\n      }\n\n      this.name_ = void 0;\n      this[$mobx] = ObservableSetMarker;\n      this.data_ = new Set();\n      this.atom_ = void 0;\n      this.changeListeners_ = void 0;\n      this.interceptors_ = void 0;\n      this.dehancer = void 0;\n      this.enhancer_ = void 0;\n      this.name_ = name_;\n\n      if (!isFunction(Set)) {\n        die(22);\n      }\n\n      this.atom_ = createAtom(this.name_);\n\n      this.enhancer_ = function (newV, oldV) {\n        return enhancer(newV, oldV, name_);\n      };\n\n      if (initialData) {\n        this.replace(initialData);\n      }\n    }\n\n    var _proto = ObservableSet.prototype;\n\n    _proto.dehanceValue_ = function dehanceValue_(value) {\n      if (this.dehancer !== undefined) {\n        return this.dehancer(value);\n      }\n\n      return value;\n    };\n\n    _proto.clear = function clear() {\n      var _this = this;\n\n      transaction(function () {\n        untracked(function () {\n          for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {\n            var value = _step.value;\n\n            _this[\"delete\"](value);\n          }\n        });\n      });\n    };\n\n    _proto.forEach = function forEach(callbackFn, thisArg) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n        var value = _step2.value;\n        callbackFn.call(thisArg, value, value, this);\n      }\n    };\n\n    _proto.add = function add(value) {\n      var _this2 = this;\n\n      checkIfStateModificationsAreAllowed(this.atom_);\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: ADD,\n          object: this,\n          newValue: value\n        });\n        if (!change) return this; // ideally, value = change.value would be done here, so that values can be\n        // changed by interceptor. Same applies for other Set and Map api's.\n      }\n\n      if (!this.has(value)) {\n        transaction(function () {\n          _this2.data_.add(_this2.enhancer_(value, undefined));\n\n          _this2.atom_.reportChanged();\n        });\n        var notifySpy =  true && isSpyEnabled();\n        var notify = hasListeners(this);\n\n        var _change = notify || notifySpy ? {\n          observableKind: \"set\",\n          debugObjectName: this.name_,\n          type: ADD,\n          object: this,\n          newValue: value\n        } : null;\n\n        if (notifySpy && \"development\" !== \"production\") spyReportStart(_change);\n        if (notify) notifyListeners(this, _change);\n        if (notifySpy && \"development\" !== \"production\") spyReportEnd();\n      }\n\n      return this;\n    };\n\n    _proto[\"delete\"] = function _delete(value) {\n      var _this3 = this;\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: DELETE,\n          object: this,\n          oldValue: value\n        });\n        if (!change) return false;\n      }\n\n      if (this.has(value)) {\n        var notifySpy =  true && isSpyEnabled();\n        var notify = hasListeners(this);\n\n        var _change2 = notify || notifySpy ? {\n          observableKind: \"set\",\n          debugObjectName: this.name_,\n          type: DELETE,\n          object: this,\n          oldValue: value\n        } : null;\n\n        if (notifySpy && \"development\" !== \"production\") spyReportStart(_change2);\n        transaction(function () {\n          _this3.atom_.reportChanged();\n\n          _this3.data_[\"delete\"](value);\n        });\n        if (notify) notifyListeners(this, _change2);\n        if (notifySpy && \"development\" !== \"production\") spyReportEnd();\n        return true;\n      }\n\n      return false;\n    };\n\n    _proto.has = function has(value) {\n      this.atom_.reportObserved();\n      return this.data_.has(this.dehanceValue_(value));\n    };\n\n    _proto.entries = function entries() {\n      var nextIndex = 0;\n      var keys = Array.from(this.keys());\n      var values = Array.from(this.values());\n      return makeIterable({\n        next: function next() {\n          var index = nextIndex;\n          nextIndex += 1;\n          return index < values.length ? {\n            value: [keys[index], values[index]],\n            done: false\n          } : {\n            done: true\n          };\n        }\n      });\n    };\n\n    _proto.keys = function keys() {\n      return this.values();\n    };\n\n    _proto.values = function values() {\n      this.atom_.reportObserved();\n      var self = this;\n      var nextIndex = 0;\n      var observableValues = Array.from(this.data_.values());\n      return makeIterable({\n        next: function next() {\n          return nextIndex < observableValues.length ? {\n            value: self.dehanceValue_(observableValues[nextIndex++]),\n            done: false\n          } : {\n            done: true\n          };\n        }\n      });\n    };\n\n    _proto.replace = function replace(other) {\n      var _this4 = this;\n\n      if (isObservableSet(other)) {\n        other = new Set(other);\n      }\n\n      transaction(function () {\n        if (Array.isArray(other)) {\n          _this4.clear();\n\n          other.forEach(function (value) {\n            return _this4.add(value);\n          });\n        } else if (isES6Set(other)) {\n          _this4.clear();\n\n          other.forEach(function (value) {\n            return _this4.add(value);\n          });\n        } else if (other !== null && other !== undefined) {\n          die(\"Cannot initialize set from \" + other);\n        }\n      });\n      return this;\n    };\n\n    _proto.observe_ = function observe_(listener, fireImmediately) {\n      // ... 'fireImmediately' could also be true?\n      if ( true && fireImmediately === true) die(\"`observe` doesn't support fireImmediately=true in combination with sets.\");\n      return registerListener(this, listener);\n    };\n\n    _proto.intercept_ = function intercept_(handler) {\n      return registerInterceptor(this, handler);\n    };\n\n    _proto.toJSON = function toJSON() {\n      return Array.from(this);\n    };\n\n    _proto.toString = function toString() {\n      return \"[object ObservableSet]\";\n    };\n\n    _proto[_Symbol$iterator$1$1] = function () {\n      return this.values();\n    };\n\n    _createClass(ObservableSet, [{\n      key: \"size\",\n      get: function get() {\n        this.atom_.reportObserved();\n        return this.data_.size;\n      }\n    }, {\n      key: _Symbol$toStringTag$1,\n      get: function get() {\n        return \"Set\";\n      }\n    }]);\n\n    return ObservableSet;\n  }(); // eslint-disable-next-line\n\n\n  var isObservableSet = /*#__PURE__*/createInstanceofPredicate(\"ObservableSet\", ObservableSet);\n  var descriptorCache = /*#__PURE__*/Object.create(null);\n  var REMOVE = \"remove\";\n\n  var ObservableObjectAdministration = /*#__PURE__*/function () {\n    function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided\n    defaultAnnotation_) {\n      if (values_ === void 0) {\n        values_ = new Map();\n      }\n\n      if (defaultAnnotation_ === void 0) {\n        defaultAnnotation_ = autoAnnotation;\n      }\n\n      this.target_ = void 0;\n      this.values_ = void 0;\n      this.name_ = void 0;\n      this.defaultAnnotation_ = void 0;\n      this.keysAtom_ = void 0;\n      this.changeListeners_ = void 0;\n      this.interceptors_ = void 0;\n      this.proxy_ = void 0;\n      this.isPlainObject_ = void 0;\n      this.appliedAnnotations_ = void 0;\n      this.pendingKeys_ = void 0;\n      this.target_ = target_;\n      this.values_ = values_;\n      this.name_ = name_;\n      this.defaultAnnotation_ = defaultAnnotation_;\n      this.keysAtom_ = new Atom( true ? this.name_ + \".keys\" : 0); // Optimization: we use this frequently\n\n      this.isPlainObject_ = isPlainObject(this.target_);\n\n      if ( true && !isAnnotation(this.defaultAnnotation_)) {\n        die(\"defaultAnnotation must be valid annotation\");\n      }\n\n      if (true) {\n        // Prepare structure for tracking which fields were already annotated\n        this.appliedAnnotations_ = {};\n      }\n    }\n\n    var _proto = ObservableObjectAdministration.prototype;\n\n    _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n      return this.values_.get(key).get();\n    };\n\n    _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n      var observable = this.values_.get(key);\n\n      if (observable instanceof ComputedValue) {\n        observable.set(newValue);\n        return true;\n      } // intercept\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_ || this.target_,\n          name: key,\n          newValue: newValue\n        });\n        if (!change) return null;\n        newValue = change.newValue;\n      }\n\n      newValue = observable.prepareNewValue_(newValue); // notify spy & observers\n\n      if (newValue !== globalState.UNCHANGED) {\n        var notify = hasListeners(this);\n        var notifySpy =  true && isSpyEnabled();\n\n        var _change = notify || notifySpy ? {\n          type: UPDATE,\n          observableKind: \"object\",\n          debugObjectName: this.name_,\n          object: this.proxy_ || this.target_,\n          oldValue: observable.value_,\n          name: key,\n          newValue: newValue\n        } : null;\n\n        if ( true && notifySpy) spyReportStart(_change);\n        observable.setNewValue_(newValue);\n        if (notify) notifyListeners(this, _change);\n        if ( true && notifySpy) spyReportEnd();\n      }\n\n      return true;\n    };\n\n    _proto.get_ = function get_(key) {\n      if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n        // Key doesn't exist yet, subscribe for it in case it's added later\n        this.has_(key);\n      }\n\n      return this.target_[key];\n    }\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {any} value\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\n    ;\n\n    _proto.set_ = function set_(key, value, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      } // Don't use .has(key) - we care about own\n\n\n      if (hasProp(this.target_, key)) {\n        // Existing prop\n        if (this.values_.has(key)) {\n          // Observable (can be intercepted)\n          return this.setObservablePropValue_(key, value);\n        } else if (proxyTrap) {\n          // Non-observable - proxy\n          return Reflect.set(this.target_, key, value);\n        } else {\n          // Non-observable\n          this.target_[key] = value;\n          return true;\n        }\n      } else {\n        // New prop\n        return this.extend_(key, {\n          value: value,\n          enumerable: true,\n          writable: true,\n          configurable: true\n        }, this.defaultAnnotation_, proxyTrap);\n      }\n    } // Trap for \"in\"\n    ;\n\n    _proto.has_ = function has_(key) {\n      if (!globalState.trackingDerivation) {\n        // Skip key subscription outside derivation\n        return key in this.target_;\n      }\n\n      this.pendingKeys_ || (this.pendingKeys_ = new Map());\n      var entry = this.pendingKeys_.get(key);\n\n      if (!entry) {\n        entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n        this.pendingKeys_.set(key, entry);\n      }\n\n      return entry.get();\n    }\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\r\n     */\n    ;\n\n    _proto.make_ = function make_(key, annotation) {\n      if (annotation === true) {\n        annotation = this.defaultAnnotation_;\n      }\n\n      if (annotation === false) {\n        return;\n      }\n\n      assertAnnotable(this, annotation, key);\n\n      if (!(key in this.target_)) {\n        var _this$target_$storedA; // Throw on missing key, except for decorators:\n        // Decorator annotations are collected from whole prototype chain.\n        // When called from super() some props may not exist yet.\n        // However we don't have to worry about missing prop,\n        // because the decorator must have been applied to something.\n\n\n        if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) == null ? void 0 : _this$target_$storedA[key]) {\n          return; // will be annotated by subclass constructor\n        } else {\n          die(1, annotation.annotationType_, this.name_ + \".\" + key.toString());\n        }\n      }\n\n      var source = this.target_;\n\n      while (source && source !== objectPrototype) {\n        var descriptor = getDescriptor(source, key);\n\n        if (descriptor) {\n          var outcome = annotation.make_(this, key, descriptor, source);\n          if (outcome === 0\n          /* Cancel */\n          ) return;\n          if (outcome === 1\n          /* Break */\n          ) break;\n        }\n\n        source = Object.getPrototypeOf(source);\n      }\n\n      recordAnnotationApplied(this, annotation, key);\n    }\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\n    ;\n\n    _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      }\n\n      if (annotation === true) {\n        annotation = this.defaultAnnotation_;\n      }\n\n      if (annotation === false) {\n        return this.defineProperty_(key, descriptor, proxyTrap);\n      }\n\n      assertAnnotable(this, annotation, key);\n      var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n\n      if (outcome) {\n        recordAnnotationApplied(this, annotation, key);\n      }\n\n      return outcome;\n    }\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\n    ;\n\n    _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      }\n\n      try {\n        startBatch(); // Delete\n\n        var deleteOutcome = this.delete_(key);\n\n        if (!deleteOutcome) {\n          // Failure or intercepted\n          return deleteOutcome;\n        } // ADD interceptor\n\n\n        if (hasInterceptors(this)) {\n          var change = interceptChange(this, {\n            object: this.proxy_ || this.target_,\n            name: key,\n            type: ADD,\n            newValue: descriptor.value\n          });\n          if (!change) return null;\n          var newValue = change.newValue;\n\n          if (descriptor.value !== newValue) {\n            descriptor = _extends({}, descriptor, {\n              value: newValue\n            });\n          }\n        } // Define\n\n\n        if (proxyTrap) {\n          if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n            return false;\n          }\n        } else {\n          defineProperty(this.target_, key, descriptor);\n        } // Notify\n\n\n        this.notifyPropertyAddition_(key, descriptor.value);\n      } finally {\n        endBatch();\n      }\n\n      return true;\n    } // If original descriptor becomes relevant, move this to annotation directly\n    ;\n\n    _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      }\n\n      try {\n        startBatch(); // Delete\n\n        var deleteOutcome = this.delete_(key);\n\n        if (!deleteOutcome) {\n          // Failure or intercepted\n          return deleteOutcome;\n        } // ADD interceptor\n\n\n        if (hasInterceptors(this)) {\n          var change = interceptChange(this, {\n            object: this.proxy_ || this.target_,\n            name: key,\n            type: ADD,\n            newValue: value\n          });\n          if (!change) return null;\n          value = change.newValue;\n        }\n\n        var cachedDescriptor = getCachedObservablePropDescriptor(key);\n        var descriptor = {\n          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n          enumerable: true,\n          get: cachedDescriptor.get,\n          set: cachedDescriptor.set\n        }; // Define\n\n        if (proxyTrap) {\n          if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n            return false;\n          }\n        } else {\n          defineProperty(this.target_, key, descriptor);\n        }\n\n        var observable = new ObservableValue(value, enhancer,  true ? this.name_ + \".\" + key.toString() : 0, false);\n        this.values_.set(key, observable); // Notify (value possibly changed by ObservableValue)\n\n        this.notifyPropertyAddition_(key, observable.value_);\n      } finally {\n        endBatch();\n      }\n\n      return true;\n    } // If original descriptor becomes relevant, move this to annotation directly\n    ;\n\n    _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      }\n\n      try {\n        startBatch(); // Delete\n\n        var deleteOutcome = this.delete_(key);\n\n        if (!deleteOutcome) {\n          // Failure or intercepted\n          return deleteOutcome;\n        } // ADD interceptor\n\n\n        if (hasInterceptors(this)) {\n          var change = interceptChange(this, {\n            object: this.proxy_ || this.target_,\n            name: key,\n            type: ADD,\n            newValue: undefined\n          });\n          if (!change) return null;\n        }\n\n        options.name || (options.name =  true ? this.name_ + \".\" + key.toString() : 0);\n        options.context = this.proxy_ || this.target_;\n        var cachedDescriptor = getCachedObservablePropDescriptor(key);\n        var descriptor = {\n          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n          enumerable: false,\n          get: cachedDescriptor.get,\n          set: cachedDescriptor.set\n        }; // Define\n\n        if (proxyTrap) {\n          if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n            return false;\n          }\n        } else {\n          defineProperty(this.target_, key, descriptor);\n        }\n\n        this.values_.set(key, new ComputedValue(options)); // Notify\n\n        this.notifyPropertyAddition_(key, undefined);\n      } finally {\n        endBatch();\n      }\n\n      return true;\n    }\n    /**\r\n     * @param {PropertyKey} key\r\n     * @param {PropertyDescriptor} descriptor\r\n     * @param {boolean} proxyTrap whether it's called from proxy trap\r\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n     */\n    ;\n\n    _proto.delete_ = function delete_(key, proxyTrap) {\n      if (proxyTrap === void 0) {\n        proxyTrap = false;\n      } // No such prop\n\n\n      if (!hasProp(this.target_, key)) {\n        return true;\n      } // Intercept\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: REMOVE\n        }); // Cancelled\n\n        if (!change) return null;\n      } // Delete\n\n\n      try {\n        var _this$pendingKeys_, _this$pendingKeys_$ge;\n\n        startBatch();\n        var notify = hasListeners(this);\n        var notifySpy =  true && isSpyEnabled();\n        var observable = this.values_.get(key); // Value needed for spies/listeners\n\n        var value = undefined; // Optimization: don't pull the value unless we will need it\n\n        if (!observable && (notify || notifySpy)) {\n          var _getDescriptor;\n\n          value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n        } // delete prop (do first, may fail)\n\n\n        if (proxyTrap) {\n          if (!Reflect.deleteProperty(this.target_, key)) {\n            return false;\n          }\n        } else {\n          delete this.target_[key];\n        } // Allow re-annotating this field\n\n\n        if (true) {\n          delete this.appliedAnnotations_[key];\n        } // Clear observable\n\n\n        if (observable) {\n          this.values_[\"delete\"](key); // for computed, value is undefined\n\n          if (observable instanceof ObservableValue) {\n            value = observable.value_;\n          } // Notify: autorun(() => obj[key]), see #1796\n\n\n          propagateChanged(observable);\n        } // Notify \"keys/entries/values\" observers\n\n\n        this.keysAtom_.reportChanged(); // Notify \"has\" observers\n        // \"in\" as it may still exist in proto\n\n        (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners\n\n        if (notify || notifySpy) {\n          var _change2 = {\n            type: REMOVE,\n            observableKind: \"object\",\n            object: this.proxy_ || this.target_,\n            debugObjectName: this.name_,\n            oldValue: value,\n            name: key\n          };\n          if ( true && notifySpy) spyReportStart(_change2);\n          if (notify) notifyListeners(this, _change2);\n          if ( true && notifySpy) spyReportEnd();\n        }\n      } finally {\n        endBatch();\n      }\n\n      return true;\n    }\n    /**\r\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n     * for callback details\r\n     */\n    ;\n\n    _proto.observe_ = function observe_(callback, fireImmediately) {\n      if ( true && fireImmediately === true) die(\"`observe` doesn't support the fire immediately property for observable objects.\");\n      return registerListener(this, callback);\n    };\n\n    _proto.intercept_ = function intercept_(handler) {\n      return registerInterceptor(this, handler);\n    };\n\n    _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n      var _this$pendingKeys_2, _this$pendingKeys_2$g;\n\n      var notify = hasListeners(this);\n      var notifySpy =  true && isSpyEnabled();\n\n      if (notify || notifySpy) {\n        var change = notify || notifySpy ? {\n          type: ADD,\n          observableKind: \"object\",\n          debugObjectName: this.name_,\n          object: this.proxy_ || this.target_,\n          name: key,\n          newValue: value\n        } : null;\n        if ( true && notifySpy) spyReportStart(change);\n        if (notify) notifyListeners(this, change);\n        if ( true && notifySpy) spyReportEnd();\n      }\n\n      (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify \"keys/entries/values\" observers\n\n      this.keysAtom_.reportChanged();\n    };\n\n    _proto.ownKeys_ = function ownKeys_() {\n      this.keysAtom_.reportObserved();\n      return ownKeys(this.target_);\n    };\n\n    _proto.keys_ = function keys_() {\n      // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n      // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n      // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n      // We choose to over-report in Object.keys(object), because:\n      // - typically it's used with simple data objects\n      // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n      this.keysAtom_.reportObserved();\n      return Object.keys(this.target_);\n    };\n\n    return ObservableObjectAdministration;\n  }();\n\n  function asObservableObject(target, options) {\n    var _options$name;\n\n    if ( true && options && isObservableObject(target)) {\n      die(\"Options can't be provided for already observable objects.\");\n    }\n\n    if (hasProp(target, $mobx)) {\n      if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n        die(\"Cannot convert '\" + getDebugName(target) + \"' into observable object:\" + \"\\nThe target is already observable of different type.\" + \"\\nExtending builtins is not supported.\");\n      }\n\n      return target;\n    }\n\n    if ( true && !Object.isExtensible(target)) die(\"Cannot make the designated object observable; it is not extensible\");\n    var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? \"ObservableObject\" : target.constructor.name) + \"@\" + getNextId() : 0;\n    var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n    addHiddenProp(target, $mobx, adm);\n    return target;\n  }\n\n  var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\n\n  function getCachedObservablePropDescriptor(key) {\n    return descriptorCache[key] || (descriptorCache[key] = {\n      get: function get() {\n        return this[$mobx].getObservablePropValue_(key);\n      },\n      set: function set(value) {\n        return this[$mobx].setObservablePropValue_(key, value);\n      }\n    });\n  }\n\n  function isObservableObject(thing) {\n    if (isObject(thing)) {\n      return isObservableObjectAdministration(thing[$mobx]);\n    }\n\n    return false;\n  }\n\n  function recordAnnotationApplied(adm, annotation, key) {\n    var _adm$target_$storedAn;\n\n    if (true) {\n      adm.appliedAnnotations_[key] = annotation;\n    } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n\n\n    (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n  }\n\n  function assertAnnotable(adm, annotation, key) {\n    // Valid annotation\n    if ( true && !isAnnotation(annotation)) {\n      die(\"Cannot annotate '\" + adm.name_ + \".\" + key.toString() + \"': Invalid annotation.\");\n    }\n    /*\r\n    // Configurable, not sealed, not frozen\r\n    // Possibly not needed, just a little better error then the one thrown by engine.\r\n    // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\r\n    if (__DEV__) {\r\n        const configurable = getDescriptor(adm.target_, key)?.configurable\r\n        const frozen = Object.isFrozen(adm.target_)\r\n        const sealed = Object.isSealed(adm.target_)\r\n        if (!configurable || frozen || sealed) {\r\n            const fieldName = `${adm.name_}.${key.toString()}`\r\n            const requestedAnnotationType = annotation.annotationType_\r\n            let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\r\n            if (frozen) {\r\n                error += `\\nObject is frozen.`\r\n            }\r\n            if (sealed) {\r\n                error += `\\nObject is sealed.`\r\n            }\r\n            if (!configurable) {\r\n                error += `\\nproperty is not configurable.`\r\n                // Mention only if caused by us to avoid confusion\r\n                if (hasProp(adm.appliedAnnotations!, key)) {\r\n                    error += `\\nTo prevent accidental re-definition of a field by a subclass, `\r\n                    error += `all annotated fields of non-plain objects (classes) are not configurable.`\r\n                }\r\n            }\r\n            die(error)\r\n        }\r\n    }\r\n    */\n    // Not annotated\n\n\n    if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {\n      var fieldName = adm.name_ + \".\" + key.toString();\n      var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;\n      var requestedAnnotationType = annotation.annotationType_;\n      die(\"Cannot apply '\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already annotated with '\" + currentAnnotationType + \"'.\") + \"\\nRe-annotating fields is not allowed.\" + \"\\nUse 'override' annotation for methods overriden by subclass.\");\n    }\n  }\n  /**\r\n   * This array buffer contains two lists of properties, so that all arrays\r\n   * can recycle their property definitions, which significantly improves performance of creating\r\n   * properties on the fly.\r\n   */\n\n\n  var OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array\n\n  var StubArray = function StubArray() {};\n\n  function inherit(ctor, proto) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(ctor.prototype, proto);\n    } else if (ctor.prototype.__proto__ !== undefined) {\n      ctor.prototype.__proto__ = proto;\n    } else {\n      ctor.prototype = proto;\n    }\n  }\n\n  inherit(StubArray, Array.prototype); // Weex proto freeze protection was here,\n  // but it is unclear why the hack is need as MobX never changed the prototype\n  // anyway, so removed it in V6\n\n  var LegacyObservableArray = /*#__PURE__*/function (_StubArray) {\n    _inheritsLoose(LegacyObservableArray, _StubArray);\n\n    function LegacyObservableArray(initialValues, enhancer, name, owned) {\n      var _this;\n\n      if (name === void 0) {\n        name =  true ? \"ObservableArray@\" + getNextId() : 0;\n      }\n\n      if (owned === void 0) {\n        owned = false;\n      }\n\n      _this = _StubArray.call(this) || this;\n      var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n      adm.proxy_ = _assertThisInitialized(_this);\n      addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n\n      if (initialValues && initialValues.length) {\n        var prev = allowStateChangesStart(true); // @ts-ignore\n\n        _this.spliceWithArray(0, 0, initialValues);\n\n        allowStateChangesEnd(prev);\n      }\n\n      return _this;\n    }\n\n    var _proto = LegacyObservableArray.prototype;\n\n    _proto.concat = function concat() {\n      this[$mobx].atom_.reportObserved();\n\n      for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n        arrays[_key] = arguments[_key];\n      }\n\n      return Array.prototype.concat.apply(this.slice(), //@ts-ignore\n      arrays.map(function (a) {\n        return isObservableArray(a) ? a.slice() : a;\n      }));\n    };\n\n    _proto[Symbol.iterator] = function () {\n      var self = this;\n      var nextIndex = 0;\n      return makeIterable({\n        next: function next() {\n          // @ts-ignore\n          return nextIndex < self.length ? {\n            value: self[nextIndex++],\n            done: false\n          } : {\n            done: true,\n            value: undefined\n          };\n        }\n      });\n    };\n\n    _createClass(LegacyObservableArray, [{\n      key: \"length\",\n      get: function get() {\n        return this[$mobx].getArrayLength_();\n      },\n      set: function set(newLength) {\n        this[$mobx].setArrayLength_(newLength);\n      }\n    }, {\n      key: Symbol.toStringTag,\n      get: function get() {\n        return \"Array\";\n      }\n    }]);\n\n    return LegacyObservableArray;\n  }(StubArray);\n\n  Object.entries(arrayExtensions).forEach(function (_ref) {\n    var prop = _ref[0],\n        fn = _ref[1];\n    if (prop !== \"concat\") addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n  });\n\n  function createArrayEntryDescriptor(index) {\n    return {\n      enumerable: false,\n      configurable: true,\n      get: function get() {\n        return this[$mobx].get_(index);\n      },\n      set: function set(value) {\n        this[$mobx].set_(index, value);\n      }\n    };\n  }\n\n  function createArrayBufferItem(index) {\n    defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index));\n  }\n\n  function reserveArrayBuffer(max) {\n    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n      for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n        createArrayBufferItem(index);\n      }\n\n      OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n    }\n  }\n\n  reserveArrayBuffer(1000);\n\n  function createLegacyArray(initialValues, enhancer, name) {\n    return new LegacyObservableArray(initialValues, enhancer, name);\n  }\n\n  function getAtom(thing, property) {\n    if (typeof thing === \"object\" && thing !== null) {\n      if (isObservableArray(thing)) {\n        if (property !== undefined) die(23);\n        return thing[$mobx].atom_;\n      }\n\n      if (isObservableSet(thing)) {\n        return thing[$mobx];\n      }\n\n      if (isObservableMap(thing)) {\n        if (property === undefined) return thing.keysAtom_;\n        var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n        if (!observable) die(25, property, getDebugName(thing));\n        return observable;\n      }\n\n      if (isObservableObject(thing)) {\n        if (!property) return die(26);\n\n        var _observable = thing[$mobx].values_.get(property);\n\n        if (!_observable) die(27, property, getDebugName(thing));\n        return _observable;\n      }\n\n      if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n        return thing;\n      }\n    } else if (isFunction(thing)) {\n      if (isReaction(thing[$mobx])) {\n        // disposer function\n        return thing[$mobx];\n      }\n    }\n\n    die(28);\n  }\n\n  function getAdministration(thing, property) {\n    if (!thing) die(29);\n    if (property !== undefined) return getAdministration(getAtom(thing, property));\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;\n    if (isObservableMap(thing) || isObservableSet(thing)) return thing;\n    if (thing[$mobx]) return thing[$mobx];\n    die(24, thing);\n  }\n\n  function getDebugName(thing, property) {\n    var named;\n\n    if (property !== undefined) {\n      named = getAtom(thing, property);\n    } else if (isAction(thing)) {\n      return thing.name;\n    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n      named = getAdministration(thing);\n    } else {\n      // valid for arrays as well\n      named = getAtom(thing);\n    }\n\n    return named.name_;\n  }\n\n  var toString = objectPrototype.toString;\n\n  function deepEqual(a, b, depth) {\n    if (depth === void 0) {\n      depth = -1;\n    }\n\n    return eq(a, b, depth);\n  } // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n  // Internal recursive comparison function for `isEqual`.\n\n\n  function eq(a, b, depth, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n    if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n    if (a !== a) return b !== b; // Exhaust primitive checks\n\n    var type = typeof a;\n    if (!isFunction(type) && type !== \"object\" && typeof b != \"object\") return false; // Compare `[[Class]]` names.\n\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case \"[object RegExp]\": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n      case \"[object String]\":\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return \"\" + a === \"\" + b;\n\n      case \"[object Number]\":\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n      case \"[object Date]\":\n      case \"[object Boolean]\":\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n\n      case \"[object Symbol]\":\n        return typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n\n      case \"[object Map]\":\n      case \"[object Set]\":\n        // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n        // Hide this extra level by increasing the depth.\n        if (depth >= 0) {\n          depth++;\n        }\n\n        break;\n    } // Unwrap any wrapped objects.\n\n\n    a = unwrap(a);\n    b = unwrap(b);\n    var areArrays = className === \"[object Array]\";\n\n    if (!areArrays) {\n      if (typeof a != \"object\" || typeof b != \"object\") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n\n      if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && \"constructor\" in a && \"constructor\" in b) {\n        return false;\n      }\n    }\n\n    if (depth === 0) {\n      return false;\n    } else if (depth < 0) {\n      depth = -1;\n    } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n\n\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    } // Add the first object to the stack of traversed objects.\n\n\n    aStack.push(a);\n    bStack.push(b); // Recursively compare objects and arrays.\n\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n      while (length--) {\n        if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = Object.keys(a);\n      var key;\n      length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n      if (Object.keys(b).length !== length) return false;\n\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;\n      }\n    } // Remove the first object from the stack of traversed objects.\n\n\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }\n\n  function unwrap(a) {\n    if (isObservableArray(a)) return a.slice();\n    if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());\n    if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());\n    return a;\n  }\n\n  function makeIterable(iterator) {\n    iterator[Symbol.iterator] = getSelf;\n    return iterator;\n  }\n\n  function getSelf() {\n    return this;\n  }\n\n  function isAnnotation(thing) {\n    return (// Can be function\n      thing instanceof Object && typeof thing.annotationType_ === \"string\" && isFunction(thing.make_) && isFunction(thing.extend_)\n    );\n  }\n  /**\r\n   * (c) Michel Weststrate 2015 - 2020\r\n   * MIT Licensed\r\n   *\r\n   * Welcome to the mobx sources! To get an global overview of how MobX internally works,\r\n   * this is a good place to start:\r\n   * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\r\n   *\r\n   * Source folders:\r\n   * ===============\r\n   *\r\n   * - api/     Most of the public static methods exposed by the module can be found here.\r\n   * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\r\n   * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\r\n   * - utils/   Utility stuff.\r\n   *\r\n   */\n\n\n  [\"Symbol\", \"Map\", \"Set\", \"Symbol\"].forEach(function (m) {\n    var g = getGlobal();\n\n    if (typeof g[m] === \"undefined\") {\n      die(\"MobX requires global '\" + m + \"' to be available or polyfilled\");\n    }\n  });\n\n  if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    // See: https://github.com/andykog/mobx-devtools/\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n      spy: spy,\n      extras: {\n        getDebugName: getDebugName\n      },\n      $mobx: $mobx\n    });\n  }\n\n  /*\n    this base class supplies methods for:\n      * initialization (post-instantiation)\n      * logging shortcuts\n      * signalling\n  */\n\n  var Entity = /*#__PURE__*/function () {\n    function Entity() {\n      _classCallCheck(this, Entity);\n\n      _defineProperty(this, \"_daeiName\", false);\n    }\n\n    _createClass$1(Entity, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Walax Entity';\n      }\n      /*\n        sets up logging shortcuts that automatically tag\n        logs with this objects ident \n      */\n\n    }, {\n      key: \"_daeiGetName\",\n      value: // override to set a dynamic log name that isn't toString()\n      function _daeiGetName() {\n        return this._daeiName ? this._daeiName : this.toString ? this.toString() : 'Walax Entity';\n      }\n    }, {\n      key: \"d\",\n      value: function d() {\n        var _w$log;\n\n        for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n          msg[_key] = arguments[_key];\n        }\n\n        w$1 === null || w$1 === void 0 ? void 0 : (_w$log = w$1.log) === null || _w$log === void 0 ? void 0 : _w$log.debug.apply(_w$log, [this._daeiGetName()].concat(msg));\n      }\n    }, {\n      key: \"e\",\n      value: function e() {\n        var _w$log2;\n\n        for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          msg[_key2] = arguments[_key2];\n        }\n\n        w$1 === null || w$1 === void 0 ? void 0 : (_w$log2 = w$1.log) === null || _w$log2 === void 0 ? void 0 : _w$log2.error.apply(_w$log2, [this._daeiGetName()].concat(msg));\n      }\n    }, {\n      key: \"a\",\n      value: function a(cond, msg) {\n        for (var _len3 = arguments.length, dbg = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          dbg[_key3 - 2] = arguments[_key3];\n        }\n\n        w$1.log.assert(cond, msg, dbg);\n      }\n    }, {\n      key: \"i\",\n      value: function i() {\n        var _w$log3;\n\n        for (var _len4 = arguments.length, msg = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          msg[_key4] = arguments[_key4];\n        }\n\n        w$1 === null || w$1 === void 0 ? void 0 : (_w$log3 = w$1.log) === null || _w$log3 === void 0 ? void 0 : _w$log3.info.apply(_w$log3, [this._daeiGetName()].concat(msg));\n      }\n    }]);\n\n    return Entity;\n  }();\n\n  var _require = __webpack_require__(/*! mobx */ \"../../walax/node_modules/mobx/dist/mobx.esm.js\");\n      _require.observable;\n\n  var Control = /*#__PURE__*/function (_Entity) {\n    _inherits(Control, _Entity);\n\n    var _super = _createSuper(Control);\n\n    function Control() {\n      _classCallCheck(this, Control);\n\n      return _super.call(this);\n    }\n\n    _createClass$1(Control, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Control';\n      }\n    }, {\n      key: \"load\",\n      value: function () {\n        var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(key, url) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", true);\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function load(_x, _x2) {\n          return _load.apply(this, arguments);\n        }\n\n        return load;\n      }()\n    }]);\n\n    return Control;\n  }(Entity);\n\n  var FATAL = 0;\n  var ERROR = 1;\n  var WARN = 2;\n  var INFO = 4;\n  var DEBUG = 8;\n  var TRACE = 16;\n  var LEVELS = [FATAL, ERROR, WARN, INFO, DEBUG, TRACE];\n  var COLOR = [];\n  LEVELS.map(function (x) {\n    return COLOR[x] = {\n      fg: 'silver',\n      bg: '#111',\n      border: 'lightblue'\n    };\n  });\n  COLOR[DEBUG].border = 'purple';\n  COLOR[INFO] = {\n    fg: 'lightblue',\n    bg: '#555',\n    border: '#bada55'\n  };\n  COLOR[WARN] = {};\n  COLOR[ERROR] = {\n    fg: 'white',\n    bg: 'red',\n    border: 'white'\n  };\n  var consoleLog = function consoleLog(msg, lvl, stack) {\n    var _console, _COLOR$lvl;\n\n    if (msg.length > 1 && typeof msg[1] != 'string') msg.unshift(msg.shift(), '-----');\n\n    (_console = console).log.apply(_console, [// tpdp any need to check for chrome here?\n    // todo make \"walax\" configurable via proxy logging class\n    \"%c \".concat(msg.shift(), \"%c\\u2263%c \").concat(msg.shift()), 'color: #557723; \\\n     font-family: \"Times New Roman\", serif; \\\n     font-weight: bold; font-variant: small-caps; \\\n     font-size: medium; padding: 3px; \\\n    ', '', \"font-size: medium;       font-family: \\\"Courier New\\\", \\\"Times New Roman\\\", serif;       font-size: small; font-variant: small-caps;       padding: 3px; color: \".concat(((_COLOR$lvl = COLOR[lvl]) === null || _COLOR$lvl === void 0 ? void 0 : _COLOR$lvl.fg) || 'white', \"; \")].concat(_toConsumableArray(msg)));\n  };\n  consoleLog.multiple = true;\n  var Logger = /*#__PURE__*/function (_Control) {\n    _inherits(Logger, _Control);\n\n    var _super = _createSuper(Logger);\n\n    function Logger() {\n      var _this;\n\n      _classCallCheck(this, Logger);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"all\", new Set());\n\n      _defineProperty(_assertThisInitialized$1(_this), \"level\", TRACE);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"stack\", false);\n\n      return _this;\n    }\n\n    _createClass$1(Logger, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Logger';\n      }\n    }, {\n      key: \"register\",\n      value:\n      /**\n       * registers a callback: (msg, level) => { ..logging.. }\n       *\n       * @param {*} cb\n       */\n      function register(cb) {\n        this.all.add(cb);\n      }\n      /**\n       * public methods for each log level.  accepts arbitrary\n       * argument list, and logs each item individually\n       *\n       * @param {*} s\n       */\n\n    }, {\n      key: \"_shouldLog\",\n      value: function _shouldLog(level) {\n        return this.level >= level;\n      }\n      /* async */\n\n    }, {\n      key: \"fatal\",\n      value: function fatal() {\n        for (var _len = arguments.length, s = new Array(_len), _key = 0; _key < _len; _key++) {\n          s[_key] = arguments[_key];\n        }\n\n        return this._shouldLog(FATAL) && this._log(s, FATAL);\n      }\n      /* async */\n\n    }, {\n      key: \"info\",\n      value: function info() {\n        for (var _len2 = arguments.length, s = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          s[_key2] = arguments[_key2];\n        }\n\n        return this._shouldLog(INFO) && this._log(s, INFO);\n      }\n      /* async */\n\n    }, {\n      key: \"warn\",\n      value: function warn() {\n        for (var _len3 = arguments.length, s = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          s[_key3] = arguments[_key3];\n        }\n\n        return this._shouldLog(WARN) && this._log(s, WARN);\n      }\n      /* async */\n\n    }, {\n      key: \"error\",\n      value: function error() {\n        for (var _len4 = arguments.length, s = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          s[_key4] = arguments[_key4];\n        }\n\n        return this._shouldLog(ERROR) && this._log(s, ERROR);\n      }\n      /* async */\n\n    }, {\n      key: \"debug\",\n      value: function debug() {\n        for (var _len5 = arguments.length, s = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          s[_key5] = arguments[_key5];\n        }\n\n        return this._shouldLog(DEBUG) && this._log(s, DEBUG);\n      }\n      /* async */\n\n    }, {\n      key: \"trace\",\n      value: function trace() {\n        for (var _len6 = arguments.length, s = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          s[_key6] = arguments[_key6];\n        }\n\n        return this._shouldLog(TRACE) && this._log(s, TRACE, true);\n      }\n    }, {\n      key: \"assert\",\n      value: function assert(val, msg) {\n        var dbginfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (!val) {\n          this.d('assert failed', msg, dbginfo || undefined); // this.error(name || '<assert>', msg, dbginfo)\n\n          throw new TypeError(msg); // crash and reload?  what now?\n        }\n      }\n      /* async */\n\n    }, {\n      key: \"_log\",\n      value: function _log(s) {\n        var _this2 = this;\n\n        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INFO;\n        var stack = arguments.length > 2 ? arguments[2] : undefined;\n        var promises = [];\n        this.all.forEach(function (v, k, z) {\n          if (v.multiple) promises.push(_this2._processLog(v, s, level, stack));else s.forEach(function (msg) {\n            return promises.push(_this2._processLog(v, msg, level, stack));\n          });\n\n          if (stack) {\n            var stackError = new Error();\n            promises.push(_this2._processLog(v, [stackError.stack], TRACE));\n          }\n        });\n        return promises;\n      }\n      /* async */\n\n    }, {\n      key: \"_processLog\",\n      value: function _processLog(cb, msg, level) {\n        var stack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        return cb(msg, level, stack);\n      }\n    }]);\n\n    return Logger;\n  }(Control);\n\n  var Manager = /*#__PURE__*/function (_Entity) {\n    _inherits(Manager, _Entity);\n\n    var _super = _createSuper(Manager);\n\n    function Manager() {\n      var _this;\n\n      _classCallCheck(this, Manager);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"_model\", false);\n\n      return _this;\n    }\n\n    _createClass$1(Manager, [{\n      key: \"all\",\n      value: function all() {}\n    }, {\n      key: \"filter\",\n      value: function filter() {}\n    }, {\n      key: \"one\",\n      value: function one(arg) {}\n    }], [{\n      key: \"getForModel\",\n      value: function getForModel(model) {\n        if (!this._managers.has(model)) {\n          var mgr = new this(model);\n\n          this._managers.set(model, mgr);\n        }\n\n        return this._managers.get(model);\n      }\n    }]);\n\n    return Manager;\n  }(Entity);\n\n  _defineProperty(Manager, \"_managers\", new Map());\n\n  var Model = /*#__PURE__*/function (_Entity) {\n    _inherits(Model, _Entity);\n\n    var _super = _createSuper(Model);\n\n    function Model(data) {\n      var _this;\n\n      _classCallCheck(this, Model);\n\n      _this = _super.call(this);\n      _this._w = {\n        model: _this.constructor,\n        values: new Map(),\n        dirty: new Set()\n      };\n\n      _this._initModel(data);\n\n      return _this;\n    }\n\n    _createClass$1(Model, [{\n      key: \"pk\",\n      get: function get() {\n        return this[this._w.model.pk];\n      }\n    }, {\n      key: \"url\",\n      get: function get() {\n        return this._w.url;\n      },\n      set: function set(u) {\n        this._w.url = u;\n      }\n    }, {\n      key: \"save\",\n      value: function save() {\n        this.a(false, 'model class must implement save()');\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        this.a(false, 'model class must implement delete()');\n      }\n    }, {\n      key: \"_initModel\",\n      value: function _initModel(data) {\n        var _this2 = this;\n\n        this._w || (this._w = {});\n        Object.assign(this._w, _defineProperty({\n          dirty: new Set(),\n          values: new Map(),\n          url: false,\n          \"new\": true\n        }, \"values\", new Map()));\n        this.d('initmodel', this);\n\n        if (Object.keys(this._w.model.fields).length) {\n          Object.keys(this._w.model.fields).forEach(function (fn) {\n            _this2.d(\"field \".concat(fn));\n\n            w$1.augment(_this2, fn, _this2._walaxGetField(fn), _this2._walaxSetField(fn)); //FIXME at the very least per-type\n\n            _this2._setFieldDefault(fn);\n          });\n\n          if (this._w.model.relatedQueries) {\n            Object.keys(this._w.model.relatedQueries).forEach(function (rn) {\n              w$1.augment(_this2, rn, function () {\n                return _this2._w.model.relatedQueries[rn];\n              });\n            });\n          }\n\n          if (data) {\n            for (var fn in data) {\n              this.d('setting field', fn, data[fn]);\n\n              if (fn == 'url') {\n                this._w.url = data[fn];\n              } else {\n                this._w.values.set(fn, data[fn]);\n              }\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_validateFields\",\n      value: function _validateFields() {\n        this.a(false, 'not implemented');\n      } // _getField(fn) {\n      //     this.a(false, 'not implemented')\n      // }\n      // _setField(fn) {\n      //     this.a(false, 'not implemented')\n      // }\n\n    }, {\n      key: \"_setFieldDefault\",\n      value: function _setFieldDefault(field) {\n        if (field == 'url') return true;\n\n        this._w.values.set(field, undefined);\n\n        var fd = this._w.model.fields[field];\n\n        switch (fd.type) {}\n\n        return true;\n      }\n    }, {\n      key: \"_walaxGetField\",\n      value: function _walaxGetField(field) {\n        var _this3 = this;\n\n        if (this._getField) return this._getField(field);\n        return function () {\n          return _this3._w.values.get(field);\n        };\n      }\n    }, {\n      key: \"_walaxSetField\",\n      value: function _walaxSetField(field) {\n        var _this4 = this;\n\n        if (this._setField) return this._setField(field);\n        return function (val) {\n          _this4._w.dirty.add(field);\n\n          _this4._w.values.set(field, val);\n\n          return newVal;\n        };\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"object\";\n      }\n    }], [{\n      key: \"objects\",\n      get: function get() {\n        //fixme one manager per manager/model tuple\n        this.manager || (this.manager = new this.defaultManager(this));\n        return this.manager;\n      }\n    }, {\n      key: \"fields\",\n      get: function get() {\n        return this._w.fields;\n      }\n    }]);\n\n    return Model;\n  }(Entity);\n\n  _defineProperty(Model, \"defaultManager\", Manager);\n\n  var Schema = /*#__PURE__*/function (_Entity) {\n    _inherits(Schema, _Entity);\n\n    var _super = _createSuper(Schema);\n\n    function Schema(name, url) {\n      var _this;\n\n      var models = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, Schema);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"schema\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"title\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"description\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"version\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"name\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"url\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"defaultManager\", Manager);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"defaultModel\", Model);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"managers\", new Map());\n\n      _defineProperty(_assertThisInitialized$1(_this), \"models\", new Map());\n\n      _this.a(name || !url, \"need a name for schema \".concat(url));\n\n      _this.name = name;\n\n      _this.d(\" Django schema \".concat(name, \" (\").concat(url, \") loaded\"));\n\n      _this.initialize(models);\n\n      if (url) _this.load(name, url, models);\n      return _this;\n    }\n\n    _createClass$1(Schema, [{\n      key: \"initialize\",\n      value: function initialize() {\n        this.schema = false;\n        this.title = false;\n        this.description = false;\n        this.version = false;\n        this.url = false;\n        this.servers = false;\n        this.models = {};\n      }\n    }, {\n      key: \"importModels\",\n      value: function importModels(models) {// TODO: this\n      }\n    }, {\n      key: \"loadUrl\",\n      value: function loadUrl(url) {\n        this.e('schema class must implement loadUrl');\n      }\n    }, {\n      key: \"load\",\n      value: function load(name, url) {\n        var _models,\n            _models$forEach,\n            _this2 = this;\n\n        var models = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var servers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        //let url = new URL(url) // this will throw a TypeError if invalid\n        this.initialize(models);\n        this.d(\"\".concat(name, \": \").concat(url));\n        models || (models = this.models);\n        this.models || (this.models = models);\n        (_models = models) === null || _models === void 0 ? void 0 : (_models$forEach = _models.forEach) === null || _models$forEach === void 0 ? void 0 : _models$forEach.call(_models, function (v) {\n          return _this2.addModel(v, models[v]);\n        });\n        this.url = url;\n        this.servers = servers;\n        return this.loadUrl(url);\n      }\n    }, {\n      key: \"checkModel\",\n      value: function checkModel(model) {\n        if (!w$1.checkClass(Model, model)) return false;\n        return true;\n      }\n    }, {\n      key: \"initSchema\",\n      value: function initSchema(data) {\n        this.a(false, 'initSchema not implemented');\n      }\n    }, {\n      key: \"createModel\",\n      value: function createModel(name) {\n        var _this$models$name,\n            _this3 = this;\n\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        var baseModel = this.models[name] || this.defaultModel;\n        this.a(baseModel, 'no base model to use');\n        this.a(w$1.isValidProp(name), 'invalid name', name);\n        eval(\"this.models[name] = class \".concat(name, \" extends baseModel {}\"));\n        this.a(this.checkModel(this.models[name]), \"invalid model registered: \".concat(name));\n        this.a(!w$1.obj.models.has(name), \"model \".concat(name, \" already exists!\"));\n        this.d(\"creating model \".concat(name), {\n          schema: this,\n          model: this.models[name]\n        });\n        (_this$models$name = this.models[name])._w || (_this$models$name._w = {});\n        if (opts) for (var opt in opts) {\n          this.models[name]._w[opt] = opts[opt];\n        }\n        this.models[name].modelName = name;\n        w$1.augment(this, name, function () {\n          return _this3.models[name];\n        });\n        w$1.augment(w$1.obj, name, function () {\n          return _this3.models[name];\n        }); // w.obj.models.set(name, this.models[name])\n\n        this.d('created model', this.models[name]);\n        return this.models[name];\n      }\n    }]);\n\n    return Schema;\n  }(Entity);\n\n  var _Symbol$iterator, _Symbol$iterator2;\n  _Symbol$iterator = Symbol.iterator;\n\n  var DjangoQueryProxy = /*#__PURE__*/function (_Entity) {\n    _inherits(DjangoQueryProxy, _Entity);\n\n    var _super = _createSuper(DjangoQueryProxy);\n\n    function DjangoQueryProxy(query) {\n      var _this;\n\n      _classCallCheck(this, DjangoQueryProxy);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"query\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"keys\", false);\n\n      _this.query = query;\n      return _this;\n    }\n\n    _createClass$1(DjangoQueryProxy, [{\n      key: _Symbol$iterator,\n      value: function value() {\n        this.keys = this.query.cache;\n        return this;\n      }\n    }, {\n      key: \"next\",\n      value: function next() {\n        var cur = this.keys.next();\n        if (cur.done) return cur;\n        var obj = w$1.obj.getObject(this.query.model, cur.value);\n        return {\n          value: obj,\n          done: false\n        };\n      }\n    }]);\n\n    return DjangoQueryProxy;\n  }(Entity);\n\n  _Symbol$iterator2 = Symbol.iterator;\n\n  var DjangoQuery = /*#__PURE__*/function (_Entity2) {\n    _inherits(DjangoQuery, _Entity2);\n\n    var _super2 = _createSuper(DjangoQuery);\n\n    /**\n     * Creates an instance of DjangoQuery.\n     * @param {*} model\n     * @param {*} parent\n     * @param {dict} [args=false]\n     * @param {boolean} [flip=false]\n     * @memberof DjangoQuery\n     */\n    function DjangoQuery(parent) {\n      var _this2;\n\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var flip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var single = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      _classCallCheck(this, DjangoQuery);\n\n      // todo: sanity check\n      _this2 = _super2.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this2), \"parent\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this2), \"flip\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this2), \"filter\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this2), \"single\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this2), \"cache\", false);\n\n      _this2.parent = parent;\n      _this2.flip = flip;\n      _this2.args = args;\n      _this2.single = single;\n      _this2.cache = {};\n      return _this2;\n    }\n\n    _createClass$1(DjangoQuery, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'DjangoQuery ' + this.serialized;\n      }\n    }, {\n      key: \"all\",\n      value: function all() {\n        return new DjangoQuery(this);\n      }\n    }, {\n      key: \"filter\",\n      value: function filter(args) {\n        return new DjangoQuery(this, args);\n      }\n    }, {\n      key: \"exclude\",\n      value: function exclude(args) {\n        return new DjangoQuery(this, args, true);\n      }\n    }, {\n      key: \"one\",\n      value: function one(args) {\n        return new DjangoQuery(this, args, false, true);\n      }\n    }, {\n      key: \"model\",\n      get: function get() {\n        return this.parent.model;\n      }\n    }, {\n      key: \"params\",\n      get: function get() {\n        var p = this.parent.args ? this.parent.args : {};\n        if (this.args) Object.assign(p, this.args);\n        this.d('query params', p);\n        return p;\n      }\n    }, {\n      key: \"serialized\",\n      get: function get() {\n        var rec = undefined;\n\n        for (var f in this.args) {\n          rec += \"(\".concat(f, \"=\").concat(this.args[f], \")\");\n        }\n\n        if (this.single) rec = '#' + rec;\n        if (this.flip) rec = '!' + rec;\n        rec = \"\".concat(this.parent.serialized) + (rec ? \"+\".concat(rec) : '');\n        return rec;\n      }\n    }, {\n      key: _Symbol$iterator2,\n      value: function value() {\n        return new DjangoQueryProxy(this);\n      }\n    }, {\n      key: \"fetch\",\n      value: function () {\n        var _fetch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          var _this3 = this;\n\n          var res;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  res = new Set();\n                  this.d('query fetch', this.model, this.params);\n                  return _context.abrupt(\"return\", w$1.net.get(this.model.modelUrl, this.params).then(function (data) {\n                    if (data.length) {\n                      _this3.d('received query data', data);\n\n                      data.forEach(function (o) {\n                        var newObj = w$1.obj.receiveObject(_this3.model, o);\n\n                        _this3.d('object created', newObj);\n\n                        res.add(newObj);\n                      });\n                    }\n\n                    _this3.d('fetch returns', res);\n\n                    return res;\n                  }));\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function fetch() {\n          return _fetch.apply(this, arguments);\n        }\n\n        return fetch;\n      }()\n    }, {\n      key: \"then\",\n      value: function () {\n        var _then = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(f) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  return _context2.abrupt(\"return\", this.fetch().then(function (res) {\n                    return f(res);\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function then(_x) {\n          return _then.apply(this, arguments);\n        }\n\n        return then;\n      }()\n    }]);\n\n    return DjangoQuery;\n  }(Entity);\n\n  var DjangoManager = /*#__PURE__*/function (_Manager) {\n    _inherits(DjangoManager, _Manager);\n\n    var _super = _createSuper(DjangoManager);\n\n    function DjangoManager(model) {\n      var _this;\n\n      _classCallCheck(this, DjangoManager);\n\n      _this = _super.call(this, model);\n      _this.model = model;\n      return _this;\n    }\n\n    _createClass$1(DjangoManager, [{\n      key: \"params\",\n      get: function get() {\n        return {};\n      }\n    }, {\n      key: \"all\",\n      value: function () {\n        var _all = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          var query;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  query = new DjangoQuery(this);\n                  return _context.abrupt(\"return\", query);\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function all() {\n          return _all.apply(this, arguments);\n        }\n\n        return all;\n      }()\n    }, {\n      key: \"filter\",\n      value: function () {\n        var _filter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(args) {\n          var query;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  query = new DjangoQuery(this, args);\n                  return _context2.abrupt(\"return\", query);\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function filter(_x) {\n          return _filter.apply(this, arguments);\n        }\n\n        return filter;\n      }()\n    }, {\n      key: \"exclude\",\n      value: function () {\n        var _exclude = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n          var _len,\n              args,\n              _key,\n              query,\n              _args3 = arguments;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  for (_len = _args3.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args3[_key];\n                  }\n\n                  query = new DjangoQuery(this, args, true);\n                  return _context3.abrupt(\"return\", query);\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function exclude() {\n          return _exclude.apply(this, arguments);\n        }\n\n        return exclude;\n      }()\n    }, {\n      key: \"none\",\n      value: function () {\n        var _none = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  return _context4.abrupt(\"return\", this.all().none());\n\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function none() {\n          return _none.apply(this, arguments);\n        }\n\n        return none;\n      }()\n    }, {\n      key: \"serialized\",\n      get: function get() {\n        return this.model.modelName;\n      }\n    }]);\n\n    return DjangoManager;\n  }(Manager);\n\n  /**\n   * DjangoModel\n   * @class\n   */\n\n  var DjangoModel = /*#__PURE__*/function (_Model) {\n    _inherits(DjangoModel, _Model);\n\n    var _super = _createSuper(DjangoModel);\n\n    /**\n     * builds a new DjangoModel\n     * @class\n     * @classdesc a WalaxModel backed by Django Rest Framework\n     * @param {*} data\n     */\n    function DjangoModel(data) {\n      var _this;\n\n      _classCallCheck(this, DjangoModel);\n\n      _this = _super.call(this);\n\n      _this._setFieldDefaults();\n\n      if (data) _this.updateFields(data);\n      return _this;\n    }\n\n    _createClass$1(DjangoModel, [{\n      key: \"toString\",\n      value: function toString() {\n        var parts = ['django', this._w.model.modelName];\n        if (this.pk) parts.concat(this.pk);\n        return parts.join('.');\n      }\n    }, {\n      key: \"_getField\",\n      value: function _getField(fn) {\n        var _this2 = this;\n\n        // this.d('getting field', fn)\n        return function () {\n          var fv = _this2._w.values.get(fn),\n              fd = _this2._w.model.fields[fn];\n\n          if (fd.type == 'choice') {\n            fd.choices.forEach(function (f) {\n              if (f.value == fv) {\n                fv = f.display_name;\n              }\n            });\n          }\n\n          return fv;\n        };\n      }\n    }, {\n      key: \"_setField\",\n      value: function _setField(fn) {\n        var _this3 = this;\n\n        return function (val) {\n          var fd = _this3._w.model.fields[fn]; // this.d(`setField(${fn})`, val, fd)\n\n          var fv = val;\n\n          _this3.a(fd, \"field \".concat(fn, \" not found\"));\n\n          _this3.a(!(fd !== null && fd !== void 0 && fd.read_only), \"field \".concat(fn, \" is read-only\"));\n\n          switch (fd.type) {\n            case 'field':\n              break;\n\n            case 'string':\n              _this3.a(typeof fv == 'string', \"field \".concat(fn, \" is a string\"), fv);\n\n              if (fd.max_length) _this3.a(fv.length <= fd.max_length, 'string is too long');\n              break;\n\n            case 'choice':\n              var fc = undefined;\n              fd.choices.forEach(function (f) {\n                if ([f.value, f.display_name].includes(val) || f.display_name.toLowerCase() == String(val).toLowerCase()) fc = f.value;\n              });\n\n              _this3.a(fc !== undefined, \"invalid choice for field \".concat(fn), fd, fv);\n\n              fv = fc;\n              break;\n          }\n\n          _this3._w.dirty.add(fn);\n\n          _this3._w.values.set(fn, fv);\n\n          _this3.d('field set', fn, fv);\n\n          return fv;\n        };\n      } //fixme for types\n\n    }, {\n      key: \"_setFieldDefaults\",\n      value: function _setFieldDefaults() {\n        for (var fn in this._w.model.fields) {\n          this._w.values.set(fn, undefined);\n        }\n      }\n    }, {\n      key: \"_validateFields\",\n      value: function _validateFields() {\n        return true;\n      }\n    }, {\n      key: \"updateFields\",\n      value: function updateFields(data) {\n        this.d('updateFields', data, this);\n\n        for (var fn in data) {\n          this.a(Object.keys(this._w.model.fields).includes(fn), \"key \".concat(fn, \" not found\"), this._w.model);\n\n          this._w.values.set(fn, data[fn]);\n\n          if (this._w[\"new\"]) {\n            this._w.dirty.add(fn);\n          }\n        }\n\n        if (data && data.url) this._w.url = data.url;\n        if (!this._w.url && this.pk) this._w.url = [this._w.model.modelUrl, this.pk, '/'].join(''); //TODO support non-trailing slash urls?\n      }\n    }, {\n      key: \"save\",\n      value: function () {\n        var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          var _this4 = this;\n\n          var saveFields, fn;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (this._w.dirty.size) {\n                    _context.next = 3;\n                    break;\n                  }\n\n                  this.d('save(): object unchanged, not saving');\n                  return _context.abrupt(\"return\", this);\n\n                case 3:\n                  this.a(!this._w.deleted, \"saving deleted model: \".concat(this.toString(), \".save()\"));\n                  this.a(this._validateFields(), 'fields failed to validate');\n                  saveFields = Object.fromEntries(this._w.values.entries());\n\n                  for (fn in saveFields) {\n                    if (saveFields[fn] === undefined) delete saveFields[fn];\n                  }\n\n                  if (!this._w[\"new\"]) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", w$1.net.post(this._w.model.modelUrl, {}, saveFields, {}).then(function (ret) {\n                    _this4.updateFields(ret);\n                  }));\n\n                case 11:\n                  return _context.abrupt(\"return\", w$1.net.put(this.url, {}, saveFields, {}).then(function (ret) {\n                    _this4.updateFields(ret);\n                  }));\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function save() {\n          return _save.apply(this, arguments);\n        }\n\n        return save;\n      }()\n    }, {\n      key: \"delete\",\n      value: function () {\n        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          var _this5 = this;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log('this', this);\n                  this.d('deleting', this);\n                  this.a(!this._w.deleted, \"deleting deleted model: \".concat(this._name, \".delete()\"));\n                  return _context2.abrupt(\"return\", w$1.net[\"delete\"](this.url).then(function (ret) {\n                    _this5.d('deleted', {\n                      obj: _this5\n                    });\n\n                    _this5._w.deleted = true;\n\n                    _this5._w.values.clear();\n                  }));\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function _delete() {\n          return _delete2.apply(this, arguments);\n        }\n\n        return _delete;\n      }()\n    }]);\n\n    return DjangoModel;\n  }(Model);\n\n  _defineProperty(DjangoModel, \"defaultManager\", DjangoManager);\n\n  var camelCase = function camelCase(s) {\n    if (!s || typeof s !== 'string') return '';\n    var parts = s.split('_');\n\n    for (var n in parts) {\n      parts[n] = parts[n].charAt(0).toUpperCase() + parts[n].slice(1);\n    }\n\n    return parts.join('');\n  };\n\n  var DjangoSchema = /*#__PURE__*/function (_Schema) {\n    _inherits(DjangoSchema, _Schema);\n\n    var _super = _createSuper(DjangoSchema);\n\n    function DjangoSchema(url) {\n      var _this;\n\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var models = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      _classCallCheck(this, DjangoSchema);\n\n      _this = _super.call(this, url, name, models);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"defaultModel\", DjangoModel);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"defaultManager\", DjangoManager);\n\n      _this.fields = {};\n      return _this;\n    }\n\n    _createClass$1(DjangoSchema, [{\n      key: \"getManager\",\n      value: function getManager(model) {\n        var _model,\n            _this2 = this;\n\n        // allows instances/names to be passed in\n        if (typeof model == 'string') model = this.models.get(model);\n        if ((_model = model) !== null && _model !== void 0 && _model._model) model = model._model;\n        return w$1.cache.find('managers', model, function (m) {\n          var mgrClass = \"\".concat(m._w.modelClassName, \"Manager\");\n          if (_this2.models.has(mgrClass)) return new mgrClass(m);\n          return new _this2.defaultManager(model);\n        });\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return \"django schema \".concat(this.name);\n      }\n    }, {\n      key: \"init\",\n      value: function init(data) {\n        _get(_getPrototypeOf(DjangoSchema.prototype), \"init\", this).call(this, data);\n      }\n    }, {\n      key: \"processModels\",\n      value: function processModels() {\n        var _this3 = this;\n\n        var _loop = function _loop(modelName) {\n          var model = _this3.models[modelName];\n\n          for (var fn in model.fields) {\n            var field = model.fields[fn];\n\n            if (field.type == 'related') {\n              (function () {\n                var relatedName = field.related_name;\n                relatedName || (relatedName = modelName.toLowerCase() + '_set');\n\n                _this3.d(\"adding \".concat(field.model, \".\").concat(relatedName.toLowerCase()));\n\n                var targetModel = _this3.models[field.model];\n\n                _this3.d('targetModel', {\n                  targetModel: targetModel,\n                  field: field\n                }, _this3.models);\n\n                targetModel.relatedQueries || (targetModel.relatedQueries = {});\n                var queryField = \"\".concat(fn, \"_id\");\n\n                var getQuery = function getQuery() {\n                  if (this.pk) {\n                    var filter = {};\n                    filter[queryField] = this.pk;\n                    var query = model.objects.filter(filter);\n                    return query;\n                  }\n\n                  return [];\n                };\n\n                targetModel.relatedQueries[relatedName] = getQuery;\n              })();\n            }\n          }\n        };\n\n        for (var modelName in this.models) {\n          _loop(modelName);\n        }\n      }\n    }, {\n      key: \"loadUrl\",\n      value: function loadUrl(url) {\n        var _this4 = this;\n\n        // FIXME hack\n        this.d('Django loadUrl', url);\n        if (!url.endsWith('/')) url += '/';\n        var modelsUrl = url + 'models/';\n        this.d(\"loadUrl \".concat(url), {\n          modelsUrl: modelsUrl\n        });\n        w$1.net.options(modelsUrl).then(function (info) {\n          _this4.d(\"receiving info for \".concat(url), info);\n\n          _this4.url = url;\n          _this4.modelsUrl = modelsUrl; // this.title = info.name || 'Untitled'\n\n          _this4.description = info.description || '';\n          _this4.schema = info;\n        });\n        return w$1.net.get(modelsUrl).then(function (data) {\n          _this4.d('retrieved schema data', data);\n\n          var modelPromises = [];\n\n          var _loop2 = function _loop2(modelName) {\n            var modelRootUri = data[modelName];\n            modelPromises.push(w$1.net.options(modelRootUri).then(function (modelInfo) {\n              _this4.d(\"retrieved options for model \".concat(modelName), modelInfo);\n\n              var fields = modelInfo.actions.POST;\n              var modelClassName = camelCase(modelName);\n              var opts = {\n                modelUrl: modelRootUri,\n                fields: fields,\n                modelName: modelClassName,\n                schema: _this4\n              };\n\n              _this4.d('model options', opts);\n\n              var m = _this4.createModel(modelClassName, opts);\n\n              m.modelUrl = modelRootUri;\n\n              for (var fn in fields) {\n                if (fields[fn]['primary_key'] == 'true') {\n                  m.pk = fn;\n                  break;\n                }\n              }\n\n              if (!m.pk && fields['url'] == undefined) _this4.e('no primary key', m);\n\n              _this4.d(\"created model class \".concat(modelClassName), {\n                opts: opts,\n                m: m\n              });\n            }));\n          };\n\n          for (var modelName in data) {\n            _loop2(modelName);\n          }\n\n          Promise.all(modelPromises).then(function (x) {\n            _this4.processModels();\n          });\n        });\n      }\n    }]);\n\n    return DjangoSchema;\n  }(Schema);\n\n  var Objects = /*#__PURE__*/function (_Control) {\n    _inherits(Objects, _Control);\n\n    var _super = _createSuper(Objects);\n\n    function Objects() {\n      var _this;\n\n      _classCallCheck(this, Objects);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"schemas\", new Map());\n\n      _defineProperty(_assertThisInitialized$1(_this), \"models\", new Map());\n\n      _defineProperty(_assertThisInitialized$1(_this), \"managers\", new Map());\n\n      return _this;\n    }\n\n    _createClass$1(Objects, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Objects';\n      }\n    }, {\n      key: \"defaultSchemaClass\",\n      get: function get() {\n        return DjangoSchema;\n      }\n    }, {\n      key: \"checkManager\",\n      value: function checkManager(manager) {\n        return true; // not even sure we should check inheritance here\n      }\n    }, {\n      key: \"receiveObject\",\n      value: function receiveObject(model, data) {\n        this.d(\"receiving model object data\", model, data);\n        this.checkModel(model);\n        var obj = new model();\n        if (data) obj.updateFields(data);\n        if (obj.pk) obj._w[\"new\"] = false; // obj._w.dirty.clear()\n\n        this.d(\"object created\", {\n          model: model,\n          obj: obj\n        }); // k, v, ...cache ident\n        //w.cache.store(obj.pk, obj, 'objects', model._schema, model)\n\n        return obj;\n      }\n    }, {\n      key: \"checkName\",\n      value: function checkName(name) {\n        // todo generic, move to Walax\n        if (!name) throw new TypeError('schema name may not be blank');\n        if (this.schemas.has(name)) throw new TypeError(\"schema name \".concat(name, \" already registered\"));\n        if (!w.isValidProp(name)) throw new TypeError(\"invalid schema name: \".concat(name));\n        return true;\n      }\n    }, {\n      key: \"checkModels\",\n      value: function checkModels(models) {\n        var _this2 = this;\n\n        if (!models) return true;\n        models.forEach(function (v, k) {\n          if (!w.isValidProp(k)) throw new TypeError(\"invalid name for model \".concat(k));\n          if (!_this2.checkModel(v)) throw new TypeError(\"custom model \".concat(k, \" is not a WalaxObject\"));\n        });\n        return true;\n      }\n    }, {\n      key: \"checkModel\",\n      value: function checkModel(model) {\n        return w.checkClass(Model, model); // todo maybe\n      }\n    }, {\n      key: \"checkSchema\",\n      value: function checkSchema(cls) {\n        return true;\n      }\n    }, {\n      key: \"load\",\n      value: function () {\n        var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(name, url) {\n          var _this3 = this;\n\n          var models,\n              schemaCls,\n              schema,\n              _args = arguments;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  models = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n                  schemaCls = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n                  this.checkName(name);\n                  this.checkModels(models);\n                  schemaCls || (schemaCls = this.defaultSchemaClass);\n                  this.checkSchema(schemaCls);\n                  this.apiBase = url;\n                  this.d('loading schema class', url, schemaCls);\n                  schema = new schemaCls(name, url, models);\n                  w.augment(this, name, function () {\n                    return _this3.schemas.get(name);\n                  });\n                  this.schemas.set(name, schema);\n                  return _context.abrupt(\"return\", schema);\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function load(_x, _x2) {\n          return _load.apply(this, arguments);\n        }\n\n        return load;\n      }()\n    }, {\n      key: \"schema\",\n      value: function schema(name) {\n        return this.schemas.get(name);\n      }\n    }]);\n\n    return Objects;\n  }(Control);\n\n  var m = __webpack_require__(/*! mithril */ \"../../walax/node_modules/mithril/index.js\");\n\n  var Network = /*#__PURE__*/function (_Control) {\n    _inherits(Network, _Control);\n\n    var _super = _createSuper(Network);\n\n    function Network() {\n      _classCallCheck(this, Network);\n\n      return _super.call(this);\n    }\n\n    _createClass$1(Network, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Network';\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        this.baseUrl = url;\n      }\n      /**\n       * public methods for each HTTP method\n       *\n       * @param {*} url\n       * @param {*} params\n       * @param {*} body\n       * @param {*} options\n       * @returns {Promise}\n       */\n\n    }, {\n      key: \"post\",\n      value: function () {\n        var _post = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'POST'])));\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function post(_x, _x2, _x3, _x4) {\n          return _post.apply(this, arguments);\n        }\n\n        return post;\n      }()\n    }, {\n      key: \"get\",\n      value: function () {\n        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  return _context2.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'GET'])));\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function get(_x5, _x6, _x7, _x8) {\n          return _get.apply(this, arguments);\n        }\n\n        return get;\n      }()\n    }, {\n      key: \"put\",\n      value: function () {\n        var _put = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  return _context3.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'PUT'])));\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function put(_x9, _x10, _x11, _x12) {\n          return _put.apply(this, arguments);\n        }\n\n        return put;\n      }()\n    }, {\n      key: \"delete\",\n      value: function () {\n        var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  return _context4.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'DELETE'])));\n\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function _delete(_x13, _x14, _x15, _x16) {\n          return _delete2.apply(this, arguments);\n        }\n\n        return _delete;\n      }()\n    }, {\n      key: \"options\",\n      value: function () {\n        var _options = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  return _context5.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'OPTIONS'])));\n\n                case 1:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        function options(_x17, _x18, _x19, _x20) {\n          return _options.apply(this, arguments);\n        }\n\n        return options;\n      }()\n    }, {\n      key: \"patch\",\n      value: function () {\n        var _patch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  return _context6.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'PATCH'])));\n\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, this);\n        }));\n\n        function patch(_x21, _x22, _x23, _x24) {\n          return _patch.apply(this, arguments);\n        }\n\n        return patch;\n      }()\n    }, {\n      key: \"head\",\n      value: function () {\n        var _head = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(u, p, b, o) {\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  return _context7.abrupt(\"return\", this._req(this._reqOpts.apply(this, [u, p, b, o, 'HEAD'])));\n\n                case 1:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this);\n        }));\n\n        function head(_x25, _x26, _x27, _x28) {\n          return _head.apply(this, arguments);\n        }\n\n        return head;\n      }() // TODO: websockets\n\n      /**\n       * pass a request through to mithril\n       *\n       * @param {*} options\n       * @returns {Promise}\n       */\n\n    }, {\n      key: \"_req\",\n      value: function () {\n        var _req2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(options) {\n          return regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  this.a(options, 'empty request options');\n                  options.headers || (options.headers = {});\n                  options.headers.Accept = 'application/vnd.oai.openapi+json, application/json';\n\n                  if (w$1.auth.state) {\n                    options.headers.Authorization = \"Bearer \".concat(w$1.auth.token);\n                  }\n\n                  this.a(this._chkOpts(options), 'bad request options', options);\n                  this.d(\"Request: \".concat(options.method.toUpperCase(), \" \").concat(options.url), {\n                    options: options\n                  });\n                  return _context8.abrupt(\"return\", m.request(options));\n\n                case 7:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8, this);\n        }));\n\n        function _req(_x29) {\n          return _req2.apply(this, arguments);\n        }\n\n        return _req;\n      }()\n      /**\n       * check validity of request options object\n       *\n       * @param {object} opts\n       * @returns {boolean}\n       */\n\n    }, {\n      key: \"_chkOpts\",\n      value: function _chkOpts(opts) {\n        // todo better sanity?\n        var ret = typeof (opts === null || opts === void 0 ? void 0 : opts.url) == 'string' && (opts === null || opts === void 0 ? void 0 : opts.method);\n        this.d('checking options', opts, ret);\n        return ret;\n      }\n      /**\n       * formats parameters into request options for mithril\n       *\n       * @param {string} url\n       * @param {object} params\n       * @param {object} body\n       * @param {object} options\n       * @param {string} [method='GET']\n       * @returns {object}\n       */\n\n    }, {\n      key: \"_reqOpts\",\n      value: function _reqOpts(url, params, body, options) {\n        var method = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'GET';\n        // if (!url.startsWith('http'))\n        //     url = this.baseUrl + url  //FIXME\n        // this.d(\"transformed url\", url)\n        this.a(url, 'incorrect request options', {\n          url: url,\n          params: params,\n          body: body,\n          options: options,\n          method: method\n        });\n\n        var opts = _objectSpread2(_objectSpread2({}, {\n          url: url,\n          params: params,\n          body: body,\n          method: method\n        }), options || {}); // todo defaults?\n\n\n        return opts;\n      }\n    }]);\n\n    return Network;\n  }(Control);\n\n  function Vnode$2(tag, key, attrs, children, text, dom) {\n    return {\n      tag: tag,\n      key: key,\n      attrs: attrs,\n      children: children,\n      text: text,\n      dom: dom,\n      domSize: undefined,\n      state: undefined,\n      events: undefined,\n      instance: undefined\n    };\n  }\n\n  Vnode$2.normalize = function (node) {\n    if (Array.isArray(node)) return Vnode$2(\"[\", undefined, undefined, Vnode$2.normalizeChildren(node), undefined, undefined);\n    if (node == null || typeof node === \"boolean\") return null;\n    if (typeof node === \"object\") return node;\n    return Vnode$2(\"#\", undefined, undefined, String(node), undefined, undefined);\n  };\n\n  Vnode$2.normalizeChildren = function (input) {\n    var children = [];\n\n    if (input.length) {\n      var isKeyed = input[0] != null && input[0].key != null; // Note: this is a *very* perf-sensitive check.\n      // Fun fact: merging the loop like this is somehow faster than splitting\n      // it, noticeably so.\n\n      for (var i = 1; i < input.length; i++) {\n        if ((input[i] != null && input[i].key != null) !== isKeyed) {\n          throw new TypeError(\"Vnodes must either always have keys or never have keys!\");\n        }\n      }\n\n      for (var i = 0; i < input.length; i++) {\n        children[i] = Vnode$2.normalize(input[i]);\n      }\n    }\n\n    return children;\n  };\n\n  var vnode = Vnode$2;\n\n  var promise = {exports: {}};\n\n  /** @constructor */\n\n\n  var PromisePolyfill$2 = function (executor) {\n    if (!(this instanceof PromisePolyfill$2)) throw new Error(\"Promise must be called with `new`\");\n    if (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\");\n    var self = this,\n        resolvers = [],\n        rejectors = [],\n        resolveCurrent = handler(resolvers, true),\n        rejectCurrent = handler(rejectors, false);\n    var instance = self._instance = {\n      resolvers: resolvers,\n      rejectors: rejectors\n    };\n    var callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout;\n\n    function handler(list, shouldAbsorb) {\n      return function execute(value) {\n        var then;\n\n        try {\n          if (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n            if (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\");\n            executeOnce(then.bind(value));\n          } else {\n            callAsync(function () {\n              if (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value);\n\n              for (var i = 0; i < list.length; i++) list[i](value);\n\n              resolvers.length = 0, rejectors.length = 0;\n              instance.state = shouldAbsorb;\n\n              instance.retry = function () {\n                execute(value);\n              };\n            });\n          }\n        } catch (e) {\n          rejectCurrent(e);\n        }\n      };\n    }\n\n    function executeOnce(then) {\n      var runs = 0;\n\n      function run(fn) {\n        return function (value) {\n          if (runs++ > 0) return;\n          fn(value);\n        };\n      }\n\n      var onerror = run(rejectCurrent);\n\n      try {\n        then(run(resolveCurrent), onerror);\n      } catch (e) {\n        onerror(e);\n      }\n    }\n\n    executeOnce(executor);\n  };\n\n  PromisePolyfill$2.prototype.then = function (onFulfilled, onRejection) {\n    var self = this,\n        instance = self._instance;\n\n    function handle(callback, list, next, state) {\n      list.push(function (value) {\n        if (typeof callback !== \"function\") next(value);else try {\n          resolveNext(callback(value));\n        } catch (e) {\n          if (rejectNext) rejectNext(e);\n        }\n      });\n      if (typeof instance.retry === \"function\" && state === instance.state) instance.retry();\n    }\n\n    var resolveNext, rejectNext;\n    var promise = new PromisePolyfill$2(function (resolve, reject) {\n      resolveNext = resolve, rejectNext = reject;\n    });\n    handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false);\n    return promise;\n  };\n\n  PromisePolyfill$2.prototype.catch = function (onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  PromisePolyfill$2.prototype.finally = function (callback) {\n    return this.then(function (value) {\n      return PromisePolyfill$2.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return PromisePolyfill$2.resolve(callback()).then(function () {\n        return PromisePolyfill$2.reject(reason);\n      });\n    });\n  };\n\n  PromisePolyfill$2.resolve = function (value) {\n    if (value instanceof PromisePolyfill$2) return value;\n    return new PromisePolyfill$2(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  PromisePolyfill$2.reject = function (value) {\n    return new PromisePolyfill$2(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  PromisePolyfill$2.all = function (list) {\n    return new PromisePolyfill$2(function (resolve, reject) {\n      var total = list.length,\n          count = 0,\n          values = [];\n      if (list.length === 0) resolve([]);else for (var i = 0; i < list.length; i++) {\n        (function (i) {\n          function consume(value) {\n            count++;\n            values[i] = value;\n            if (count === total) resolve(values);\n          }\n\n          if (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n            list[i].then(consume, reject);\n          } else consume(list[i]);\n        })(i);\n      }\n    });\n  };\n\n  PromisePolyfill$2.race = function (list) {\n    return new PromisePolyfill$2(function (resolve, reject) {\n      for (var i = 0; i < list.length; i++) {\n        list[i].then(resolve, reject);\n      }\n    });\n  };\n\n  var polyfill = PromisePolyfill$2;\n\n  var PromisePolyfill$1 = polyfill;\n\n  if (typeof window !== \"undefined\") {\n    if (typeof window.Promise === \"undefined\") {\n      window.Promise = PromisePolyfill$1;\n    } else if (!window.Promise.prototype.finally) {\n      window.Promise.prototype.finally = PromisePolyfill$1.prototype.finally;\n    }\n\n    promise.exports = window.Promise;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    if (typeof commonjsGlobal.Promise === \"undefined\") {\n      commonjsGlobal.Promise = PromisePolyfill$1;\n    } else if (!commonjsGlobal.Promise.prototype.finally) {\n      commonjsGlobal.Promise.prototype.finally = PromisePolyfill$1.prototype.finally;\n    }\n\n    promise.exports = commonjsGlobal.Promise;\n  } else {\n    promise.exports = PromisePolyfill$1;\n  }\n\n  var Vnode$1 = vnode;\n\n  var render$2 = function ($window) {\n    var $doc = $window && $window.document;\n    var currentRedraw;\n    var nameSpace = {\n      svg: \"http://www.w3.org/2000/svg\",\n      math: \"http://www.w3.org/1998/Math/MathML\"\n    };\n\n    function getNameSpace(vnode) {\n      return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag];\n    } //sanity check to discourage people from doing `vnode.state = ...`\n\n\n    function checkState(vnode, original) {\n      if (vnode.state !== original) throw new Error(\"`vnode.state` must not be modified\");\n    } //Note: the hook is passed as the `this` argument to allow proxying the\n    //arguments without requiring a full array allocation to do so. It also\n    //takes advantage of the fact the current `vnode` is the first argument in\n    //all lifecycle methods.\n\n\n    function callHook(vnode) {\n      var original = vnode.state;\n\n      try {\n        return this.apply(original, arguments);\n      } finally {\n        checkState(vnode, original);\n      }\n    } // IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when\n    // inside an iframe. Catch and swallow this error, and heavy-handidly return null.\n\n\n    function activeElement() {\n      try {\n        return $doc.activeElement;\n      } catch (e) {\n        return null;\n      }\n    } //create\n\n\n    function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n      for (var i = start; i < end; i++) {\n        var vnode = vnodes[i];\n\n        if (vnode != null) {\n          createNode(parent, vnode, hooks, ns, nextSibling);\n        }\n      }\n    }\n\n    function createNode(parent, vnode, hooks, ns, nextSibling) {\n      var tag = vnode.tag;\n\n      if (typeof tag === \"string\") {\n        vnode.state = {};\n        if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);\n\n        switch (tag) {\n          case \"#\":\n            createText(parent, vnode, nextSibling);\n            break;\n\n          case \"<\":\n            createHTML(parent, vnode, ns, nextSibling);\n            break;\n\n          case \"[\":\n            createFragment(parent, vnode, hooks, ns, nextSibling);\n            break;\n\n          default:\n            createElement(parent, vnode, hooks, ns, nextSibling);\n        }\n      } else createComponent(parent, vnode, hooks, ns, nextSibling);\n    }\n\n    function createText(parent, vnode, nextSibling) {\n      vnode.dom = $doc.createTextNode(vnode.children);\n      insertNode(parent, vnode.dom, nextSibling);\n    }\n\n    var possibleParents = {\n      caption: \"table\",\n      thead: \"table\",\n      tbody: \"table\",\n      tfoot: \"table\",\n      tr: \"tbody\",\n      th: \"tr\",\n      td: \"tr\",\n      colgroup: \"table\",\n      col: \"colgroup\"\n    };\n\n    function createHTML(parent, vnode, ns, nextSibling) {\n      var match = vnode.children.match(/^\\s*?<(\\w+)/im) || []; // not using the proper parent makes the child element(s) vanish.\n      //     var div = document.createElement(\"div\")\n      //     div.innerHTML = \"<td>i</td><td>j</td>\"\n      //     console.log(div.innerHTML)\n      // --> \"ij\", no <td> in sight.\n\n      var temp = $doc.createElement(possibleParents[match[1]] || \"div\");\n\n      if (ns === \"http://www.w3.org/2000/svg\") {\n        temp.innerHTML = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + vnode.children + \"</svg>\";\n        temp = temp.firstChild;\n      } else {\n        temp.innerHTML = vnode.children;\n      }\n\n      vnode.dom = temp.firstChild;\n      vnode.domSize = temp.childNodes.length; // Capture nodes to remove, so we don't confuse them.\n\n      vnode.instance = [];\n      var fragment = $doc.createDocumentFragment();\n      var child;\n\n      while (child = temp.firstChild) {\n        vnode.instance.push(child);\n        fragment.appendChild(child);\n      }\n\n      insertNode(parent, fragment, nextSibling);\n    }\n\n    function createFragment(parent, vnode, hooks, ns, nextSibling) {\n      var fragment = $doc.createDocumentFragment();\n\n      if (vnode.children != null) {\n        var children = vnode.children;\n        createNodes(fragment, children, 0, children.length, hooks, null, ns);\n      }\n\n      vnode.dom = fragment.firstChild;\n      vnode.domSize = fragment.childNodes.length;\n      insertNode(parent, fragment, nextSibling);\n    }\n\n    function createElement(parent, vnode, hooks, ns, nextSibling) {\n      var tag = vnode.tag;\n      var attrs = vnode.attrs;\n      var is = attrs && attrs.is;\n      ns = getNameSpace(vnode) || ns;\n      var element = ns ? is ? $doc.createElementNS(ns, tag, {\n        is: is\n      }) : $doc.createElementNS(ns, tag) : is ? $doc.createElement(tag, {\n        is: is\n      }) : $doc.createElement(tag);\n      vnode.dom = element;\n\n      if (attrs != null) {\n        setAttrs(vnode, attrs, ns);\n      }\n\n      insertNode(parent, element, nextSibling);\n\n      if (!maybeSetContentEditable(vnode)) {\n        if (vnode.text != null) {\n          if (vnode.text !== \"\") element.textContent = vnode.text;else vnode.children = [Vnode$1(\"#\", undefined, undefined, vnode.text, undefined, undefined)];\n        }\n\n        if (vnode.children != null) {\n          var children = vnode.children;\n          createNodes(element, children, 0, children.length, hooks, null, ns);\n          if (vnode.tag === \"select\" && attrs != null) setLateSelectAttrs(vnode, attrs);\n        }\n      }\n    }\n\n    function initComponent(vnode, hooks) {\n      var sentinel;\n\n      if (typeof vnode.tag.view === \"function\") {\n        vnode.state = Object.create(vnode.tag);\n        sentinel = vnode.state.view;\n        if (sentinel.$$reentrantLock$$ != null) return;\n        sentinel.$$reentrantLock$$ = true;\n      } else {\n        vnode.state = void 0;\n        sentinel = vnode.tag;\n        if (sentinel.$$reentrantLock$$ != null) return;\n        sentinel.$$reentrantLock$$ = true;\n        vnode.state = vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\" ? new vnode.tag(vnode) : vnode.tag(vnode);\n      }\n\n      initLifecycle(vnode.state, vnode, hooks);\n      if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);\n      vnode.instance = Vnode$1.normalize(callHook.call(vnode.state.view, vnode));\n      if (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\");\n      sentinel.$$reentrantLock$$ = null;\n    }\n\n    function createComponent(parent, vnode, hooks, ns, nextSibling) {\n      initComponent(vnode, hooks);\n\n      if (vnode.instance != null) {\n        createNode(parent, vnode.instance, hooks, ns, nextSibling);\n        vnode.dom = vnode.instance.dom;\n        vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0;\n      } else {\n        vnode.domSize = 0;\n      }\n    } //update\n\n    /**\n     * @param {Element|Fragment} parent - the parent element\n     * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for\n     *                               this part of the tree\n     * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.\n     * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)\n     * @param {Element | null} nextSibling - the next DOM node if we're dealing with a\n     *                                       fragment that is not the last item in its\n     *                                       parent\n     * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any\n     * @returns void\n     */\n    // This function diffs and patches lists of vnodes, both keyed and unkeyed.\n    //\n    // We will:\n    //\n    // 1. describe its general structure\n    // 2. focus on the diff algorithm optimizations\n    // 3. discuss DOM node operations.\n    // ## Overview:\n    //\n    // The updateNodes() function:\n    // - deals with trivial cases\n    // - determines whether the lists are keyed or unkeyed based on the first non-null node\n    //   of each list.\n    // - diffs them and patches the DOM if needed (that's the brunt of the code)\n    // - manages the leftovers: after diffing, are there:\n    //   - old nodes left to remove?\n    // \t - new nodes to insert?\n    // \t deal with them!\n    //\n    // The lists are only iterated over once, with an exception for the nodes in `old` that\n    // are visited in the fourth part of the diff and in the `removeNodes` loop.\n    // ## Diffing\n    //\n    // Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837\n    // may be good for context on longest increasing subsequence-based logic for moving nodes.\n    //\n    // In order to diff keyed lists, one has to\n    //\n    // 1) match nodes in both lists, per key, and update them accordingly\n    // 2) create the nodes present in the new list, but absent in the old one\n    // 3) remove the nodes present in the old list, but absent in the new one\n    // 4) figure out what nodes in 1) to move in order to minimize the DOM operations.\n    //\n    // To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate\n    // over the new list and for each new vnode, find the corresponding vnode in the old list using\n    // the map.\n    // 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new\n    // and must be created.\n    // For the removals, we actually remove the nodes that have been updated from the old list.\n    // The nodes that remain in that list after 1) and 2) have been performed can be safely removed.\n    // The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)\n    // algorithm.\n    //\n    // the longest increasing subsequence is the list of nodes that can remain in place. Imagine going\n    // from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices\n    // corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would\n    //  match the above lists, for example).\n    //\n    // In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We\n    // can update those nodes without moving them, and only call `insertNode` on `4` and `5`.\n    //\n    // @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually\n    // the longest increasing subsequence *of old nodes still present in the new list*).\n    //\n    // It is a general algorithm that is fireproof in all circumstances, but it requires the allocation\n    // and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,\n    // the `LIS` and a temporary one to create the LIS).\n    //\n    // So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of\n    // the LIS and can be updated without moving them.\n    //\n    // If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with\n    // the exception of the last node if the list is fully reversed).\n    //\n    // ## Finding the next sibling.\n    //\n    // `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.\n    // When the list is being traversed top-down, at any index, the DOM nodes up to the previous\n    // vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old\n    // list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.\n    //\n    // In the other scenarios (swaps, upwards traversal, map-based diff),\n    // the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the\n    // bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node\n    // as the next sibling (cached in the `nextSibling` variable).\n    // ## DOM node moves\n    //\n    // In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,\n    // this is not the case if the node moved (second and fourth part of the diff algo). We move\n    // the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`\n    // variable rather than fetching it using `getNextSibling()`.\n    //\n    // The fourth part of the diff currently inserts nodes unconditionally, leading to issues\n    // like #1791 and #1999. We need to be smarter about those situations where adjascent old\n    // nodes remain together in the new list in a way that isn't covered by parts one and\n    // three of the diff algo.\n\n\n    function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {\n      if (old === vnodes || old == null && vnodes == null) return;else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns);else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length);else {\n        var isOldKeyed = old[0] != null && old[0].key != null;\n        var isKeyed = vnodes[0] != null && vnodes[0].key != null;\n        var start = 0,\n            oldStart = 0;\n        if (!isOldKeyed) while (oldStart < old.length && old[oldStart] == null) oldStart++;\n        if (!isKeyed) while (start < vnodes.length && vnodes[start] == null) start++;\n        if (isKeyed === null && isOldKeyed == null) return; // both lists are full of nulls\n\n        if (isOldKeyed !== isKeyed) {\n          removeNodes(parent, old, oldStart, old.length);\n          createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);\n        } else if (!isKeyed) {\n          // Don't index past the end of either list (causes deopts).\n          var commonLength = old.length < vnodes.length ? old.length : vnodes.length; // Rewind if necessary to the first non-null index on either side.\n          // We could alternatively either explicitly create or remove nodes when `start !== oldStart`\n          // but that would be optimizing for sparse lists which are more rare than dense ones.\n\n          start = start < oldStart ? start : oldStart;\n\n          for (; start < commonLength; start++) {\n            o = old[start];\n            v = vnodes[start];\n            if (o === v || o == null && v == null) continue;else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling));else if (v == null) removeNode(parent, o);else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns);\n          }\n\n          if (old.length > commonLength) removeNodes(parent, old, start, old.length);\n          if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);\n        } else {\n          // keyed diff\n          var oldEnd = old.length - 1,\n              end = vnodes.length - 1,\n              map,\n              o,\n              v,\n              oe,\n              ve,\n              topSibling; // bottom-up\n\n          while (oldEnd >= oldStart && end >= start) {\n            oe = old[oldEnd];\n            ve = vnodes[end];\n            if (oe.key !== ve.key) break;\n            if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);\n            if (ve.dom != null) nextSibling = ve.dom;\n            oldEnd--, end--;\n          } // top-down\n\n\n          while (oldEnd >= oldStart && end >= start) {\n            o = old[oldStart];\n            v = vnodes[start];\n            if (o.key !== v.key) break;\n            oldStart++, start++;\n            if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns);\n          } // swaps and list reversals\n\n\n          while (oldEnd >= oldStart && end >= start) {\n            if (start === end) break;\n            if (o.key !== ve.key || oe.key !== v.key) break;\n            topSibling = getNextSibling(old, oldStart, nextSibling);\n            moveNodes(parent, oe, topSibling);\n            if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns);\n            if (++start <= --end) moveNodes(parent, o, nextSibling);\n            if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns);\n            if (ve.dom != null) nextSibling = ve.dom;\n            oldStart++;\n            oldEnd--;\n            oe = old[oldEnd];\n            ve = vnodes[end];\n            o = old[oldStart];\n            v = vnodes[start];\n          } // bottom up once again\n\n\n          while (oldEnd >= oldStart && end >= start) {\n            if (oe.key !== ve.key) break;\n            if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);\n            if (ve.dom != null) nextSibling = ve.dom;\n            oldEnd--, end--;\n            oe = old[oldEnd];\n            ve = vnodes[end];\n          }\n\n          if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1);else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);else {\n            // inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul\n            var originalNextSibling = nextSibling,\n                vnodesLength = end - start + 1,\n                oldIndices = new Array(vnodesLength),\n                li = 0,\n                i = 0,\n                pos = 2147483647,\n                matched = 0,\n                map,\n                lisIndices;\n\n            for (i = 0; i < vnodesLength; i++) oldIndices[i] = -1;\n\n            for (i = end; i >= start; i--) {\n              if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1);\n              ve = vnodes[i];\n              var oldIndex = map[ve.key];\n\n              if (oldIndex != null) {\n                pos = oldIndex < pos ? oldIndex : -1; // becomes -1 if nodes were re-ordered\n\n                oldIndices[i - start] = oldIndex;\n                oe = old[oldIndex];\n                old[oldIndex] = null;\n                if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);\n                if (ve.dom != null) nextSibling = ve.dom;\n                matched++;\n              }\n            }\n\n            nextSibling = originalNextSibling;\n            if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1);\n            if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);else {\n              if (pos === -1) {\n                // the indices of the indices of the items that are part of the\n                // longest increasing subsequence in the oldIndices list\n                lisIndices = makeLisIndices(oldIndices);\n                li = lisIndices.length - 1;\n\n                for (i = end; i >= start; i--) {\n                  v = vnodes[i];\n                  if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);else {\n                    if (lisIndices[li] === i - start) li--;else moveNodes(parent, v, nextSibling);\n                  }\n                  if (v.dom != null) nextSibling = vnodes[i].dom;\n                }\n              } else {\n                for (i = end; i >= start; i--) {\n                  v = vnodes[i];\n                  if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);\n                  if (v.dom != null) nextSibling = vnodes[i].dom;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function updateNode(parent, old, vnode, hooks, nextSibling, ns) {\n      var oldTag = old.tag,\n          tag = vnode.tag;\n\n      if (oldTag === tag) {\n        vnode.state = old.state;\n        vnode.events = old.events;\n        if (shouldNotUpdate(vnode, old)) return;\n\n        if (typeof oldTag === \"string\") {\n          if (vnode.attrs != null) {\n            updateLifecycle(vnode.attrs, vnode, hooks);\n          }\n\n          switch (oldTag) {\n            case \"#\":\n              updateText(old, vnode);\n              break;\n\n            case \"<\":\n              updateHTML(parent, old, vnode, ns, nextSibling);\n              break;\n\n            case \"[\":\n              updateFragment(parent, old, vnode, hooks, nextSibling, ns);\n              break;\n\n            default:\n              updateElement(old, vnode, hooks, ns);\n          }\n        } else updateComponent(parent, old, vnode, hooks, nextSibling, ns);\n      } else {\n        removeNode(parent, old);\n        createNode(parent, vnode, hooks, ns, nextSibling);\n      }\n    }\n\n    function updateText(old, vnode) {\n      if (old.children.toString() !== vnode.children.toString()) {\n        old.dom.nodeValue = vnode.children;\n      }\n\n      vnode.dom = old.dom;\n    }\n\n    function updateHTML(parent, old, vnode, ns, nextSibling) {\n      if (old.children !== vnode.children) {\n        removeHTML(parent, old);\n        createHTML(parent, vnode, ns, nextSibling);\n      } else {\n        vnode.dom = old.dom;\n        vnode.domSize = old.domSize;\n        vnode.instance = old.instance;\n      }\n    }\n\n    function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {\n      updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns);\n      var domSize = 0,\n          children = vnode.children;\n      vnode.dom = null;\n\n      if (children != null) {\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n\n          if (child != null && child.dom != null) {\n            if (vnode.dom == null) vnode.dom = child.dom;\n            domSize += child.domSize || 1;\n          }\n        }\n\n        if (domSize !== 1) vnode.domSize = domSize;\n      }\n    }\n\n    function updateElement(old, vnode, hooks, ns) {\n      var element = vnode.dom = old.dom;\n      ns = getNameSpace(vnode) || ns;\n\n      if (vnode.tag === \"textarea\") {\n        if (vnode.attrs == null) vnode.attrs = {};\n\n        if (vnode.text != null) {\n          vnode.attrs.value = vnode.text; //FIXME handle multiple children\n\n          vnode.text = undefined;\n        }\n      }\n\n      updateAttrs(vnode, old.attrs, vnode.attrs, ns);\n\n      if (!maybeSetContentEditable(vnode)) {\n        if (old.text != null && vnode.text != null && vnode.text !== \"\") {\n          if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text;\n        } else {\n          if (old.text != null) old.children = [Vnode$1(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)];\n          if (vnode.text != null) vnode.children = [Vnode$1(\"#\", undefined, undefined, vnode.text, undefined, undefined)];\n          updateNodes(element, old.children, vnode.children, hooks, null, ns);\n        }\n      }\n    }\n\n    function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {\n      vnode.instance = Vnode$1.normalize(callHook.call(vnode.state.view, vnode));\n      if (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\");\n      updateLifecycle(vnode.state, vnode, hooks);\n      if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);\n\n      if (vnode.instance != null) {\n        if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling);else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns);\n        vnode.dom = vnode.instance.dom;\n        vnode.domSize = vnode.instance.domSize;\n      } else if (old.instance != null) {\n        removeNode(parent, old.instance);\n        vnode.dom = undefined;\n        vnode.domSize = 0;\n      } else {\n        vnode.dom = old.dom;\n        vnode.domSize = old.domSize;\n      }\n    }\n\n    function getKeyMap(vnodes, start, end) {\n      var map = Object.create(null);\n\n      for (; start < end; start++) {\n        var vnode = vnodes[start];\n\n        if (vnode != null) {\n          var key = vnode.key;\n          if (key != null) map[key] = start;\n        }\n      }\n\n      return map;\n    } // Lifted from ivi https://github.com/ivijs/ivi/\n    // takes a list of unique numbers (-1 is special and can\n    // occur multiple times) and returns an array with the indices\n    // of the items that are part of the longest increasing\n    // subsequece\n\n\n    var lisTemp = [];\n\n    function makeLisIndices(a) {\n      var result = [0];\n      var u = 0,\n          v = 0,\n          i = 0;\n      var il = lisTemp.length = a.length;\n\n      for (var i = 0; i < il; i++) lisTemp[i] = a[i];\n\n      for (var i = 0; i < il; ++i) {\n        if (a[i] === -1) continue;\n        var j = result[result.length - 1];\n\n        if (a[j] < a[i]) {\n          lisTemp[i] = j;\n          result.push(i);\n          continue;\n        }\n\n        u = 0;\n        v = result.length - 1;\n\n        while (u < v) {\n          // Fast integer average without overflow.\n          // eslint-disable-next-line no-bitwise\n          var c = (u >>> 1) + (v >>> 1) + (u & v & 1);\n\n          if (a[result[c]] < a[i]) {\n            u = c + 1;\n          } else {\n            v = c;\n          }\n        }\n\n        if (a[i] < a[result[u]]) {\n          if (u > 0) lisTemp[i] = result[u - 1];\n          result[u] = i;\n        }\n      }\n\n      u = result.length;\n      v = result[u - 1];\n\n      while (u-- > 0) {\n        result[u] = v;\n        v = lisTemp[v];\n      }\n\n      lisTemp.length = 0;\n      return result;\n    }\n\n    function getNextSibling(vnodes, i, nextSibling) {\n      for (; i < vnodes.length; i++) {\n        if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom;\n      }\n\n      return nextSibling;\n    } // This covers a really specific edge case:\n    // - Parent node is keyed and contains child\n    // - Child is removed, returns unresolved promise in `onbeforeremove`\n    // - Parent node is moved in keyed diff\n    // - Remaining children still need moved appropriately\n    //\n    // Ideally, I'd track removed nodes as well, but that introduces a lot more\n    // complexity and I'm not exactly interested in doing that.\n\n\n    function moveNodes(parent, vnode, nextSibling) {\n      var frag = $doc.createDocumentFragment();\n      moveChildToFrag(parent, frag, vnode);\n      insertNode(parent, frag, nextSibling);\n    }\n\n    function moveChildToFrag(parent, frag, vnode) {\n      // Dodge the recursion overhead in a few of the most common cases.\n      while (vnode.dom != null && vnode.dom.parentNode === parent) {\n        if (typeof vnode.tag !== \"string\") {\n          vnode = vnode.instance;\n          if (vnode != null) continue;\n        } else if (vnode.tag === \"<\") {\n          for (var i = 0; i < vnode.instance.length; i++) {\n            frag.appendChild(vnode.instance[i]);\n          }\n        } else if (vnode.tag !== \"[\") {\n          // Don't recurse for text nodes *or* elements, just fragments\n          frag.appendChild(vnode.dom);\n        } else if (vnode.children.length === 1) {\n          vnode = vnode.children[0];\n          if (vnode != null) continue;\n        } else {\n          for (var i = 0; i < vnode.children.length; i++) {\n            var child = vnode.children[i];\n            if (child != null) moveChildToFrag(parent, frag, child);\n          }\n        }\n\n        break;\n      }\n    }\n\n    function insertNode(parent, dom, nextSibling) {\n      if (nextSibling != null) parent.insertBefore(dom, nextSibling);else parent.appendChild(dom);\n    }\n\n    function maybeSetContentEditable(vnode) {\n      if (vnode.attrs == null || vnode.attrs.contenteditable == null && // attribute\n      vnode.attrs.contentEditable == null // property\n      ) return false;\n      var children = vnode.children;\n\n      if (children != null && children.length === 1 && children[0].tag === \"<\") {\n        var content = children[0].children;\n        if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content;\n      } else if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\");\n\n      return true;\n    } //remove\n\n\n    function removeNodes(parent, vnodes, start, end) {\n      for (var i = start; i < end; i++) {\n        var vnode = vnodes[i];\n        if (vnode != null) removeNode(parent, vnode);\n      }\n    }\n\n    function removeNode(parent, vnode) {\n      var mask = 0;\n      var original = vnode.state;\n      var stateResult, attrsResult;\n\n      if (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeremove === \"function\") {\n        var result = callHook.call(vnode.state.onbeforeremove, vnode);\n\n        if (result != null && typeof result.then === \"function\") {\n          mask = 1;\n          stateResult = result;\n        }\n      }\n\n      if (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n        var result = callHook.call(vnode.attrs.onbeforeremove, vnode);\n\n        if (result != null && typeof result.then === \"function\") {\n          // eslint-disable-next-line no-bitwise\n          mask |= 2;\n          attrsResult = result;\n        }\n      }\n\n      checkState(vnode, original); // If we can, try to fast-path it and avoid all the overhead of awaiting\n\n      if (!mask) {\n        onremove(vnode);\n        removeChild(parent, vnode);\n      } else {\n        if (stateResult != null) {\n          var next = function () {\n            // eslint-disable-next-line no-bitwise\n            if (mask & 1) {\n              mask &= 2;\n              if (!mask) reallyRemove();\n            }\n          };\n\n          stateResult.then(next, next);\n        }\n\n        if (attrsResult != null) {\n          var next = function () {\n            // eslint-disable-next-line no-bitwise\n            if (mask & 2) {\n              mask &= 1;\n              if (!mask) reallyRemove();\n            }\n          };\n\n          attrsResult.then(next, next);\n        }\n      }\n\n      function reallyRemove() {\n        checkState(vnode, original);\n        onremove(vnode);\n        removeChild(parent, vnode);\n      }\n    }\n\n    function removeHTML(parent, vnode) {\n      for (var i = 0; i < vnode.instance.length; i++) {\n        parent.removeChild(vnode.instance[i]);\n      }\n    }\n\n    function removeChild(parent, vnode) {\n      // Dodge the recursion overhead in a few of the most common cases.\n      while (vnode.dom != null && vnode.dom.parentNode === parent) {\n        if (typeof vnode.tag !== \"string\") {\n          vnode = vnode.instance;\n          if (vnode != null) continue;\n        } else if (vnode.tag === \"<\") {\n          removeHTML(parent, vnode);\n        } else {\n          if (vnode.tag !== \"[\") {\n            parent.removeChild(vnode.dom);\n            if (!Array.isArray(vnode.children)) break;\n          }\n\n          if (vnode.children.length === 1) {\n            vnode = vnode.children[0];\n            if (vnode != null) continue;\n          } else {\n            for (var i = 0; i < vnode.children.length; i++) {\n              var child = vnode.children[i];\n              if (child != null) removeChild(parent, child);\n            }\n          }\n        }\n\n        break;\n      }\n    }\n\n    function onremove(vnode) {\n      if (typeof vnode.tag !== \"string\" && typeof vnode.state.onremove === \"function\") callHook.call(vnode.state.onremove, vnode);\n      if (vnode.attrs && typeof vnode.attrs.onremove === \"function\") callHook.call(vnode.attrs.onremove, vnode);\n\n      if (typeof vnode.tag !== \"string\") {\n        if (vnode.instance != null) onremove(vnode.instance);\n      } else {\n        var children = vnode.children;\n\n        if (Array.isArray(children)) {\n          for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            if (child != null) onremove(child);\n          }\n        }\n      }\n    } //attrs\n\n\n    function setAttrs(vnode, attrs, ns) {\n      for (var key in attrs) {\n        setAttr(vnode, key, null, attrs[key], ns);\n      }\n    }\n\n    function setAttr(vnode, key, old, value, ns) {\n      if (key === \"key\" || key === \"is\" || value == null || isLifecycleMethod(key) || old === value && !isFormAttribute(vnode, key) && typeof value !== \"object\") return;\n      if (key[0] === \"o\" && key[1] === \"n\") return updateEvent(vnode, key, value);\n      if (key.slice(0, 6) === \"xlink:\") vnode.dom.setAttributeNS(\"http://www.w3.org/1999/xlink\", key.slice(6), value);else if (key === \"style\") updateStyle(vnode.dom, old, value);else if (hasPropertyKey(vnode, key, ns)) {\n        if (key === \"value\") {\n          // Only do the coercion if we're actually going to check the value.\n\n          /* eslint-disable no-implicit-coercion */\n          //setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n          if ((vnode.tag === \"input\" || vnode.tag === \"textarea\") && vnode.dom.value === \"\" + value && vnode.dom === activeElement()) return; //setting select[value] to same value while having select open blinks select dropdown in Chrome\n\n          if (vnode.tag === \"select\" && old !== null && vnode.dom.value === \"\" + value) return; //setting option[value] to same value while having select open blinks select dropdown in Chrome\n\n          if (vnode.tag === \"option\" && old !== null && vnode.dom.value === \"\" + value) return;\n          /* eslint-enable no-implicit-coercion */\n        } // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.\n\n\n        if (vnode.tag === \"input\" && key === \"type\") vnode.dom.setAttribute(key, value);else vnode.dom[key] = value;\n      } else {\n        if (typeof value === \"boolean\") {\n          if (value) vnode.dom.setAttribute(key, \"\");else vnode.dom.removeAttribute(key);\n        } else vnode.dom.setAttribute(key === \"className\" ? \"class\" : key, value);\n      }\n    }\n\n    function removeAttr(vnode, key, old, ns) {\n      if (key === \"key\" || key === \"is\" || old == null || isLifecycleMethod(key)) return;\n      if (key[0] === \"o\" && key[1] === \"n\" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined);else if (key === \"style\") updateStyle(vnode.dom, old, null);else if (hasPropertyKey(vnode, key, ns) && key !== \"className\" && !(key === \"value\" && (vnode.tag === \"option\" || vnode.tag === \"select\" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement())) && !(vnode.tag === \"input\" && key === \"type\")) {\n        vnode.dom[key] = null;\n      } else {\n        var nsLastIndex = key.indexOf(\":\");\n        if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1);\n        if (old !== false) vnode.dom.removeAttribute(key === \"className\" ? \"class\" : key);\n      }\n    }\n\n    function setLateSelectAttrs(vnode, attrs) {\n      if (\"value\" in attrs) {\n        if (attrs.value === null) {\n          if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null;\n        } else {\n          var normalized = \"\" + attrs.value; // eslint-disable-line no-implicit-coercion\n\n          if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) {\n            vnode.dom.value = normalized;\n          }\n        }\n      }\n\n      if (\"selectedIndex\" in attrs) setAttr(vnode, \"selectedIndex\", null, attrs.selectedIndex, undefined);\n    }\n\n    function updateAttrs(vnode, old, attrs, ns) {\n      if (attrs != null) {\n        for (var key in attrs) {\n          setAttr(vnode, key, old && old[key], attrs[key], ns);\n        }\n      }\n\n      var val;\n\n      if (old != null) {\n        for (var key in old) {\n          if ((val = old[key]) != null && (attrs == null || attrs[key] == null)) {\n            removeAttr(vnode, key, val, ns);\n          }\n        }\n      }\n    }\n\n    function isFormAttribute(vnode, attr) {\n      return attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === activeElement() || vnode.tag === \"option\" && vnode.dom.parentNode === $doc.activeElement;\n    }\n\n    function isLifecycleMethod(attr) {\n      return attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\";\n    }\n\n    function hasPropertyKey(vnode, key, ns) {\n      // Filter out namespaced keys\n      return ns === undefined && ( // If it's a custom element, just keep it.\n      vnode.tag.indexOf(\"-\") > -1 || vnode.attrs != null && vnode.attrs.is || // If it's a normal element, let's try to avoid a few browser bugs.\n      key !== \"href\" && key !== \"list\" && key !== \"form\" && key !== \"width\" && key !== \"height\" // && key !== \"type\"\n      // Defer the property check until *after* we check everything.\n      ) && key in vnode.dom;\n    } //style\n\n\n    var uppercaseRegex = /[A-Z]/g;\n\n    function toLowerCase(capital) {\n      return \"-\" + capital.toLowerCase();\n    }\n\n    function normalizeKey(key) {\n      return key[0] === \"-\" && key[1] === \"-\" ? key : key === \"cssFloat\" ? \"float\" : key.replace(uppercaseRegex, toLowerCase);\n    }\n\n    function updateStyle(element, old, style) {\n      if (old === style) ; else if (style == null) {\n        // New style is missing, just clear it.\n        element.style.cssText = \"\";\n      } else if (typeof style !== \"object\") {\n        // New style is a string, let engine deal with patching.\n        element.style.cssText = style;\n      } else if (old == null || typeof old !== \"object\") {\n        // `old` is missing or a string, `style` is an object.\n        element.style.cssText = \"\"; // Add new style properties\n\n        for (var key in style) {\n          var value = style[key];\n          if (value != null) element.style.setProperty(normalizeKey(key), String(value));\n        }\n      } else {\n        // Both old & new are (different) objects.\n        // Update style properties that have changed\n        for (var key in style) {\n          var value = style[key];\n\n          if (value != null && (value = String(value)) !== String(old[key])) {\n            element.style.setProperty(normalizeKey(key), value);\n          }\n        } // Remove style properties that no longer exist\n\n\n        for (var key in old) {\n          if (old[key] != null && style[key] == null) {\n            element.style.removeProperty(normalizeKey(key));\n          }\n        }\n      }\n    } // Here's an explanation of how this works:\n    // 1. The event names are always (by design) prefixed by `on`.\n    // 2. The EventListener interface accepts either a function or an object\n    //    with a `handleEvent` method.\n    // 3. The object does not inherit from `Object.prototype`, to avoid\n    //    any potential interference with that (e.g. setters).\n    // 4. The event name is remapped to the handler before calling it.\n    // 5. In function-based event handlers, `ev.target === this`. We replicate\n    //    that below.\n    // 6. In function-based event handlers, `return false` prevents the default\n    //    action and stops event propagation. We replicate that below.\n\n\n    function EventDict() {\n      // Save this, so the current redraw is correctly tracked.\n      this._ = currentRedraw;\n    }\n\n    EventDict.prototype = Object.create(null);\n\n    EventDict.prototype.handleEvent = function (ev) {\n      var handler = this[\"on\" + ev.type];\n      var result;\n      if (typeof handler === \"function\") result = handler.call(ev.currentTarget, ev);else if (typeof handler.handleEvent === \"function\") handler.handleEvent(ev);\n      if (this._ && ev.redraw !== false) (0, this._)();\n\n      if (result === false) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }; //event\n\n\n    function updateEvent(vnode, key, value) {\n      if (vnode.events != null) {\n        if (vnode.events[key] === value) return;\n\n        if (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n          if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false);\n          vnode.events[key] = value;\n        } else {\n          if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false);\n          vnode.events[key] = undefined;\n        }\n      } else if (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n        vnode.events = new EventDict();\n        vnode.dom.addEventListener(key.slice(2), vnode.events, false);\n        vnode.events[key] = value;\n      }\n    } //lifecycle\n\n\n    function initLifecycle(source, vnode, hooks) {\n      if (typeof source.oninit === \"function\") callHook.call(source.oninit, vnode);\n      if (typeof source.oncreate === \"function\") hooks.push(callHook.bind(source.oncreate, vnode));\n    }\n\n    function updateLifecycle(source, vnode, hooks) {\n      if (typeof source.onupdate === \"function\") hooks.push(callHook.bind(source.onupdate, vnode));\n    }\n\n    function shouldNotUpdate(vnode, old) {\n      do {\n        if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") {\n          var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old);\n          if (force !== undefined && !force) break;\n        }\n\n        if (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeupdate === \"function\") {\n          var force = callHook.call(vnode.state.onbeforeupdate, vnode, old);\n          if (force !== undefined && !force) break;\n        }\n\n        return false;\n      } while (false); // eslint-disable-line no-constant-condition\n\n\n      vnode.dom = old.dom;\n      vnode.domSize = old.domSize;\n      vnode.instance = old.instance; // One would think having the actual latest attributes would be ideal,\n      // but it doesn't let us properly diff based on our current internal\n      // representation. We have to save not only the old DOM info, but also\n      // the attributes used to create it, as we diff *that*, not against the\n      // DOM directly (with a few exceptions in `setAttr`). And, of course, we\n      // need to save the children and text as they are conceptually not\n      // unlike special \"attributes\" internally.\n\n      vnode.attrs = old.attrs;\n      vnode.children = old.children;\n      vnode.text = old.text;\n      return true;\n    }\n\n    return function (dom, vnodes, redraw) {\n      if (!dom) throw new TypeError(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\");\n      var hooks = [];\n      var active = activeElement();\n      var namespace = dom.namespaceURI; // First time rendering into a node clears it out\n\n      if (dom.vnodes == null) dom.textContent = \"\";\n      vnodes = Vnode$1.normalizeChildren(Array.isArray(vnodes) ? vnodes : [vnodes]);\n      var prevRedraw = currentRedraw;\n\n      try {\n        currentRedraw = typeof redraw === \"function\" ? redraw : undefined;\n        updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === \"http://www.w3.org/1999/xhtml\" ? undefined : namespace);\n      } finally {\n        currentRedraw = prevRedraw;\n      }\n\n      dom.vnodes = vnodes; // `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement\n\n      if (active != null && activeElement() !== active && typeof active.focus === \"function\") active.focus();\n\n      for (var i = 0; i < hooks.length; i++) hooks[i]();\n    };\n  };\n\n  var render$1 = render$2(window);\n\n  var Vnode = vnode;\n\n  var mountRedraw$2 = function (render, schedule, console) {\n    var subscriptions = [];\n    var rendering = false;\n    var pending = false;\n\n    function sync() {\n      if (rendering) throw new Error(\"Nested m.redraw.sync() call\");\n      rendering = true;\n\n      for (var i = 0; i < subscriptions.length; i += 2) {\n        try {\n          render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      rendering = false;\n    }\n\n    function redraw() {\n      if (!pending) {\n        pending = true;\n        schedule(function () {\n          pending = false;\n          sync();\n        });\n      }\n    }\n\n    redraw.sync = sync;\n\n    function mount(root, component) {\n      if (component != null && component.view == null && typeof component !== \"function\") {\n        throw new TypeError(\"m.mount(element, component) expects a component, not a vnode\");\n      }\n\n      var index = subscriptions.indexOf(root);\n\n      if (index >= 0) {\n        subscriptions.splice(index, 2);\n        render(root, [], redraw);\n      }\n\n      if (component != null) {\n        subscriptions.push(root, component);\n        render(root, Vnode(component), redraw);\n      }\n    }\n\n    return {\n      mount: mount,\n      redraw: redraw\n    };\n  };\n\n  var render = render$1;\n  var mountRedraw$1 = mountRedraw$2(render, requestAnimationFrame, console);\n\n  var build$1 = function (object) {\n    if (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\";\n    var args = [];\n\n    for (var key in object) {\n      destructure(key, object[key]);\n    }\n\n    return args.join(\"&\");\n\n    function destructure(key, value) {\n      if (Array.isArray(value)) {\n        for (var i = 0; i < value.length; i++) {\n          destructure(key + \"[\" + i + \"]\", value[i]);\n        }\n      } else if (Object.prototype.toString.call(value) === \"[object Object]\") {\n        for (var i in value) {\n          destructure(key + \"[\" + i + \"]\", value[i]);\n        }\n      } else args.push(encodeURIComponent(key) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"));\n    }\n  };\n\n  var assign$1 = Object.assign || function (target, source) {\n    if (source) Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n  };\n\n  var buildQueryString = build$1;\n  var assign = assign$1; // Returns `path` from `template` + `params`\n\n  var build = function (template, params) {\n    if (/:([^\\/\\.-]+)(\\.{3})?:/.test(template)) {\n      throw new SyntaxError(\"Template parameter names *must* be separated\");\n    }\n\n    if (params == null) return template;\n    var queryIndex = template.indexOf(\"?\");\n    var hashIndex = template.indexOf(\"#\");\n    var queryEnd = hashIndex < 0 ? template.length : hashIndex;\n    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;\n    var path = template.slice(0, pathEnd);\n    var query = {};\n    assign(query, params);\n    var resolved = path.replace(/:([^\\/\\.-]+)(\\.{3})?/g, function (m, key, variadic) {\n      delete query[key]; // If no such parameter exists, don't interpolate it.\n\n      if (params[key] == null) return m; // Escape normal parameters, but not variadic ones.\n\n      return variadic ? params[key] : encodeURIComponent(String(params[key]));\n    }); // In case the template substitution adds new query/hash parameters.\n\n    var newQueryIndex = resolved.indexOf(\"?\");\n    var newHashIndex = resolved.indexOf(\"#\");\n    var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex;\n    var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex;\n    var result = resolved.slice(0, newPathEnd);\n    if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd);\n    if (newQueryIndex >= 0) result += (queryIndex < 0 ? \"?\" : \"&\") + resolved.slice(newQueryIndex, newQueryEnd);\n    var querystring = buildQueryString(query);\n    if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? \"?\" : \"&\") + querystring;\n    if (hashIndex >= 0) result += template.slice(hashIndex);\n    if (newHashIndex >= 0) result += (hashIndex < 0 ? \"\" : \"&\") + resolved.slice(newHashIndex);\n    return result;\n  };\n\n  var buildPathname = build;\n\n  var request = function ($window, Promise, oncompletion) {\n    var callbackCount = 0;\n\n    function PromiseProxy(executor) {\n      return new Promise(executor);\n    } // In case the global Promise is some userland library's where they rely on\n    // `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or\n    // similar. Let's *not* break them.\n\n\n    PromiseProxy.prototype = Promise.prototype;\n    PromiseProxy.__proto__ = Promise; // eslint-disable-line no-proto\n\n    function makeRequest(factory) {\n      return function (url, args) {\n        if (typeof url !== \"string\") {\n          args = url;\n          url = url.url;\n        } else if (args == null) args = {};\n\n        var promise = new Promise(function (resolve, reject) {\n          factory(buildPathname(url, args.params), args, function (data) {\n            if (typeof args.type === \"function\") {\n              if (Array.isArray(data)) {\n                for (var i = 0; i < data.length; i++) {\n                  data[i] = new args.type(data[i]);\n                }\n              } else data = new args.type(data);\n            }\n\n            resolve(data);\n          }, reject);\n        });\n        if (args.background === true) return promise;\n        var count = 0;\n\n        function complete() {\n          if (--count === 0 && typeof oncompletion === \"function\") oncompletion();\n        }\n\n        return wrap(promise);\n\n        function wrap(promise) {\n          var then = promise.then; // Set the constructor, so engines know to not await or resolve\n          // this as a native promise. At the time of writing, this is\n          // only necessary for V8, but their behavior is the correct\n          // behavior per spec. See this spec issue for more details:\n          // https://github.com/tc39/ecma262/issues/1577. Also, see the\n          // corresponding comment in `request/tests/test-request.js` for\n          // a bit more background on the issue at hand.\n\n          promise.constructor = PromiseProxy;\n\n          promise.then = function () {\n            count++;\n            var next = then.apply(promise, arguments);\n            next.then(complete, function (e) {\n              complete();\n              if (count === 0) throw e;\n            });\n            return wrap(next);\n          };\n\n          return promise;\n        }\n      };\n    }\n\n    function hasHeader(args, name) {\n      for (var key in args.headers) {\n        if ({}.hasOwnProperty.call(args.headers, key) && name.test(key)) return true;\n      }\n\n      return false;\n    }\n\n    return {\n      request: makeRequest(function (url, args, resolve, reject) {\n        var method = args.method != null ? args.method.toUpperCase() : \"GET\";\n        var body = args.body;\n        var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData);\n        var responseType = args.responseType || (typeof args.extract === \"function\" ? \"\" : \"json\");\n        var xhr = new $window.XMLHttpRequest(),\n            aborted = false;\n        var original = xhr,\n            replacedAbort;\n        var abort = xhr.abort;\n\n        xhr.abort = function () {\n          aborted = true;\n          abort.call(this);\n        };\n\n        xhr.open(method, url, args.async !== false, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined);\n\n        if (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) {\n          xhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n        }\n\n        if (typeof args.deserialize !== \"function\" && !hasHeader(args, /^accept$/i)) {\n          xhr.setRequestHeader(\"Accept\", \"application/json, text/*\");\n        }\n\n        if (args.withCredentials) xhr.withCredentials = args.withCredentials;\n        if (args.timeout) xhr.timeout = args.timeout;\n        xhr.responseType = responseType;\n\n        for (var key in args.headers) {\n          if ({}.hasOwnProperty.call(args.headers, key)) {\n            xhr.setRequestHeader(key, args.headers[key]);\n          }\n        }\n\n        xhr.onreadystatechange = function (ev) {\n          // Don't throw errors on xhr.abort().\n          if (aborted) return;\n\n          if (ev.target.readyState === 4) {\n            try {\n              var success = ev.target.status >= 200 && ev.target.status < 300 || ev.target.status === 304 || /^file:\\/\\//i.test(url); // When the response type isn't \"\" or \"text\",\n              // `xhr.responseText` is the wrong thing to use.\n              // Browsers do the right thing and throw here, and we\n              // should honor that and do the right thing by\n              // preferring `xhr.response` where possible/practical.\n\n              var response = ev.target.response,\n                  message;\n\n              if (responseType === \"json\") {\n                // For IE and Edge, which don't implement\n                // `responseType: \"json\"`.\n                if (!ev.target.responseType && typeof args.extract !== \"function\") response = JSON.parse(ev.target.responseText);\n              } else if (!responseType || responseType === \"text\") {\n                // Only use this default if it's text. If a parsed\n                // document is needed on old IE and friends (all\n                // unsupported), the user should use a custom\n                // `config` instead. They're already using this at\n                // their own risk.\n                if (response == null) response = ev.target.responseText;\n              }\n\n              if (typeof args.extract === \"function\") {\n                response = args.extract(ev.target, args);\n                success = true;\n              } else if (typeof args.deserialize === \"function\") {\n                response = args.deserialize(response);\n              }\n\n              if (success) resolve(response);else {\n                try {\n                  message = ev.target.responseText;\n                } catch (e) {\n                  message = response;\n                }\n\n                var error = new Error(message);\n                error.code = ev.target.status;\n                error.response = response;\n                reject(error);\n              }\n            } catch (e) {\n              reject(e);\n            }\n          }\n        };\n\n        if (typeof args.config === \"function\") {\n          xhr = args.config(xhr, args, url) || xhr; // Propagate the `abort` to any replacement XHR as well.\n\n          if (xhr !== original) {\n            replacedAbort = xhr.abort;\n\n            xhr.abort = function () {\n              aborted = true;\n              replacedAbort.call(this);\n            };\n          }\n        }\n\n        if (body == null) xhr.send();else if (typeof args.serialize === \"function\") xhr.send(args.serialize(body));else if (body instanceof $window.FormData) xhr.send(body);else xhr.send(JSON.stringify(body));\n      }),\n      jsonp: makeRequest(function (url, args, resolve, reject) {\n        var callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++;\n        var script = $window.document.createElement(\"script\");\n\n        $window[callbackName] = function (data) {\n          delete $window[callbackName];\n          script.parentNode.removeChild(script);\n          resolve(data);\n        };\n\n        script.onerror = function () {\n          delete $window[callbackName];\n          script.parentNode.removeChild(script);\n          reject(new Error(\"JSONP request failed\"));\n        };\n\n        script.src = url + (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + encodeURIComponent(args.callbackKey || \"callback\") + \"=\" + encodeURIComponent(callbackName);\n        $window.document.documentElement.appendChild(script);\n      })\n    };\n  };\n\n  var PromisePolyfill = promise.exports;\n  var mountRedraw = mountRedraw$1;\n  request(window, PromisePolyfill, mountRedraw.redraw);\n\n  var Auth = /*#__PURE__*/function (_Control) {\n    _inherits(Auth, _Control);\n\n    var _super = _createSuper(Auth);\n\n    function Auth() {\n      var _this;\n\n      _classCallCheck(this, Auth);\n\n      _this = _super.call(this);\n\n      if (typeof Storage === 'undefined') {\n        throw 'no storage available';\n      }\n\n      _this.baseUrl = undefined;\n      return _this;\n    }\n\n    _createClass$1(Auth, [{\n      key: \"load\",\n      value: function load(key, url) {\n        this.baseUrl = url;\n      }\n    }, {\n      key: \"setup\",\n      value: function setup() {}\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'Auth';\n      }\n    }, {\n      key: \"storage\",\n      get: function get() {\n        return window.localStorage;\n      }\n    }, {\n      key: \"token\",\n      get: function get() {\n        return this.access;\n      }\n    }, {\n      key: \"access\",\n      get: function get() {\n        return this.storage.getItem('access', false);\n      },\n      set: function set(x) {\n        return this.storage.setItem('access', x);\n      }\n    }, {\n      key: \"refresh\",\n      get: function get() {\n        return this.storage.getItem(\"refresh\", false);\n      },\n      set: function set(x) {\n        return this.storage.setItem(\"refresh\", x);\n      }\n    }, {\n      key: \"username\",\n      get: function get() {\n        return this.storage.getItem(\"username\", false);\n      },\n      set: function set(x) {\n        return this.storage.setItem(\"username\", x);\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return Boolean(this.access); // fixme && this.refresh //fixme\n      }\n    }, {\n      key: \"logout\",\n      value: function () {\n        var _logout = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  this.storage.removeItem('access');\n                  this.storage.removeItem('refresh');\n                  this.storage.removeItem('username');\n                  return _context.abrupt(\"return\", true);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function logout() {\n          return _logout.apply(this, arguments);\n        }\n\n        return logout;\n      }()\n    }, {\n      key: \"refreshToken\",\n      value: function () {\n        var _refreshToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          var _this2 = this;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  return _context2.abrupt(\"return\", w.net.post( // fixme: dunno\n                  baseUrl + 'auth/token/refresh', {\n                    refresh: this.refresh\n                  }, {\n                    refresh: this.refresh\n                  }).then(function (result) {\n                    _this2.i('refreshed auth');\n\n                    _this2.access = result.access;\n\n                    if (result.refresh) {\n                      _this2.refresh = result.refresh;\n                    }\n\n                    return true;\n                  })[\"catch\"](function (err) {\n                    return _this2.e(err);\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function refreshToken() {\n          return _refreshToken.apply(this, arguments);\n        }\n\n        return refreshToken;\n      }()\n    }, {\n      key: \"authenticate\",\n      value: function () {\n        var _authenticate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(alias, passcode) {\n          var _this3 = this;\n\n          var baseUrl,\n              _args3 = arguments;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  baseUrl = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : undefined;\n                  baseUrl || (baseUrl = this.baseUrl);\n                  this.a(baseUrl, 'no url for authentication');\n\n                  if (!this.state) {\n                    _context3.next = 6;\n                    break;\n                  }\n\n                  this.d('already logged in');\n                  return _context3.abrupt(\"return\", true);\n\n                case 6:\n                  this.d('authenticating', baseUrl + 'auth/token/');\n                  return _context3.abrupt(\"return\", w.net.post( // fixme: dunno\n                  baseUrl + 'auth/token/', {\n                    username: alias,\n                    password: passcode\n                  }, {\n                    username: alias,\n                    password: passcode\n                  }).then(function (result) {\n                    _this3.i('authenticated');\n\n                    _this3.access = result.access;\n                    _this3.refresh = result.refresh;\n                    _this3.username = alias;\n                    return true;\n                  })[\"catch\"](function (err) {\n                    return _this3.e(err);\n                  }));\n\n                case 8:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function authenticate(_x, _x2) {\n          return _authenticate.apply(this, arguments);\n        }\n\n        return authenticate;\n      }()\n    }]);\n\n    return Auth;\n  }(Control);\n\n  var WalaxCache = /*#__PURE__*/function (_Control) {\n    _inherits(WalaxCache, _Control);\n\n    var _super = _createSuper(WalaxCache);\n\n    function WalaxCache() {\n      var _this;\n\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n      _classCallCheck(this, WalaxCache);\n\n      _this = _super.call(this);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"_name\", false);\n\n      _defineProperty(_assertThisInitialized$1(_this), \"_storage\", false);\n\n      _this._name = name;\n      _this._storage = new Map();\n      return _this;\n    }\n\n    _createClass$1(WalaxCache, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Cache';\n      }\n    }, {\n      key: \"cache\",\n      value: function cache(key) {\n        if (!this._storage.has(key)) this._storage.set(key, new WalaxCache(key));\n        return this._storage.get(key);\n      }\n    }, {\n      key: \"find\",\n      value: function find(key) {\n        var _this$cache;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var cachePath = args;\n        if (cachePath.length == 1 && typeof cachePath[0] == 'function') func = cachePath.shift();\n        if (cachePath.length) return (_this$cache = this.cache(cachePath.shift())).find.apply(_this$cache, [key, func].concat(cachePath));\n\n        if (!this._storage.has(key)) {\n          this.d('miss', \"\".concat(this._name, \".\").concat(key, \" (\").concat(typeof func === \"undefined\" ? \"undefined\" : _typeof(func), \")\"));\n          if (typeof func == 'function') this._storage.set(key, func(key));else if (func === undefined) this._storage[\"delete\"](key);else this._storage.set(key, func);\n          this.d('store', \"\".concat(this._name, \".\").concat(key, \" == \").concat(this._storage.get(key)));\n        } else {\n          this.d('hit', \"\".concat(this._name, \".\").concat(key));\n        }\n\n        return this._storage.get(key);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        var c = this;\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        while (args.length) {\n          c = c.cache(args.pop());\n        }\n\n        this.d(\"delete: \".concat(this._name, \".\").concat(key));\n        return c._storage[\"delete\"](key);\n      }\n    }, {\n      key: \"store\",\n      value: function store(key, func) {\n        this.d(\"put: \".concat(this._name, \".\").concat(key));\n\n        for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          args[_key3 - 2] = arguments[_key3];\n        }\n\n        this.remove.apply(this, [key].concat(args));\n        return this.find.apply(this, [key, func].concat(args));\n      }\n    }]);\n\n    return WalaxCache;\n  }(Control);\n\n  var Test = /*#__PURE__*/function (_Control) {\n    _inherits(Test, _Control);\n\n    var _super = _createSuper(Test);\n\n    function Test() {\n      _classCallCheck(this, Test);\n\n      return _super.call(this);\n    }\n\n    _createClass$1(Test, [{\n      key: \"toString\",\n      value: function toString() {\n        return 'Test';\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle(elm) {\n        if (typeof elm == 'string') elm = document.getElementById(elm);\n        d(elm.style);\n        elm.style.display = elm.style.display == 'none' ? 'block' : 'none';\n      }\n    }]);\n\n    return Test;\n  }(Control);\n\n  var WLXBG1 = 'background-color: green; padding: 2px; \\\n          color: white; border: 3px solid #bbb; \\\n          border-radius: 6px; font-variant: small-caps; \\\n          font-weight: bold; font-family: serif; \\\n          font-size: 16px; border-right: none; \\\n          border-top-right-radius: 0px; \\\n          border-bottom-right-radius: 0px; \\\n          ';\n  var WLX1 = 'color:green; background-color: lightgrey; padding: 2px; \\\n        border: 3px solid #bababa; border-radius: 8px; \\\n        font-weight: bold; font-family: serif; \\\n        font-variant: small-caps; font-size: 16px; \\\n        border-left: none; \\\n        border-top-left-radius: 0px; \\\n        border-bottom-left-radius: 0px; \\\n        ';\n  var d$1 = function (t) {\n    var _console;\n\n    for (var _len = arguments.length, m = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      m[_key - 1] = arguments[_key];\n    }\n\n    return (_console = console).log.apply(_console, [\"%c  walax  %c \".concat(t, \" \"), WLXBG1, WLX1].concat(m));\n  } ;\n  var WLXBG2 = 'background-color: red; padding: 2px; \\\n          color: white; border: 3px solid #bbb; \\\n          border-radius: 6px; font-variant: small-caps; \\\n          font-weight: bold; font-family: serif; \\\n          font-size: 16px; border-right: none; \\\n          border-top-right-radius: 0px; \\\n          border-bottom-right-radius: 0px; \\\n          ';\n  var WLX2 = 'color:green; background-color: lightgrey; padding: 2px; \\\n        border: 3px solid #bababa; border-radius: 8px; \\\n        font-weight: bold; font-family: serif; \\\n        font-variant: small-caps; font-size: 16px; \\\n        border-left: none; \\\n        border-top-left-radius: 0px; \\\n        border-bottom-left-radius: 0px; \\\n        ';\n\n  var _d_a = function () {\n    var _console2;\n\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n\n    return (_console2 = console).log.apply(_console2, [\"%c  walax  %c ASSERT FAILED \", WLXBG2, WLX2].concat(m));\n  } ;\n\n  var a = function a(c) {\n    if (!c) {\n      for (var _len3 = arguments.length, m = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        m[_key3 - 1] = arguments[_key3];\n      }\n\n      _d_a.apply(void 0, m);\n\n      throw new TypeError(m[0]);\n    }\n  };\n  /**\n   * the main interface to Walax\n   *\n   * @class Walax\n   */\n\n\n  var Walax = /*#__PURE__*/function () {\n    function Walax() {\n      _classCallCheck(this, Walax);\n\n      _defineProperty(this, \"sleep\", function (t) {\n        return new Promise(function (s) {\n          return setTimeout(s, t);\n        });\n      });\n\n      _defineProperty(this, \"config\", new Map());\n    }\n    /**\n     * load a named API from url\n     *\n     * @param {*} url\n     * @param {*} key\n     * @return {*}\n     * @memberof Walax\n     */\n\n\n    _createClass$1(Walax, [{\n      key: \"load\",\n      value: function () {\n        var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime$1.mark(function _callee(key, url) {\n          return regeneratorRuntime$1.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  this.plugins.forEach(function (plug) {\n                    plug.load(key, url);\n                  });\n                  this.apiBase = url;\n                  d$1(\"setting apiBase to \".concat(this.apiBase));\n                  return _context.abrupt(\"return\", true);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function load(_x, _x2) {\n          return _load.apply(this, arguments);\n        }\n\n        return load;\n      }()\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return 'WALAX';\n      }\n      /**\n       * initialize Walax object for use\n       *\n       * @param {*} sig\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"initialize\",\n      value: function initialize() {\n        this.setup(); // fixme\n      }\n      /**\n       * pause execution for time t (ms)\n       *\n       * @param {*} t\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"getCookie\",\n      value: function getCookie(name) {\n        var cookieValue = null;\n\n        if (document.cookie && document.cookie !== '') {\n          var cookies = document.cookie.split(';');\n\n          for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n            if (cookie.substring(0, name.length + 1) === name + '=') {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n            }\n          }\n        }\n\n        return cookieValue;\n      }\n    }, {\n      key: \"setup\",\n      value:\n      /**\n       * signal handler for 'setup'\n       *\n       * @param {*} src\n       * @param {*} config\n       * @param {*} force\n       * @memberof Walax\n       */\n      function setup(src, config, force) {\n        if (config) for (var name in config) {\n          this.config.set(name, config[name]);\n        } // register plugins\n\n        var plug = {\n          log: Logger,\n          cache: WalaxCache,\n          net: Network,\n          obj: Objects,\n          auth: Auth,\n          test: Test\n        };\n        d$1('initializing...');\n\n        for (var _name in plug) {\n          this.addPlugin(_name, plug[_name]);\n        } // a(this.plugins.size == Object.keys(plug).size, 'plugin count wrong')\n        // should have normal logging by now\n\n\n        this.log.register(consoleLog);\n        this.log.info('setup complete');\n      }\n      /**\n       * load a component control plugin\n       *\n       * @param {*} cmp\n       * @param {boolean} [kee]\n       * @param {object} [cmp]\n       * @param {*} args\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"addPlugin\",\n      value: function addPlugin(key, cmp) {\n        var _this = this;\n\n        for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          args[_key4 - 2] = arguments[_key4];\n        }\n\n        d$1(\"adding plugin\", {\n          key: key,\n          cmp: cmp,\n          args: args\n        });\n        a(this.checkClass(Control, cmp), \"\".concat(key, \" must extend walax.control.Control\"), cmp);\n\n        var newCmp = _construct(cmp, args);\n\n        this.plugins || (this.plugins = new Map());\n\n        if (w$1.isValidProp(key)) {\n          this.plugins.set(key, newCmp);\n          this.augment(this, key, function () {\n            return _this.plugins.get(key);\n          });\n        } else {\n          throw new TypeError('invalid component');\n        }\n\n        return cmp;\n      }\n      /**\n       * check to see if name is a valid property string\n       *\n       * @param {*} name\n       * @return {*}\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"isValidProp\",\n      value: function isValidProp(name) {\n        if (!name) return false;\n        if (typeof name != 'string') return false;\n        if (name.search('[^A-Za-z_]') > -1) return false; //if (name.search(/[^\\w]/) != -1) return false\n\n        return true;\n      }\n      /**\n       * check to see if argument is a callable function\n       *\n       * May pass a single (Function-like) object, or an object and a property name\n       *\n       * @param {*} args\n       * @return {*}\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"callable\",\n      value: function callable() {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        var f = args.length == 2 && args[1] in args[0] ? args[0][args[1]] : args.length == 1 ? args[0] : undefined;\n        return f instanceof Function;\n      }\n      /**\n       * add a dynamic property to an object\n       *\n       * @param {*} obj\n       * @param {*} key\n       * @param {*} getter\n       * @param {*} [setter=undefined]\n       * @memberof Walax\n       * */\n\n    }, {\n      key: \"augment\",\n      value: function augment(obj, key, getter) {\n        var setter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n        a(obj && key && getter && typeof getter == 'function', 'augment called improperly', {\n          obj: obj\n        }, {\n          key: key\n        }, {\n          getter: getter\n        }, {\n          setter: setter\n        });\n        a(this.isValidProp(key), \"invalid key: \".concat(key));\n        a(!Object.keys(obj).includes(key), \"key exists: \".concat(key));\n        var desc = {\n          enumerable: true,\n          configurable: false,\n          get: getter\n        };\n        if (setter) desc.set = setter;\n        d$1('augment', {\n          obj: obj,\n          key: key,\n          desc: desc\n        });\n        Object.defineProperty(obj, key, desc);\n        a(Object.getOwnPropertyNames(obj).includes(key), 'augmentation failed'); // d('augmented', { obj }, { key }, { desc })\n      }\n      /**\n       * check class inheritance\n       *\n       * @param {*} req\n       * @param {*} cls\n       * @return {*}\n       * @memberof Walax\n       */\n\n    }, {\n      key: \"checkClass\",\n      value: function checkClass(req, cls) {\n        if (!req || !cls) return false; // should prob log something heres\n\n        if (req instanceof cls) return true;\n        if (!cls || !req) return false;\n        if (cls == req) return true;\n        return this.checkClass(req, cls.__proto__);\n      }\n    }]);\n\n    return Walax;\n  }();\n  var w$1 = observable.box(new Walax()).get();\n  if (window) window.w = w$1;\n\n  w$1.initialize();\n  w$1.cls = {\n    Entity: Entity,\n    Schema: Schema,\n    Model: Model,\n    Manager: Manager,\n    Control: Control\n  };\n\n  return w$1;\n\n})));\n\n\n//# sourceURL=webpack://umd/../../walax/dist/walax.umd.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/api/mount-redraw.js":
/*!************************************************************!*\
  !*** ../../walax/node_modules/mithril/api/mount-redraw.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function(render, schedule, console) {\n\tvar subscriptions = []\n\tvar rendering = false\n\tvar pending = false\n\n\tfunction sync() {\n\t\tif (rendering) throw new Error(\"Nested m.redraw.sync() call\")\n\t\trendering = true\n\t\tfor (var i = 0; i < subscriptions.length; i += 2) {\n\t\t\ttry { render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw) }\n\t\t\tcatch (e) { console.error(e) }\n\t\t}\n\t\trendering = false\n\t}\n\n\tfunction redraw() {\n\t\tif (!pending) {\n\t\t\tpending = true\n\t\t\tschedule(function() {\n\t\t\t\tpending = false\n\t\t\t\tsync()\n\t\t\t})\n\t\t}\n\t}\n\n\tredraw.sync = sync\n\n\tfunction mount(root, component) {\n\t\tif (component != null && component.view == null && typeof component !== \"function\") {\n\t\t\tthrow new TypeError(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t}\n\n\t\tvar index = subscriptions.indexOf(root)\n\t\tif (index >= 0) {\n\t\t\tsubscriptions.splice(index, 2)\n\t\t\trender(root, [], redraw)\n\t\t}\n\n\t\tif (component != null) {\n\t\t\tsubscriptions.push(root, component)\n\t\t\trender(root, Vnode(component), redraw)\n\t\t}\n\t}\n\n\treturn {mount: mount, redraw: redraw}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/api/mount-redraw.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/api/router.js":
/*!******************************************************!*\
  !*** ../../walax/node_modules/mithril/api/router.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\nvar m = __webpack_require__(/*! ../render/hyperscript */ \"../../walax/node_modules/mithril/render/hyperscript.js\")\nvar Promise = __webpack_require__(/*! ../promise/promise */ \"../../walax/node_modules/mithril/promise/promise.js\")\n\nvar buildPathname = __webpack_require__(/*! ../pathname/build */ \"../../walax/node_modules/mithril/pathname/build.js\")\nvar parsePathname = __webpack_require__(/*! ../pathname/parse */ \"../../walax/node_modules/mithril/pathname/parse.js\")\nvar compileTemplate = __webpack_require__(/*! ../pathname/compileTemplate */ \"../../walax/node_modules/mithril/pathname/compileTemplate.js\")\nvar assign = __webpack_require__(/*! ../pathname/assign */ \"../../walax/node_modules/mithril/pathname/assign.js\")\n\nvar sentinel = {}\n\nmodule.exports = function($window, mountRedraw) {\n\tvar fireAsync\n\n\tfunction setPath(path, data, options) {\n\t\tpath = buildPathname(path, data)\n\t\tif (fireAsync != null) {\n\t\t\tfireAsync()\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, route.prefix + path)\n\t\t\telse $window.history.pushState(state, title, route.prefix + path)\n\t\t}\n\t\telse {\n\t\t\t$window.location.href = route.prefix + path\n\t\t}\n\t}\n\n\tvar currentResolver = sentinel, component, attrs, currentPath, lastUpdate\n\n\tvar SKIP = route.SKIP = {}\n\n\tfunction route(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\t// 0 = start\n\t\t// 1 = init\n\t\t// 2 = ready\n\t\tvar state = 0\n\n\t\tvar compiled = Object.keys(routes).map(function(route) {\n\t\t\tif (route[0] !== \"/\") throw new SyntaxError(\"Routes must start with a `/`\")\n\t\t\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(route)) {\n\t\t\t\tthrow new SyntaxError(\"Route parameter names must be separated with either `/`, `.`, or `-`\")\n\t\t\t}\n\t\t\treturn {\n\t\t\t\troute: route,\n\t\t\t\tcomponent: routes[route],\n\t\t\t\tcheck: compileTemplate(route),\n\t\t\t}\n\t\t})\n\t\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\t\tvar p = Promise.resolve()\n\t\tvar scheduled = false\n\t\tvar onremove\n\n\t\tfireAsync = null\n\n\t\tif (defaultRoute != null) {\n\t\t\tvar defaultData = parsePathname(defaultRoute)\n\n\t\t\tif (!compiled.some(function (i) { return i.check(defaultData) })) {\n\t\t\t\tthrow new ReferenceError(\"Default route doesn't match any known routes\")\n\t\t\t}\n\t\t}\n\n\t\tfunction resolveRoute() {\n\t\t\tscheduled = false\n\t\t\t// Consider the pathname holistically. The prefix might even be invalid,\n\t\t\t// but that's not our problem.\n\t\t\tvar prefix = $window.location.hash\n\t\t\tif (route.prefix[0] !== \"#\") {\n\t\t\t\tprefix = $window.location.search + prefix\n\t\t\t\tif (route.prefix[0] !== \"?\") {\n\t\t\t\t\tprefix = $window.location.pathname + prefix\n\t\t\t\t\tif (prefix[0] !== \"/\") prefix = \"/\" + prefix\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This seemingly useless `.concat()` speeds up the tests quite a bit,\n\t\t\t// since the representation is consistently a relatively poorly\n\t\t\t// optimized cons string.\n\t\t\tvar path = prefix.concat()\n\t\t\t\t.replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\t\t\t.slice(route.prefix.length)\n\t\t\tvar data = parsePathname(path)\n\n\t\t\tassign(data.params, $window.history.state)\n\n\t\t\tfunction fail() {\n\t\t\t\tif (path === defaultRoute) throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t\t\tsetPath(defaultRoute, null, {replace: true})\n\t\t\t}\n\n\t\t\tloop(0)\n\t\t\tfunction loop(i) {\n\t\t\t\t// 0 = init\n\t\t\t\t// 1 = scheduled\n\t\t\t\t// 2 = done\n\t\t\t\tfor (; i < compiled.length; i++) {\n\t\t\t\t\tif (compiled[i].check(data)) {\n\t\t\t\t\t\tvar payload = compiled[i].component\n\t\t\t\t\t\tvar matchedRoute = compiled[i].route\n\t\t\t\t\t\tvar localComp = payload\n\t\t\t\t\t\tvar update = lastUpdate = function(comp) {\n\t\t\t\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\t\t\t\tif (comp === SKIP) return loop(i + 1)\n\t\t\t\t\t\t\tcomponent = comp != null && (typeof comp.view === \"function\" || typeof comp === \"function\")? comp : \"div\"\n\t\t\t\t\t\t\tattrs = data.params, currentPath = path, lastUpdate = null\n\t\t\t\t\t\t\tcurrentResolver = payload.render ? payload : null\n\t\t\t\t\t\t\tif (state === 2) mountRedraw.redraw()\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tstate = 2\n\t\t\t\t\t\t\t\tmountRedraw.redraw.sync()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// There's no understating how much I *wish* I could\n\t\t\t\t\t\t// use `async`/`await` here...\n\t\t\t\t\t\tif (payload.view || typeof payload === \"function\") {\n\t\t\t\t\t\t\tpayload = {}\n\t\t\t\t\t\t\tupdate(localComp)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (payload.onmatch) {\n\t\t\t\t\t\t\tp.then(function () {\n\t\t\t\t\t\t\t\treturn payload.onmatch(data.params, path, matchedRoute)\n\t\t\t\t\t\t\t}).then(update, fail)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse update(\"div\")\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfail()\n\t\t\t}\n\t\t}\n\n\t\t// Set it unconditionally so `m.route.set` and `m.route.Link` both work,\n\t\t// even if neither `pushState` nor `hashchange` are supported. It's\n\t\t// cleared if `hashchange` is used, since that makes it automatically\n\t\t// async.\n\t\tfireAsync = function() {\n\t\t\tif (!scheduled) {\n\t\t\t\tscheduled = true\n\t\t\t\tcallAsync(resolveRoute)\n\t\t\t}\n\t\t}\n\n\t\tif (typeof $window.history.pushState === \"function\") {\n\t\t\tonremove = function() {\n\t\t\t\t$window.removeEventListener(\"popstate\", fireAsync, false)\n\t\t\t}\n\t\t\t$window.addEventListener(\"popstate\", fireAsync, false)\n\t\t} else if (route.prefix[0] === \"#\") {\n\t\t\tfireAsync = null\n\t\t\tonremove = function() {\n\t\t\t\t$window.removeEventListener(\"hashchange\", resolveRoute, false)\n\t\t\t}\n\t\t\t$window.addEventListener(\"hashchange\", resolveRoute, false)\n\t\t}\n\n\t\treturn mountRedraw.mount(root, {\n\t\t\tonbeforeupdate: function() {\n\t\t\t\tstate = state ? 2 : 1\n\t\t\t\treturn !(!state || sentinel === currentResolver)\n\t\t\t},\n\t\t\toncreate: resolveRoute,\n\t\t\tonremove: onremove,\n\t\t\tview: function() {\n\t\t\t\tif (!state || sentinel === currentResolver) return\n\t\t\t\t// Wrap in a fragment to preserve existing key semantics\n\t\t\t\tvar vnode = [Vnode(component, attrs.key, attrs)]\n\t\t\t\tif (currentResolver) vnode = currentResolver.render(vnode[0])\n\t\t\t\treturn vnode\n\t\t\t},\n\t\t})\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\tsetPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = \"#!\"\n\troute.Link = {\n\t\tview: function(vnode) {\n\t\t\tvar options = vnode.attrs.options\n\t\t\t// Remove these so they don't get overwritten\n\t\t\tvar attrs = {}, onclick, href\n\t\t\tassign(attrs, vnode.attrs)\n\t\t\t// The first two are internal, but the rest are magic attributes\n\t\t\t// that need censored to not screw up rendering.\n\t\t\tattrs.selector = attrs.options = attrs.key = attrs.oninit =\n\t\t\tattrs.oncreate = attrs.onbeforeupdate = attrs.onupdate =\n\t\t\tattrs.onbeforeremove = attrs.onremove = null\n\n\t\t\t// Do this now so we can get the most current `href` and `disabled`.\n\t\t\t// Those attributes may also be specified in the selector, and we\n\t\t\t// should honor that.\n\t\t\tvar child = m(vnode.attrs.selector || \"a\", attrs, vnode.children)\n\n\t\t\t// Let's provide a *right* way to disable a route link, rather than\n\t\t\t// letting people screw up accessibility on accident.\n\t\t\t//\n\t\t\t// The attribute is coerced so users don't get surprised over\n\t\t\t// `disabled: 0` resulting in a button that's somehow routable\n\t\t\t// despite being visibly disabled.\n\t\t\tif (child.attrs.disabled = Boolean(child.attrs.disabled)) {\n\t\t\t\tchild.attrs.href = null\n\t\t\t\tchild.attrs[\"aria-disabled\"] = \"true\"\n\t\t\t\t// If you *really* do want to do this on a disabled link, use\n\t\t\t\t// an `oncreate` hook to add it.\n\t\t\t\tchild.attrs.onclick = null\n\t\t\t} else {\n\t\t\t\tonclick = child.attrs.onclick\n\t\t\t\thref = child.attrs.href\n\t\t\t\tchild.attrs.href = route.prefix + href\n\t\t\t\tchild.attrs.onclick = function(e) {\n\t\t\t\t\tvar result\n\t\t\t\t\tif (typeof onclick === \"function\") {\n\t\t\t\t\t\tresult = onclick.call(e.currentTarget, e)\n\t\t\t\t\t} else if (onclick == null || typeof onclick !== \"object\") {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t} else if (typeof onclick.handleEvent === \"function\") {\n\t\t\t\t\t\tonclick.handleEvent(e)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Adapted from React Router's implementation:\n\t\t\t\t\t// https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js\n\t\t\t\t\t//\n\t\t\t\t\t// Try to be flexible and intuitive in how we handle links.\n\t\t\t\t\t// Fun fact: links aren't as obvious to get right as you\n\t\t\t\t\t// would expect. There's a lot more valid ways to click a\n\t\t\t\t\t// link than this, and one might want to not simply click a\n\t\t\t\t\t// link, but right click or command-click it to copy the\n\t\t\t\t\t// link target, etc. Nope, this isn't just for blind people.\n\t\t\t\t\tif (\n\t\t\t\t\t\t// Skip if `onclick` prevented default\n\t\t\t\t\t\tresult !== false && !e.defaultPrevented &&\n\t\t\t\t\t\t// Ignore everything but left clicks\n\t\t\t\t\t\t(e.button === 0 || e.which === 0 || e.which === 1) &&\n\t\t\t\t\t\t// Let the browser handle `target=_blank`, etc.\n\t\t\t\t\t\t(!e.currentTarget.target || e.currentTarget.target === \"_self\") &&\n\t\t\t\t\t\t// No modifier keys\n\t\t\t\t\t\t!e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey\n\t\t\t\t\t) {\n\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\te.redraw = false\n\t\t\t\t\t\troute.set(href, null, options)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn child\n\t\t},\n\t}\n\troute.param = function(key) {\n\t\treturn attrs && key != null ? attrs[key] : attrs\n\t}\n\n\treturn route\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/api/router.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/hyperscript.js":
/*!*******************************************************!*\
  !*** ../../walax/node_modules/mithril/hyperscript.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hyperscript = __webpack_require__(/*! ./render/hyperscript */ \"../../walax/node_modules/mithril/render/hyperscript.js\")\n\nhyperscript.trust = __webpack_require__(/*! ./render/trust */ \"../../walax/node_modules/mithril/render/trust.js\")\nhyperscript.fragment = __webpack_require__(/*! ./render/fragment */ \"../../walax/node_modules/mithril/render/fragment.js\")\n\nmodule.exports = hyperscript\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/hyperscript.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/index.js":
/*!*************************************************!*\
  !*** ../../walax/node_modules/mithril/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar hyperscript = __webpack_require__(/*! ./hyperscript */ \"../../walax/node_modules/mithril/hyperscript.js\")\nvar request = __webpack_require__(/*! ./request */ \"../../walax/node_modules/mithril/request.js\")\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"../../walax/node_modules/mithril/mount-redraw.js\")\n\nvar m = function m() { return hyperscript.apply(this, arguments) }\nm.m = hyperscript\nm.trust = hyperscript.trust\nm.fragment = hyperscript.fragment\nm.mount = mountRedraw.mount\nm.route = __webpack_require__(/*! ./route */ \"../../walax/node_modules/mithril/route.js\")\nm.render = __webpack_require__(/*! ./render */ \"../../walax/node_modules/mithril/render.js\")\nm.redraw = mountRedraw.redraw\nm.request = request.request\nm.jsonp = request.jsonp\nm.parseQueryString = __webpack_require__(/*! ./querystring/parse */ \"../../walax/node_modules/mithril/querystring/parse.js\")\nm.buildQueryString = __webpack_require__(/*! ./querystring/build */ \"../../walax/node_modules/mithril/querystring/build.js\")\nm.parsePathname = __webpack_require__(/*! ./pathname/parse */ \"../../walax/node_modules/mithril/pathname/parse.js\")\nm.buildPathname = __webpack_require__(/*! ./pathname/build */ \"../../walax/node_modules/mithril/pathname/build.js\")\nm.vnode = __webpack_require__(/*! ./render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\nm.PromisePolyfill = __webpack_require__(/*! ./promise/polyfill */ \"../../walax/node_modules/mithril/promise/polyfill.js\")\n\nmodule.exports = m\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/index.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/mount-redraw.js":
/*!********************************************************!*\
  !*** ../../walax/node_modules/mithril/mount-redraw.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar render = __webpack_require__(/*! ./render */ \"../../walax/node_modules/mithril/render.js\")\n\nmodule.exports = __webpack_require__(/*! ./api/mount-redraw */ \"../../walax/node_modules/mithril/api/mount-redraw.js\")(render, requestAnimationFrame, console)\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/mount-redraw.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/pathname/assign.js":
/*!***********************************************************!*\
  !*** ../../walax/node_modules/mithril/pathname/assign.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = Object.assign || function(target, source) {\n\tif(source) Object.keys(source).forEach(function(key) { target[key] = source[key] })\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/pathname/assign.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/pathname/build.js":
/*!**********************************************************!*\
  !*** ../../walax/node_modules/mithril/pathname/build.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar buildQueryString = __webpack_require__(/*! ../querystring/build */ \"../../walax/node_modules/mithril/querystring/build.js\")\nvar assign = __webpack_require__(/*! ./assign */ \"../../walax/node_modules/mithril/pathname/assign.js\")\n\n// Returns `path` from `template` + `params`\nmodule.exports = function(template, params) {\n\tif ((/:([^\\/\\.-]+)(\\.{3})?:/).test(template)) {\n\t\tthrow new SyntaxError(\"Template parameter names *must* be separated\")\n\t}\n\tif (params == null) return template\n\tvar queryIndex = template.indexOf(\"?\")\n\tvar hashIndex = template.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? template.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = template.slice(0, pathEnd)\n\tvar query = {}\n\n\tassign(query, params)\n\n\tvar resolved = path.replace(/:([^\\/\\.-]+)(\\.{3})?/g, function(m, key, variadic) {\n\t\tdelete query[key]\n\t\t// If no such parameter exists, don't interpolate it.\n\t\tif (params[key] == null) return m\n\t\t// Escape normal parameters, but not variadic ones.\n\t\treturn variadic ? params[key] : encodeURIComponent(String(params[key]))\n\t})\n\n\t// In case the template substitution adds new query/hash parameters.\n\tvar newQueryIndex = resolved.indexOf(\"?\")\n\tvar newHashIndex = resolved.indexOf(\"#\")\n\tvar newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex\n\tvar newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex\n\tvar result = resolved.slice(0, newPathEnd)\n\n\tif (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)\n\tif (newQueryIndex >= 0) result += (queryIndex < 0 ? \"?\" : \"&\") + resolved.slice(newQueryIndex, newQueryEnd)\n\tvar querystring = buildQueryString(query)\n\tif (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? \"?\" : \"&\") + querystring\n\tif (hashIndex >= 0) result += template.slice(hashIndex)\n\tif (newHashIndex >= 0) result += (hashIndex < 0 ? \"\" : \"&\") + resolved.slice(newHashIndex)\n\treturn result\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/pathname/build.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/pathname/compileTemplate.js":
/*!********************************************************************!*\
  !*** ../../walax/node_modules/mithril/pathname/compileTemplate.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar parsePathname = __webpack_require__(/*! ./parse */ \"../../walax/node_modules/mithril/pathname/parse.js\")\n\n// Compiles a template into a function that takes a resolved path (without query\n// strings) and returns an object containing the template parameters with their\n// parsed values. This expects the input of the compiled template to be the\n// output of `parsePathname`. Note that it does *not* remove query parameters\n// specified in the template.\nmodule.exports = function(template) {\n\tvar templateData = parsePathname(template)\n\tvar templateKeys = Object.keys(templateData.params)\n\tvar keys = []\n\tvar regexp = new RegExp(\"^\" + templateData.path.replace(\n\t\t// I escape literal text so people can use things like `:file.:ext` or\n\t\t// `:lang-:locale` in routes. This is all merged into one pass so I\n\t\t// don't also accidentally escape `-` and make it harder to detect it to\n\t\t// ban it from template parameters.\n\t\t/:([^\\/.-]+)(\\.{3}|\\.(?!\\.)|-)?|[\\\\^$*+.()|\\[\\]{}]/g,\n\t\tfunction(m, key, extra) {\n\t\t\tif (key == null) return \"\\\\\" + m\n\t\t\tkeys.push({k: key, r: extra === \"...\"})\n\t\t\tif (extra === \"...\") return \"(.*)\"\n\t\t\tif (extra === \".\") return \"([^/]+)\\\\.\"\n\t\t\treturn \"([^/]+)\" + (extra || \"\")\n\t\t}\n\t) + \"$\")\n\treturn function(data) {\n\t\t// First, check the params. Usually, there isn't any, and it's just\n\t\t// checking a static set.\n\t\tfor (var i = 0; i < templateKeys.length; i++) {\n\t\t\tif (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false\n\t\t}\n\t\t// If no interpolations exist, let's skip all the ceremony\n\t\tif (!keys.length) return regexp.test(data.path)\n\t\tvar values = regexp.exec(data.path)\n\t\tif (values == null) return false\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tdata.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])\n\t\t}\n\t\treturn true\n\t}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/pathname/compileTemplate.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/pathname/parse.js":
/*!**********************************************************!*\
  !*** ../../walax/node_modules/mithril/pathname/parse.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar parseQueryString = __webpack_require__(/*! ../querystring/parse */ \"../../walax/node_modules/mithril/querystring/parse.js\")\n\n// Returns `{path, params}` from `url`\nmodule.exports = function(url) {\n\tvar queryIndex = url.indexOf(\"?\")\n\tvar hashIndex = url.indexOf(\"#\")\n\tvar queryEnd = hashIndex < 0 ? url.length : hashIndex\n\tvar pathEnd = queryIndex < 0 ? queryEnd : queryIndex\n\tvar path = url.slice(0, pathEnd).replace(/\\/{2,}/g, \"/\")\n\n\tif (!path) path = \"/\"\n\telse {\n\t\tif (path[0] !== \"/\") path = \"/\" + path\n\t\tif (path.length > 1 && path[path.length - 1] === \"/\") path = path.slice(0, -1)\n\t}\n\treturn {\n\t\tpath: path,\n\t\tparams: queryIndex < 0\n\t\t\t? {}\n\t\t\t: parseQueryString(url.slice(queryIndex + 1, queryEnd)),\n\t}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/pathname/parse.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/promise/polyfill.js":
/*!************************************************************!*\
  !*** ../../walax/node_modules/mithril/promise/polyfill.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.prototype.finally = function(callback) {\n\treturn this.then(\n\t\tfunction(value) {\n\t\t\treturn PromisePolyfill.resolve(callback()).then(function() {\n\t\t\t\treturn value\n\t\t\t})\n\t\t},\n\t\tfunction(reason) {\n\t\t\treturn PromisePolyfill.resolve(callback()).then(function() {\n\t\t\t\treturn PromisePolyfill.reject(reason);\n\t\t\t})\n\t\t}\n\t)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\n\nmodule.exports = PromisePolyfill\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/promise/polyfill.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/promise/promise.js":
/*!***********************************************************!*\
  !*** ../../walax/node_modules/mithril/promise/promise.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar PromisePolyfill = __webpack_require__(/*! ./polyfill */ \"../../walax/node_modules/mithril/promise/polyfill.js\")\n\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") {\n\t\twindow.Promise = PromisePolyfill\n\t} else if (!window.Promise.prototype.finally) {\n\t\twindow.Promise.prototype.finally = PromisePolyfill.prototype.finally\n\t}\n\tmodule.exports = window.Promise\n} else if (typeof __webpack_require__.g !== \"undefined\") {\n\tif (typeof __webpack_require__.g.Promise === \"undefined\") {\n\t\t__webpack_require__.g.Promise = PromisePolyfill\n\t} else if (!__webpack_require__.g.Promise.prototype.finally) {\n\t\t__webpack_require__.g.Promise.prototype.finally = PromisePolyfill.prototype.finally\n\t}\n\tmodule.exports = __webpack_require__.g.Promise\n} else {\n\tmodule.exports = PromisePolyfill\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/promise/promise.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/querystring/build.js":
/*!*************************************************************!*\
  !*** ../../walax/node_modules/mithril/querystring/build.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\n\tvar args = []\n\tfor (var key in object) {\n\t\tdestructure(key, object[key])\n\t}\n\n\treturn args.join(\"&\")\n\n\tfunction destructure(key, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/querystring/build.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/querystring/parse.js":
/*!*************************************************************!*\
  !*** ../../walax/node_modules/mithril/querystring/parse.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\n\tvar entries = string.split(\"&\"), counters = {}, data = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\n\t\tvar levels = key.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data\n\t\tif (key.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key = levels.slice(0, j).join()\n\t\t\t\tif (counters[key] == null) {\n\t\t\t\t\tcounters[key] = Array.isArray(cursor) ? cursor.length : 0\n\t\t\t\t}\n\t\t\t\tlevel = counters[key]++\n\t\t\t}\n\t\t\t// Disallow direct prototype pollution\n\t\t\telse if (level === \"__proto__\") break\n\t\t\tif (j === levels.length - 1) cursor[level] = value\n\t\t\telse {\n\t\t\t\t// Read own properties exclusively to disallow indirect\n\t\t\t\t// prototype pollution\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(cursor, level)\n\t\t\t\tif (desc != null) desc = desc.value\n\t\t\t\tif (desc == null) cursor[level] = desc = isNumber ? [] : {}\n\t\t\t\tcursor = desc\n\t\t\t}\n\t\t}\n\t}\n\treturn data\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/querystring/parse.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render.js":
/*!**************************************************!*\
  !*** ../../walax/node_modules/mithril/render.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./render/render */ \"../../walax/node_modules/mithril/render/render.js\")(window)\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/fragment.js":
/*!***********************************************************!*\
  !*** ../../walax/node_modules/mithril/render/fragment.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\nvar hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ \"../../walax/node_modules/mithril/render/hyperscriptVnode.js\")\n\nmodule.exports = function() {\n\tvar vnode = hyperscriptVnode.apply(0, arguments)\n\n\tvnode.tag = \"[\"\n\tvnode.children = Vnode.normalizeChildren(vnode.children)\n\treturn vnode\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/fragment.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/hyperscript.js":
/*!**************************************************************!*\
  !*** ../../walax/node_modules/mithril/render/hyperscript.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\nvar hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ \"../../walax/node_modules/mithril/render/hyperscriptVnode.js\")\n\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\n\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\n\nfunction compileSelector(selector) {\n\tvar match, tag = \"div\", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === \"\" && value !== \"\") tag = value\n\t\telse if (type === \"#\") attrs.id = value\n\t\telse if (type === \".\") classes.push(value)\n\t\telse if (match[3][0] === \"[\") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === \"\" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(\" \")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\n\nfunction execSelector(state, vnode) {\n\tvar attrs = vnode.attrs\n\tvar children = Vnode.normalizeChildren(vnode.children)\n\tvar hasClass = hasOwn.call(attrs, \"class\")\n\tvar className = hasClass ? attrs.class : attrs.className\n\n\tvnode.tag = state.tag\n\tvnode.attrs = null\n\tvnode.children = undefined\n\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\n\t\tfor (var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key]\n\t\t}\n\n\t\tattrs = newAttrs\n\t}\n\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key) && key !== \"className\" && !hasOwn.call(attrs, key)){\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className != null || state.attrs.className != null) attrs.className =\n\t\tclassName != null\n\t\t\t? state.attrs.className != null\n\t\t\t\t? String(state.attrs.className) + \" \" + String(className)\n\t\t\t\t: className\n\t\t\t: state.attrs.className != null\n\t\t\t\t? state.attrs.className\n\t\t\t\t: null\n\n\tif (hasClass) attrs.class = null\n\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== \"key\") {\n\t\t\tvnode.attrs = attrs\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === \"#\") {\n\t\tvnode.text = children[0].children\n\t} else {\n\t\tvnode.children = children\n\t}\n\n\treturn vnode\n}\n\nfunction hyperscript(selector) {\n\tif (selector == null || typeof selector !== \"string\" && typeof selector !== \"function\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\n\tvar vnode = hyperscriptVnode.apply(1, arguments)\n\n\tif (typeof selector === \"string\") {\n\t\tvnode.children = Vnode.normalizeChildren(vnode.children)\n\t\tif (selector !== \"[\") return execSelector(selectorCache[selector] || compileSelector(selector), vnode)\n\t}\n\n\tvnode.tag = selector\n\treturn vnode\n}\n\nmodule.exports = hyperscript\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/hyperscript.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/hyperscriptVnode.js":
/*!*******************************************************************!*\
  !*** ../../walax/node_modules/mithril/render/hyperscriptVnode.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\n\n// Call via `hyperscriptVnode.apply(startOffset, arguments)`\n//\n// The reason I do it this way, forwarding the arguments and passing the start\n// offset in `this`, is so I don't have to create a temporary array in a\n// performance-critical path.\n//\n// In native ES6, I'd instead add a final `...args` parameter to the\n// `hyperscript` and `fragment` factories and define this as\n// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But\n// ES5 (what Mithril requires thanks to IE support) doesn't give me that luxury,\n// and engines aren't nearly intelligent enough to do either of these:\n//\n// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to\n//    another function only to be indexed.\n// 2. Elide an `arguments` allocation when it's passed to any function other\n//    than `Function.prototype.apply` or `Reflect.apply`.\n//\n// In ES6, it'd probably look closer to this (I'd need to profile it, though):\n// module.exports = function(attrs, ...children) {\n//     if (attrs == null || typeof attrs === \"object\" && attrs.tag == null && !Array.isArray(attrs)) {\n//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]\n//     } else {\n//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]\n//         attrs = undefined\n//     }\n//\n//     if (attrs == null) attrs = {}\n//     return Vnode(\"\", attrs.key, attrs, children)\n// }\nmodule.exports = function() {\n\tvar attrs = arguments[this], start = this + 1, children\n\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== \"object\" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = this\n\t}\n\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\n\treturn Vnode(\"\", attrs.key, attrs, children)\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/hyperscriptVnode.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/render.js":
/*!*********************************************************!*\
  !*** ../../walax/node_modules/mithril/render/render.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function($window) {\n\tvar $doc = $window && $window.document\n\tvar currentRedraw\n\n\tvar nameSpace = {\n\t\tsvg: \"http://www.w3.org/2000/svg\",\n\t\tmath: \"http://www.w3.org/1998/Math/MathML\"\n\t}\n\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\n\t//sanity check to discourage people from doing `vnode.state = ...`\n\tfunction checkState(vnode, original) {\n\t\tif (vnode.state !== original) throw new Error(\"`vnode.state` must not be modified\")\n\t}\n\n\t//Note: the hook is passed as the `this` argument to allow proxying the\n\t//arguments without requiring a full array allocation to do so. It also\n\t//takes advantage of the fact the current `vnode` is the first argument in\n\t//all lifecycle methods.\n\tfunction callHook(vnode) {\n\t\tvar original = vnode.state\n\t\ttry {\n\t\t\treturn this.apply(original, arguments)\n\t\t} finally {\n\t\t\tcheckState(vnode, original)\n\t\t}\n\t}\n\n\t// IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when\n\t// inside an iframe. Catch and swallow this error, and heavy-handidly return null.\n\tfunction activeElement() {\n\t\ttry {\n\t\t\treturn $doc.activeElement\n\t\t} catch (e) {\n\t\t\treturn null\n\t\t}\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === \"string\") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": createText(parent, vnode, nextSibling); break\n\t\t\t\tcase \"<\": createHTML(parent, vnode, ns, nextSibling); break\n\t\t\t\tcase \"[\": createFragment(parent, vnode, hooks, ns, nextSibling); break\n\t\t\t\tdefault: createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t}\n\tvar possibleParents = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}\n\tfunction createHTML(parent, vnode, ns, nextSibling) {\n\t\tvar match = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\t// not using the proper parent makes the child element(s) vanish.\n\t\t//     var div = document.createElement(\"div\")\n\t\t//     div.innerHTML = \"<td>i</td><td>j</td>\"\n\t\t//     console.log(div.innerHTML)\n\t\t// --> \"ij\", no <td> in sight.\n\t\tvar temp = $doc.createElement(possibleParents[match[1]] || \"div\")\n\t\tif (ns === \"http://www.w3.org/2000/svg\") {\n\t\t\ttemp.innerHTML = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + vnode.children + \"</svg>\"\n\t\t\ttemp = temp.firstChild\n\t\t} else {\n\t\t\ttemp.innerHTML = vnode.children\n\t\t}\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\t// Capture nodes to remove, so we don't confuse them.\n\t\tvnode.instance = []\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tvnode.instance.push(child)\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs = vnode.attrs\n\t\tvar is = attrs && attrs.is\n\n\t\tns = getNameSpace(vnode) || ns\n\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\n\t\tif (attrs != null) {\n\t\t\tsetAttrs(vnode, attrs, ns)\n\t\t}\n\n\t\tinsertNode(parent, element, nextSibling)\n\n\t\tif (!maybeSetContentEditable(vnode)) {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tif (vnode.tag === \"select\" && attrs != null) setLateSelectAttrs(vnode, attrs)\n\t\t\t}\n\t\t}\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === \"function\") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tinitLifecycle(vnode.state, vnode, hooks)\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tcreateNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t}\n\t}\n\n\t//update\n\t/**\n\t * @param {Element|Fragment} parent - the parent element\n\t * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for\n\t *                               this part of the tree\n\t * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.\n\t * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)\n\t * @param {Element | null} nextSibling - the next DOM node if we're dealing with a\n\t *                                       fragment that is not the last item in its\n\t *                                       parent\n\t * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any\n\t * @returns void\n\t */\n\t// This function diffs and patches lists of vnodes, both keyed and unkeyed.\n\t//\n\t// We will:\n\t//\n\t// 1. describe its general structure\n\t// 2. focus on the diff algorithm optimizations\n\t// 3. discuss DOM node operations.\n\n\t// ## Overview:\n\t//\n\t// The updateNodes() function:\n\t// - deals with trivial cases\n\t// - determines whether the lists are keyed or unkeyed based on the first non-null node\n\t//   of each list.\n\t// - diffs them and patches the DOM if needed (that's the brunt of the code)\n\t// - manages the leftovers: after diffing, are there:\n\t//   - old nodes left to remove?\n\t// \t - new nodes to insert?\n\t// \t deal with them!\n\t//\n\t// The lists are only iterated over once, with an exception for the nodes in `old` that\n\t// are visited in the fourth part of the diff and in the `removeNodes` loop.\n\n\t// ## Diffing\n\t//\n\t// Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837\n\t// may be good for context on longest increasing subsequence-based logic for moving nodes.\n\t//\n\t// In order to diff keyed lists, one has to\n\t//\n\t// 1) match nodes in both lists, per key, and update them accordingly\n\t// 2) create the nodes present in the new list, but absent in the old one\n\t// 3) remove the nodes present in the old list, but absent in the new one\n\t// 4) figure out what nodes in 1) to move in order to minimize the DOM operations.\n\t//\n\t// To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate\n\t// over the new list and for each new vnode, find the corresponding vnode in the old list using\n\t// the map.\n\t// 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new\n\t// and must be created.\n\t// For the removals, we actually remove the nodes that have been updated from the old list.\n\t// The nodes that remain in that list after 1) and 2) have been performed can be safely removed.\n\t// The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)\n\t// algorithm.\n\t//\n\t// the longest increasing subsequence is the list of nodes that can remain in place. Imagine going\n\t// from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices\n\t// corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would\n\t//  match the above lists, for example).\n\t//\n\t// In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We\n\t// can update those nodes without moving them, and only call `insertNode` on `4` and `5`.\n\t//\n\t// @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually\n\t// the longest increasing subsequence *of old nodes still present in the new list*).\n\t//\n\t// It is a general algorithm that is fireproof in all circumstances, but it requires the allocation\n\t// and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,\n\t// the `LIS` and a temporary one to create the LIS).\n\t//\n\t// So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of\n\t// the LIS and can be updated without moving them.\n\t//\n\t// If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with\n\t// the exception of the last node if the list is fully reversed).\n\t//\n\t// ## Finding the next sibling.\n\t//\n\t// `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.\n\t// When the list is being traversed top-down, at any index, the DOM nodes up to the previous\n\t// vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old\n\t// list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.\n\t//\n\t// In the other scenarios (swaps, upwards traversal, map-based diff),\n\t// the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the\n\t// bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node\n\t// as the next sibling (cached in the `nextSibling` variable).\n\n\n\t// ## DOM node moves\n\t//\n\t// In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,\n\t// this is not the case if the node moved (second and fourth part of the diff algo). We move\n\t// the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`\n\t// variable rather than fetching it using `getNextSibling()`.\n\t//\n\t// The fourth part of the diff currently inserts nodes unconditionally, leading to issues\n\t// like #1791 and #1999. We need to be smarter about those situations where adjascent old\n\t// nodes remain together in the new list in a way that isn't covered by parts one and\n\t// three of the diff algo.\n\n\tfunction updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length)\n\t\telse {\n\t\t\tvar isOldKeyed = old[0] != null && old[0].key != null\n\t\t\tvar isKeyed = vnodes[0] != null && vnodes[0].key != null\n\t\t\tvar start = 0, oldStart = 0\n\t\t\tif (!isOldKeyed) while (oldStart < old.length && old[oldStart] == null) oldStart++\n\t\t\tif (!isKeyed) while (start < vnodes.length && vnodes[start] == null) start++\n\t\t\tif (isKeyed === null && isOldKeyed == null) return // both lists are full of nulls\n\t\t\tif (isOldKeyed !== isKeyed) {\n\t\t\t\tremoveNodes(parent, old, oldStart, old.length)\n\t\t\t\tcreateNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)\n\t\t\t} else if (!isKeyed) {\n\t\t\t\t// Don't index past the end of either list (causes deopts).\n\t\t\t\tvar commonLength = old.length < vnodes.length ? old.length : vnodes.length\n\t\t\t\t// Rewind if necessary to the first non-null index on either side.\n\t\t\t\t// We could alternatively either explicitly create or remove nodes when `start !== oldStart`\n\t\t\t\t// but that would be optimizing for sparse lists which are more rare than dense ones.\n\t\t\t\tstart = start < oldStart ? start : oldStart\n\t\t\t\tfor (; start < commonLength; start++) {\n\t\t\t\t\to = old[start]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t\tif (o === v || o == null && v == null) continue\n\t\t\t\t\telse if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling))\n\t\t\t\t\telse if (v == null) removeNode(parent, o)\n\t\t\t\t\telse updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns)\n\t\t\t\t}\n\t\t\t\tif (old.length > commonLength) removeNodes(parent, old, start, old.length)\n\t\t\t\tif (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)\n\t\t\t} else {\n\t\t\t\t// keyed diff\n\t\t\t\tvar oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling\n\n\t\t\t\t// bottom-up\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t\tif (oe.key !== ve.key) break\n\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\t// top-down\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\to = old[oldStart]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t\tif (o.key !== v.key) break\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tif (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns)\n\t\t\t\t}\n\t\t\t\t// swaps and list reversals\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\tif (start === end) break\n\t\t\t\t\tif (o.key !== ve.key || oe.key !== v.key) break\n\t\t\t\t\ttopSibling = getNextSibling(old, oldStart, nextSibling)\n\t\t\t\t\tmoveNodes(parent, oe, topSibling)\n\t\t\t\t\tif (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns)\n\t\t\t\t\tif (++start <= --end) moveNodes(parent, o, nextSibling)\n\t\t\t\t\tif (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldStart++; oldEnd--\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t\to = old[oldStart]\n\t\t\t\t\tv = vnodes[start]\n\t\t\t\t}\n\t\t\t\t// bottom up once again\n\t\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\t\tif (oe.key !== ve.key) break\n\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t\toe = old[oldEnd]\n\t\t\t\t\tve = vnodes[end]\n\t\t\t\t}\n\t\t\t\tif (start > end) removeNodes(parent, old, oldStart, oldEnd + 1)\n\t\t\t\telse if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\t\telse {\n\t\t\t\t\t// inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul\n\t\t\t\t\tvar originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li=0, i=0, pos = 2147483647, matched = 0, map, lisIndices\n\t\t\t\t\tfor (i = 0; i < vnodesLength; i++) oldIndices[i] = -1\n\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\tif (map == null) map = getKeyMap(old, oldStart, oldEnd + 1)\n\t\t\t\t\t\tve = vnodes[i]\n\t\t\t\t\t\tvar oldIndex = map[ve.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tpos = (oldIndex < pos) ? oldIndex : -1 // becomes -1 if nodes were re-ordered\n\t\t\t\t\t\t\toldIndices[i-start] = oldIndex\n\t\t\t\t\t\t\toe = old[oldIndex]\n\t\t\t\t\t\t\told[oldIndex] = null\n\t\t\t\t\t\t\tif (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)\n\t\t\t\t\t\t\tif (ve.dom != null) nextSibling = ve.dom\n\t\t\t\t\t\t\tmatched++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnextSibling = originalNextSibling\n\t\t\t\t\tif (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1)\n\t\t\t\t\tif (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (pos === -1) {\n\t\t\t\t\t\t\t// the indices of the indices of the items that are part of the\n\t\t\t\t\t\t\t// longest increasing subsequence in the oldIndices list\n\t\t\t\t\t\t\tlisIndices = makeLisIndices(oldIndices)\n\t\t\t\t\t\t\tli = lisIndices.length - 1\n\t\t\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\t\t\tv = vnodes[i]\n\t\t\t\t\t\t\t\tif (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif (lisIndices[li] === i - start) li--\n\t\t\t\t\t\t\t\t\telse moveNodes(parent, v, nextSibling)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (v.dom != null) nextSibling = vnodes[i].dom\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (i = end; i >= start; i--) {\n\t\t\t\t\t\t\t\tv = vnodes[i]\n\t\t\t\t\t\t\t\tif (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\t\tif (v.dom != null) nextSibling = vnodes[i].dom\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode.events = old.events\n\t\t\tif (shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tupdateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, ns, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(parent, old)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, ns, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\tremoveHTML(parent, old)\n\t\t\tcreateHTML(parent, vnode, ns, nextSibling)\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t}\n\t}\n\tfunction updateFragment(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (!maybeSetContentEditable(vnode)) {\n\t\t\tif (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t\tupdateNodes(element, old.children, vnode.children, hooks, null, ns)\n\t\t\t}\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, ns) {\n\t\tvnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tupdateLifecycle(vnode.state, vnode, hooks)\n\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(parent, old.instance)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction getKeyMap(vnodes, start, end) {\n\t\tvar map = Object.create(null)\n\t\tfor (; start < end; start++) {\n\t\t\tvar vnode = vnodes[start]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key = vnode.key\n\t\t\t\tif (key != null) map[key] = start\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\t// Lifted from ivi https://github.com/ivijs/ivi/\n\t// takes a list of unique numbers (-1 is special and can\n\t// occur multiple times) and returns an array with the indices\n\t// of the items that are part of the longest increasing\n\t// subsequece\n\tvar lisTemp = []\n\tfunction makeLisIndices(a) {\n\t\tvar result = [0]\n\t\tvar u = 0, v = 0, i = 0\n\t\tvar il = lisTemp.length = a.length\n\t\tfor (var i = 0; i < il; i++) lisTemp[i] = a[i]\n\t\tfor (var i = 0; i < il; ++i) {\n\t\t\tif (a[i] === -1) continue\n\t\t\tvar j = result[result.length - 1]\n\t\t\tif (a[j] < a[i]) {\n\t\t\t\tlisTemp[i] = j\n\t\t\t\tresult.push(i)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tu = 0\n\t\t\tv = result.length - 1\n\t\t\twhile (u < v) {\n\t\t\t\t// Fast integer average without overflow.\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tvar c = (u >>> 1) + (v >>> 1) + (u & v & 1)\n\t\t\t\tif (a[result[c]] < a[i]) {\n\t\t\t\t\tu = c + 1\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tv = c\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (a[i] < a[result[u]]) {\n\t\t\t\tif (u > 0) lisTemp[i] = result[u - 1]\n\t\t\t\tresult[u] = i\n\t\t\t}\n\t\t}\n\t\tu = result.length\n\t\tv = result[u - 1]\n\t\twhile (u-- > 0) {\n\t\t\tresult[u] = v\n\t\t\tv = lisTemp[v]\n\t\t}\n\t\tlisTemp.length = 0\n\t\treturn result\n\t}\n\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\n\t// This covers a really specific edge case:\n\t// - Parent node is keyed and contains child\n\t// - Child is removed, returns unresolved promise in `onbeforeremove`\n\t// - Parent node is moved in keyed diff\n\t// - Remaining children still need moved appropriately\n\t//\n\t// Ideally, I'd track removed nodes as well, but that introduces a lot more\n\t// complexity and I'm not exactly interested in doing that.\n\tfunction moveNodes(parent, vnode, nextSibling) {\n\t\tvar frag = $doc.createDocumentFragment()\n\t\tmoveChildToFrag(parent, frag, vnode)\n\t\tinsertNode(parent, frag, nextSibling)\n\t}\n\tfunction moveChildToFrag(parent, frag, vnode) {\n\t\t// Dodge the recursion overhead in a few of the most common cases.\n\t\twhile (vnode.dom != null && vnode.dom.parentNode === parent) {\n\t\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\t\tvnode = vnode.instance\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else if (vnode.tag === \"<\") {\n\t\t\t\tfor (var i = 0; i < vnode.instance.length; i++) {\n\t\t\t\t\tfrag.appendChild(vnode.instance[i])\n\t\t\t\t}\n\t\t\t} else if (vnode.tag !== \"[\") {\n\t\t\t\t// Don't recurse for text nodes *or* elements, just fragments\n\t\t\t\tfrag.appendChild(vnode.dom)\n\t\t\t} else if (vnode.children.length === 1) {\n\t\t\t\tvnode = vnode.children[0]\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < vnode.children.length; i++) {\n\t\t\t\t\tvar child = vnode.children[i]\n\t\t\t\t\tif (child != null) moveChildToFrag(parent, frag, child)\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling != null) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\n\tfunction maybeSetContentEditable(vnode) {\n\t\tif (vnode.attrs == null || (\n\t\t\tvnode.attrs.contenteditable == null && // attribute\n\t\t\tvnode.attrs.contentEditable == null // property\n\t\t)) return false\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t\treturn true\n\t}\n\n\t//remove\n\tfunction removeNodes(parent, vnodes, start, end) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) removeNode(parent, vnode)\n\t\t}\n\t}\n\tfunction removeNode(parent, vnode) {\n\t\tvar mask = 0\n\t\tvar original = vnode.state\n\t\tvar stateResult, attrsResult\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeremove === \"function\") {\n\t\t\tvar result = callHook.call(vnode.state.onbeforeremove, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\tmask = 1\n\t\t\t\tstateResult = result\n\t\t\t}\n\t\t}\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n\t\t\tvar result = callHook.call(vnode.attrs.onbeforeremove, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tmask |= 2\n\t\t\t\tattrsResult = result\n\t\t\t}\n\t\t}\n\t\tcheckState(vnode, original)\n\n\t\t// If we can, try to fast-path it and avoid all the overhead of awaiting\n\t\tif (!mask) {\n\t\t\tonremove(vnode)\n\t\t\tremoveChild(parent, vnode)\n\t\t} else {\n\t\t\tif (stateResult != null) {\n\t\t\t\tvar next = function () {\n\t\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\t\tif (mask & 1) { mask &= 2; if (!mask) reallyRemove() }\n\t\t\t\t}\n\t\t\t\tstateResult.then(next, next)\n\t\t\t}\n\t\t\tif (attrsResult != null) {\n\t\t\t\tvar next = function () {\n\t\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\t\tif (mask & 2) { mask &= 1; if (!mask) reallyRemove() }\n\t\t\t\t}\n\t\t\t\tattrsResult.then(next, next)\n\t\t\t}\n\t\t}\n\n\t\tfunction reallyRemove() {\n\t\t\tcheckState(vnode, original)\n\t\t\tonremove(vnode)\n\t\t\tremoveChild(parent, vnode)\n\t\t}\n\t}\n\tfunction removeHTML(parent, vnode) {\n\t\tfor (var i = 0; i < vnode.instance.length; i++) {\n\t\t\tparent.removeChild(vnode.instance[i])\n\t\t}\n\t}\n\tfunction removeChild(parent, vnode) {\n\t\t// Dodge the recursion overhead in a few of the most common cases.\n\t\twhile (vnode.dom != null && vnode.dom.parentNode === parent) {\n\t\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\t\tvnode = vnode.instance\n\t\t\t\tif (vnode != null) continue\n\t\t\t} else if (vnode.tag === \"<\") {\n\t\t\t\tremoveHTML(parent, vnode)\n\t\t\t} else {\n\t\t\t\tif (vnode.tag !== \"[\") {\n\t\t\t\t\tparent.removeChild(vnode.dom)\n\t\t\t\t\tif (!Array.isArray(vnode.children)) break\n\t\t\t\t}\n\t\t\t\tif (vnode.children.length === 1) {\n\t\t\t\t\tvnode = vnode.children[0]\n\t\t\t\t\tif (vnode != null) continue\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i = 0; i < vnode.children.length; i++) {\n\t\t\t\t\t\tvar child = vnode.children[i]\n\t\t\t\t\t\tif (child != null) removeChild(parent, child)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\tfunction onremove(vnode) {\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onremove === \"function\") callHook.call(vnode.state.onremove, vnode)\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === \"function\") callHook.call(vnode.attrs.onremove, vnode)\n\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//attrs\n\tfunction setAttrs(vnode, attrs, ns) {\n\t\tfor (var key in attrs) {\n\t\t\tsetAttr(vnode, key, null, attrs[key], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key, old, value, ns) {\n\t\tif (key === \"key\" || key === \"is\" || value == null || isLifecycleMethod(key) || (old === value && !isFormAttribute(vnode, key)) && typeof value !== \"object\") return\n\t\tif (key[0] === \"o\" && key[1] === \"n\") return updateEvent(vnode, key, value)\n\t\tif (key.slice(0, 6) === \"xlink:\") vnode.dom.setAttributeNS(\"http://www.w3.org/1999/xlink\", key.slice(6), value)\n\t\telse if (key === \"style\") updateStyle(vnode.dom, old, value)\n\t\telse if (hasPropertyKey(vnode, key, ns)) {\n\t\t\tif (key === \"value\") {\n\t\t\t\t// Only do the coercion if we're actually going to check the value.\n\t\t\t\t/* eslint-disable no-implicit-coercion */\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === \"input\" || vnode.tag === \"textarea\") && vnode.dom.value === \"\" + value && vnode.dom === activeElement()) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"select\" && old !== null && vnode.dom.value === \"\" + value) return\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"option\" && old !== null && vnode.dom.value === \"\" + value) return\n\t\t\t\t/* eslint-enable no-implicit-coercion */\n\t\t\t}\n\t\t\t// If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.\n\t\t\tif (vnode.tag === \"input\" && key === \"type\") vnode.dom.setAttribute(key, value)\n\t\t\telse vnode.dom[key] = value\n\t\t} else {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) vnode.dom.setAttribute(key, \"\")\n\t\t\t\telse vnode.dom.removeAttribute(key)\n\t\t\t}\n\t\t\telse vnode.dom.setAttribute(key === \"className\" ? \"class\" : key, value)\n\t\t}\n\t}\n\tfunction removeAttr(vnode, key, old, ns) {\n\t\tif (key === \"key\" || key === \"is\" || old == null || isLifecycleMethod(key)) return\n\t\tif (key[0] === \"o\" && key[1] === \"n\" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined)\n\t\telse if (key === \"style\") updateStyle(vnode.dom, old, null)\n\t\telse if (\n\t\t\thasPropertyKey(vnode, key, ns)\n\t\t\t&& key !== \"className\"\n\t\t\t&& !(key === \"value\" && (\n\t\t\t\tvnode.tag === \"option\"\n\t\t\t\t|| vnode.tag === \"select\" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement()\n\t\t\t))\n\t\t\t&& !(vnode.tag === \"input\" && key === \"type\")\n\t\t) {\n\t\t\tvnode.dom[key] = null\n\t\t} else {\n\t\t\tvar nsLastIndex = key.indexOf(\":\")\n\t\t\tif (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1)\n\t\t\tif (old !== false) vnode.dom.removeAttribute(key === \"className\" ? \"class\" : key)\n\t\t}\n\t}\n\tfunction setLateSelectAttrs(vnode, attrs) {\n\t\tif (\"value\" in attrs) {\n\t\t\tif(attrs.value === null) {\n\t\t\t\tif (vnode.dom.selectedIndex !== -1) vnode.dom.value = null\n\t\t\t} else {\n\t\t\t\tvar normalized = \"\" + attrs.value // eslint-disable-line no-implicit-coercion\n\t\t\t\tif (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) {\n\t\t\t\t\tvnode.dom.value = normalized\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (\"selectedIndex\" in attrs) setAttr(vnode, \"selectedIndex\", null, attrs.selectedIndex, undefined)\n\t}\n\tfunction updateAttrs(vnode, old, attrs, ns) {\n\t\tif (attrs != null) {\n\t\t\tfor (var key in attrs) {\n\t\t\t\tsetAttr(vnode, key, old && old[key], attrs[key], ns)\n\t\t\t}\n\t\t}\n\t\tvar val\n\t\tif (old != null) {\n\t\t\tfor (var key in old) {\n\t\t\t\tif (((val = old[key]) != null) && (attrs == null || attrs[key] == null)) {\n\t\t\t\t\tremoveAttr(vnode, key, val, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === activeElement() || vnode.tag === \"option\" && vnode.dom.parentNode === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction hasPropertyKey(vnode, key, ns) {\n\t\t// Filter out namespaced keys\n\t\treturn ns === undefined && (\n\t\t\t// If it's a custom element, just keep it.\n\t\t\tvnode.tag.indexOf(\"-\") > -1 || vnode.attrs != null && vnode.attrs.is ||\n\t\t\t// If it's a normal element, let's try to avoid a few browser bugs.\n\t\t\tkey !== \"href\" && key !== \"list\" && key !== \"form\" && key !== \"width\" && key !== \"height\"// && key !== \"type\"\n\t\t\t// Defer the property check until *after* we check everything.\n\t\t) && key in vnode.dom\n\t}\n\n\t//style\n\tvar uppercaseRegex = /[A-Z]/g\n\tfunction toLowerCase(capital) { return \"-\" + capital.toLowerCase() }\n\tfunction normalizeKey(key) {\n\t\treturn key[0] === \"-\" && key[1] === \"-\" ? key :\n\t\t\tkey === \"cssFloat\" ? \"float\" :\n\t\t\t\tkey.replace(uppercaseRegex, toLowerCase)\n\t}\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) {\n\t\t\t// Styles are equivalent, do nothing.\n\t\t} else if (style == null) {\n\t\t\t// New style is missing, just clear it.\n\t\t\telement.style.cssText = \"\"\n\t\t} else if (typeof style !== \"object\") {\n\t\t\t// New style is a string, let engine deal with patching.\n\t\t\telement.style.cssText = style\n\t\t} else if (old == null || typeof old !== \"object\") {\n\t\t\t// `old` is missing or a string, `style` is an object.\n\t\t\telement.style.cssText = \"\"\n\t\t\t// Add new style properties\n\t\t\tfor (var key in style) {\n\t\t\t\tvar value = style[key]\n\t\t\t\tif (value != null) element.style.setProperty(normalizeKey(key), String(value))\n\t\t\t}\n\t\t} else {\n\t\t\t// Both old & new are (different) objects.\n\t\t\t// Update style properties that have changed\n\t\t\tfor (var key in style) {\n\t\t\t\tvar value = style[key]\n\t\t\t\tif (value != null && (value = String(value)) !== String(old[key])) {\n\t\t\t\t\telement.style.setProperty(normalizeKey(key), value)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Remove style properties that no longer exist\n\t\t\tfor (var key in old) {\n\t\t\t\tif (old[key] != null && style[key] == null) {\n\t\t\t\t\telement.style.removeProperty(normalizeKey(key))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Here's an explanation of how this works:\n\t// 1. The event names are always (by design) prefixed by `on`.\n\t// 2. The EventListener interface accepts either a function or an object\n\t//    with a `handleEvent` method.\n\t// 3. The object does not inherit from `Object.prototype`, to avoid\n\t//    any potential interference with that (e.g. setters).\n\t// 4. The event name is remapped to the handler before calling it.\n\t// 5. In function-based event handlers, `ev.target === this`. We replicate\n\t//    that below.\n\t// 6. In function-based event handlers, `return false` prevents the default\n\t//    action and stops event propagation. We replicate that below.\n\tfunction EventDict() {\n\t\t// Save this, so the current redraw is correctly tracked.\n\t\tthis._ = currentRedraw\n\t}\n\tEventDict.prototype = Object.create(null)\n\tEventDict.prototype.handleEvent = function (ev) {\n\t\tvar handler = this[\"on\" + ev.type]\n\t\tvar result\n\t\tif (typeof handler === \"function\") result = handler.call(ev.currentTarget, ev)\n\t\telse if (typeof handler.handleEvent === \"function\") handler.handleEvent(ev)\n\t\tif (this._ && ev.redraw !== false) (0, this._)()\n\t\tif (result === false) {\n\t\t\tev.preventDefault()\n\t\t\tev.stopPropagation()\n\t\t}\n\t}\n\n\t//event\n\tfunction updateEvent(vnode, key, value) {\n\t\tif (vnode.events != null) {\n\t\t\tif (vnode.events[key] === value) return\n\t\t\tif (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n\t\t\t\tif (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false)\n\t\t\t\tvnode.events[key] = value\n\t\t\t} else {\n\t\t\t\tif (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false)\n\t\t\t\tvnode.events[key] = undefined\n\t\t\t}\n\t\t} else if (value != null && (typeof value === \"function\" || typeof value === \"object\")) {\n\t\t\tvnode.events = new EventDict()\n\t\t\tvnode.dom.addEventListener(key.slice(2), vnode.events, false)\n\t\t\tvnode.events[key] = value\n\t\t}\n\t}\n\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") callHook.call(source.oninit, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(callHook.bind(source.oncreate, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === \"function\") hooks.push(callHook.bind(source.onupdate, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tdo {\n\t\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") {\n\t\t\t\tvar force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old)\n\t\t\t\tif (force !== undefined && !force) break\n\t\t\t}\n\t\t\tif (typeof vnode.tag !== \"string\" && typeof vnode.state.onbeforeupdate === \"function\") {\n\t\t\t\tvar force = callHook.call(vnode.state.onbeforeupdate, vnode, old)\n\t\t\t\tif (force !== undefined && !force) break\n\t\t\t}\n\t\t\treturn false\n\t\t} while (false); // eslint-disable-line no-constant-condition\n\t\tvnode.dom = old.dom\n\t\tvnode.domSize = old.domSize\n\t\tvnode.instance = old.instance\n\t\t// One would think having the actual latest attributes would be ideal,\n\t\t// but it doesn't let us properly diff based on our current internal\n\t\t// representation. We have to save not only the old DOM info, but also\n\t\t// the attributes used to create it, as we diff *that*, not against the\n\t\t// DOM directly (with a few exceptions in `setAttr`). And, of course, we\n\t\t// need to save the children and text as they are conceptually not\n\t\t// unlike special \"attributes\" internally.\n\t\tvnode.attrs = old.attrs\n\t\tvnode.children = old.children\n\t\tvnode.text = old.text\n\t\treturn true\n\t}\n\n\treturn function(dom, vnodes, redraw) {\n\t\tif (!dom) throw new TypeError(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = activeElement()\n\t\tvar namespace = dom.namespaceURI\n\n\t\t// First time rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\n\t\tvnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [vnodes])\n\t\tvar prevRedraw = currentRedraw\n\t\ttry {\n\t\t\tcurrentRedraw = typeof redraw === \"function\" ? redraw : undefined\n\t\t\tupdateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === \"http://www.w3.org/1999/xhtml\" ? undefined : namespace)\n\t\t} finally {\n\t\t\tcurrentRedraw = prevRedraw\n\t\t}\n\t\tdom.vnodes = vnodes\n\t\t// `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement\n\t\tif (active != null && activeElement() !== active && typeof active.focus === \"function\") active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/render.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/trust.js":
/*!********************************************************!*\
  !*** ../../walax/node_modules/mithril/render/trust.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Vnode = __webpack_require__(/*! ../render/vnode */ \"../../walax/node_modules/mithril/render/vnode.js\")\n\nmodule.exports = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/trust.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/render/vnode.js":
/*!********************************************************!*\
  !*** ../../walax/node_modules/mithril/render/vnode.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction Vnode(tag, key, attrs, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs, children: children, text: text, dom: dom, domSize: undefined, state: undefined, events: undefined, instance: undefined}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node == null || typeof node === \"boolean\") return null\n\tif (typeof node === \"object\") return node\n\treturn Vnode(\"#\", undefined, undefined, String(node), undefined, undefined)\n}\nVnode.normalizeChildren = function(input) {\n\tvar children = []\n\tif (input.length) {\n\t\tvar isKeyed = input[0] != null && input[0].key != null\n\t\t// Note: this is a *very* perf-sensitive check.\n\t\t// Fun fact: merging the loop like this is somehow faster than splitting\n\t\t// it, noticeably so.\n\t\tfor (var i = 1; i < input.length; i++) {\n\t\t\tif ((input[i] != null && input[i].key != null) !== isKeyed) {\n\t\t\t\tthrow new TypeError(\"Vnodes must either always have keys or never have keys!\")\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < input.length; i++) {\n\t\t\tchildren[i] = Vnode.normalize(input[i])\n\t\t}\n\t}\n\treturn children\n}\n\nmodule.exports = Vnode\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/render/vnode.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/request.js":
/*!***************************************************!*\
  !*** ../../walax/node_modules/mithril/request.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar PromisePolyfill = __webpack_require__(/*! ./promise/promise */ \"../../walax/node_modules/mithril/promise/promise.js\")\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"../../walax/node_modules/mithril/mount-redraw.js\")\n\nmodule.exports = __webpack_require__(/*! ./request/request */ \"../../walax/node_modules/mithril/request/request.js\")(window, PromisePolyfill, mountRedraw.redraw)\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/request.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/request/request.js":
/*!***********************************************************!*\
  !*** ../../walax/node_modules/mithril/request/request.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar buildPathname = __webpack_require__(/*! ../pathname/build */ \"../../walax/node_modules/mithril/pathname/build.js\")\n\nmodule.exports = function($window, Promise, oncompletion) {\n\tvar callbackCount = 0\n\n\tfunction PromiseProxy(executor) {\n\t\treturn new Promise(executor)\n\t}\n\n\t// In case the global Promise is some userland library's where they rely on\n\t// `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or\n\t// similar. Let's *not* break them.\n\tPromiseProxy.prototype = Promise.prototype\n\tPromiseProxy.__proto__ = Promise // eslint-disable-line no-proto\n\n\tfunction makeRequest(factory) {\n\t\treturn function(url, args) {\n\t\t\tif (typeof url !== \"string\") { args = url; url = url.url }\n\t\t\telse if (args == null) args = {}\n\t\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\t\tfactory(buildPathname(url, args.params), args, function (data) {\n\t\t\t\t\tif (typeof args.type === \"function\") {\n\t\t\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tdata[i] = new args.type(data[i])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse data = new args.type(data)\n\t\t\t\t\t}\n\t\t\t\t\tresolve(data)\n\t\t\t\t}, reject)\n\t\t\t})\n\t\t\tif (args.background === true) return promise\n\t\t\tvar count = 0\n\t\t\tfunction complete() {\n\t\t\t\tif (--count === 0 && typeof oncompletion === \"function\") oncompletion()\n\t\t\t}\n\n\t\t\treturn wrap(promise)\n\n\t\t\tfunction wrap(promise) {\n\t\t\t\tvar then = promise.then\n\t\t\t\t// Set the constructor, so engines know to not await or resolve\n\t\t\t\t// this as a native promise. At the time of writing, this is\n\t\t\t\t// only necessary for V8, but their behavior is the correct\n\t\t\t\t// behavior per spec. See this spec issue for more details:\n\t\t\t\t// https://github.com/tc39/ecma262/issues/1577. Also, see the\n\t\t\t\t// corresponding comment in `request/tests/test-request.js` for\n\t\t\t\t// a bit more background on the issue at hand.\n\t\t\t\tpromise.constructor = PromiseProxy\n\t\t\t\tpromise.then = function() {\n\t\t\t\t\tcount++\n\t\t\t\t\tvar next = then.apply(promise, arguments)\n\t\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\t\tcomplete()\n\t\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t\t})\n\t\t\t\t\treturn wrap(next)\n\t\t\t\t}\n\t\t\t\treturn promise\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasHeader(args, name) {\n\t\tfor (var key in args.headers) {\n\t\t\tif ({}.hasOwnProperty.call(args.headers, key) && name.test(key)) return true\n\t\t}\n\t\treturn false\n\t}\n\n\treturn {\n\t\trequest: makeRequest(function(url, args, resolve, reject) {\n\t\t\tvar method = args.method != null ? args.method.toUpperCase() : \"GET\"\n\t\t\tvar body = args.body\n\t\t\tvar assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData)\n\t\t\tvar responseType = args.responseType || (typeof args.extract === \"function\" ? \"\" : \"json\")\n\n\t\t\tvar xhr = new $window.XMLHttpRequest(), aborted = false\n\t\t\tvar original = xhr, replacedAbort\n\t\t\tvar abort = xhr.abort\n\n\t\t\txhr.abort = function() {\n\t\t\t\taborted = true\n\t\t\t\tabort.call(this)\n\t\t\t}\n\n\t\t\txhr.open(method, url, args.async !== false, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\n\t\t\tif (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (typeof args.deserialize !== \"function\" && !hasHeader(args, /^accept$/i)) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tif (args.timeout) xhr.timeout = args.timeout\n\t\t\txhr.responseType = responseType\n\n\t\t\tfor (var key in args.headers) {\n\t\t\t\tif ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr.onreadystatechange = function(ev) {\n\t\t\t\t// Don't throw errors on xhr.abort().\n\t\t\t\tif (aborted) return\n\n\t\t\t\tif (ev.target.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar success = (ev.target.status >= 200 && ev.target.status < 300) || ev.target.status === 304 || (/^file:\\/\\//i).test(url)\n\t\t\t\t\t\t// When the response type isn't \"\" or \"text\",\n\t\t\t\t\t\t// `xhr.responseText` is the wrong thing to use.\n\t\t\t\t\t\t// Browsers do the right thing and throw here, and we\n\t\t\t\t\t\t// should honor that and do the right thing by\n\t\t\t\t\t\t// preferring `xhr.response` where possible/practical.\n\t\t\t\t\t\tvar response = ev.target.response, message\n\n\t\t\t\t\t\tif (responseType === \"json\") {\n\t\t\t\t\t\t\t// For IE and Edge, which don't implement\n\t\t\t\t\t\t\t// `responseType: \"json\"`.\n\t\t\t\t\t\t\tif (!ev.target.responseType && typeof args.extract !== \"function\") response = JSON.parse(ev.target.responseText)\n\t\t\t\t\t\t} else if (!responseType || responseType === \"text\") {\n\t\t\t\t\t\t\t// Only use this default if it's text. If a parsed\n\t\t\t\t\t\t\t// document is needed on old IE and friends (all\n\t\t\t\t\t\t\t// unsupported), the user should use a custom\n\t\t\t\t\t\t\t// `config` instead. They're already using this at\n\t\t\t\t\t\t\t// their own risk.\n\t\t\t\t\t\t\tif (response == null) response = ev.target.responseText\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof args.extract === \"function\") {\n\t\t\t\t\t\t\tresponse = args.extract(ev.target, args)\n\t\t\t\t\t\t\tsuccess = true\n\t\t\t\t\t\t} else if (typeof args.deserialize === \"function\") {\n\t\t\t\t\t\t\tresponse = args.deserialize(response)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (success) resolve(response)\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttry { message = ev.target.responseText }\n\t\t\t\t\t\t\tcatch (e) { message = response }\n\t\t\t\t\t\t\tvar error = new Error(message)\n\t\t\t\t\t\t\terror.code = ev.target.status\n\t\t\t\t\t\t\terror.response = response\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof args.config === \"function\") {\n\t\t\t\txhr = args.config(xhr, args, url) || xhr\n\n\t\t\t\t// Propagate the `abort` to any replacement XHR as well.\n\t\t\t\tif (xhr !== original) {\n\t\t\t\t\treplacedAbort = xhr.abort\n\t\t\t\t\txhr.abort = function() {\n\t\t\t\t\t\taborted = true\n\t\t\t\t\t\treplacedAbort.call(this)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (body == null) xhr.send()\n\t\t\telse if (typeof args.serialize === \"function\") xhr.send(args.serialize(body))\n\t\t\telse if (body instanceof $window.FormData) xhr.send(body)\n\t\t\telse xhr.send(JSON.stringify(body))\n\t\t}),\n\t\tjsonp: makeRequest(function(url, args, resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tdelete $window[callbackName]\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(data)\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tdelete $window[callbackName]\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t}\n\t\t\tscript.src = url + (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") +\n\t\t\t\tencodeURIComponent(args.callbackKey || \"callback\") + \"=\" +\n\t\t\t\tencodeURIComponent(callbackName)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t}),\n\t}\n}\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/request/request.js?");

/***/ }),

/***/ "../../walax/node_modules/mithril/route.js":
/*!*************************************************!*\
  !*** ../../walax/node_modules/mithril/route.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar mountRedraw = __webpack_require__(/*! ./mount-redraw */ \"../../walax/node_modules/mithril/mount-redraw.js\")\n\nmodule.exports = __webpack_require__(/*! ./api/router */ \"../../walax/node_modules/mithril/api/router.js\")(window, mountRedraw)\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mithril/route.js?");

/***/ }),

/***/ "../../walax/node_modules/mobx/dist/mobx.esm.js":
/*!******************************************************!*\
  !*** ../../walax/node_modules/mobx/dist/mobx.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$mobx\": () => (/* binding */ $mobx),\n/* harmony export */   \"FlowCancellationError\": () => (/* binding */ FlowCancellationError),\n/* harmony export */   \"ObservableMap\": () => (/* binding */ ObservableMap),\n/* harmony export */   \"ObservableSet\": () => (/* binding */ ObservableSet),\n/* harmony export */   \"Reaction\": () => (/* binding */ Reaction),\n/* harmony export */   \"_allowStateChanges\": () => (/* binding */ allowStateChanges),\n/* harmony export */   \"_allowStateChangesInsideComputed\": () => (/* binding */ runInAction),\n/* harmony export */   \"_allowStateReadsEnd\": () => (/* binding */ allowStateReadsEnd),\n/* harmony export */   \"_allowStateReadsStart\": () => (/* binding */ allowStateReadsStart),\n/* harmony export */   \"_autoAction\": () => (/* binding */ autoAction),\n/* harmony export */   \"_endAction\": () => (/* binding */ _endAction),\n/* harmony export */   \"_getAdministration\": () => (/* binding */ getAdministration),\n/* harmony export */   \"_getGlobalState\": () => (/* binding */ getGlobalState),\n/* harmony export */   \"_interceptReads\": () => (/* binding */ interceptReads),\n/* harmony export */   \"_isComputingDerivation\": () => (/* binding */ isComputingDerivation),\n/* harmony export */   \"_resetGlobalState\": () => (/* binding */ resetGlobalState),\n/* harmony export */   \"_startAction\": () => (/* binding */ _startAction),\n/* harmony export */   \"action\": () => (/* binding */ action),\n/* harmony export */   \"autorun\": () => (/* binding */ autorun),\n/* harmony export */   \"comparer\": () => (/* binding */ comparer),\n/* harmony export */   \"computed\": () => (/* binding */ computed),\n/* harmony export */   \"configure\": () => (/* binding */ configure),\n/* harmony export */   \"createAtom\": () => (/* binding */ createAtom),\n/* harmony export */   \"defineProperty\": () => (/* binding */ apiDefineProperty),\n/* harmony export */   \"entries\": () => (/* binding */ entries),\n/* harmony export */   \"extendObservable\": () => (/* binding */ extendObservable),\n/* harmony export */   \"flow\": () => (/* binding */ flow),\n/* harmony export */   \"flowResult\": () => (/* binding */ flowResult),\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"getAtom\": () => (/* binding */ getAtom),\n/* harmony export */   \"getDebugName\": () => (/* binding */ getDebugName),\n/* harmony export */   \"getDependencyTree\": () => (/* binding */ getDependencyTree),\n/* harmony export */   \"getObserverTree\": () => (/* binding */ getObserverTree),\n/* harmony export */   \"has\": () => (/* binding */ has),\n/* harmony export */   \"intercept\": () => (/* binding */ intercept),\n/* harmony export */   \"isAction\": () => (/* binding */ isAction),\n/* harmony export */   \"isBoxedObservable\": () => (/* binding */ isObservableValue),\n/* harmony export */   \"isComputed\": () => (/* binding */ isComputed),\n/* harmony export */   \"isComputedProp\": () => (/* binding */ isComputedProp),\n/* harmony export */   \"isFlow\": () => (/* binding */ isFlow),\n/* harmony export */   \"isFlowCancellationError\": () => (/* binding */ isFlowCancellationError),\n/* harmony export */   \"isObservable\": () => (/* binding */ isObservable),\n/* harmony export */   \"isObservableArray\": () => (/* binding */ isObservableArray),\n/* harmony export */   \"isObservableMap\": () => (/* binding */ isObservableMap),\n/* harmony export */   \"isObservableObject\": () => (/* binding */ isObservableObject),\n/* harmony export */   \"isObservableProp\": () => (/* binding */ isObservableProp),\n/* harmony export */   \"isObservableSet\": () => (/* binding */ isObservableSet),\n/* harmony export */   \"keys\": () => (/* binding */ keys),\n/* harmony export */   \"makeAutoObservable\": () => (/* binding */ makeAutoObservable),\n/* harmony export */   \"makeObservable\": () => (/* binding */ makeObservable),\n/* harmony export */   \"observable\": () => (/* binding */ observable),\n/* harmony export */   \"observe\": () => (/* binding */ observe),\n/* harmony export */   \"onBecomeObserved\": () => (/* binding */ onBecomeObserved),\n/* harmony export */   \"onBecomeUnobserved\": () => (/* binding */ onBecomeUnobserved),\n/* harmony export */   \"onReactionError\": () => (/* binding */ onReactionError),\n/* harmony export */   \"override\": () => (/* binding */ override),\n/* harmony export */   \"ownKeys\": () => (/* binding */ apiOwnKeys),\n/* harmony export */   \"reaction\": () => (/* binding */ reaction),\n/* harmony export */   \"remove\": () => (/* binding */ remove),\n/* harmony export */   \"runInAction\": () => (/* binding */ runInAction),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"spy\": () => (/* binding */ spy),\n/* harmony export */   \"toJS\": () => (/* binding */ toJS),\n/* harmony export */   \"trace\": () => (/* binding */ trace),\n/* harmony export */   \"transaction\": () => (/* binding */ transaction),\n/* harmony export */   \"untracked\": () => (/* binding */ untracked),\n/* harmony export */   \"values\": () => (/* binding */ values),\n/* harmony export */   \"when\": () => (/* binding */ when)\n/* harmony export */ });\nvar niceErrors = {\n  0: \"Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'\",\n  1: function _(annotationType, key) {\n    return \"Cannot apply '\" + annotationType + \"' to '\" + key.toString() + \"': Field not found.\";\n  },\n\n  /*\r\n  2(prop) {\r\n      return `invalid decorator for '${prop.toString()}'`\r\n  },\r\n  3(prop) {\r\n      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\r\n  },\r\n  4(prop) {\r\n      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\r\n  },\r\n  */\n  5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n  6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n  7: \"'entries()' can only be used on observable objects, arrays and maps\",\n  8: \"'set()' can only be used on observable objects, arrays and maps\",\n  9: \"'remove()' can only be used on observable objects, arrays and maps\",\n  10: \"'has()' can only be used on observable objects, arrays and maps\",\n  11: \"'get()' can only be used on observable objects, arrays and maps\",\n  12: \"Invalid annotation\",\n  13: \"Dynamic observable objects cannot be frozen\",\n  14: \"Intercept handlers should return nothing or a change object\",\n  15: \"Observable arrays cannot be frozen\",\n  16: \"Modification exception: the internal structure of an observable array was changed.\",\n  17: function _(index, length) {\n    return \"[mobx.array] Index out of bounds, \" + index + \" is larger than \" + length;\n  },\n  18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n  19: function _(other) {\n    return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name;\n  },\n  20: function _(other) {\n    return \"Cannot initialize map from \" + other;\n  },\n  21: function _(dataStructure) {\n    return \"Cannot convert to map from '\" + dataStructure + \"'\";\n  },\n  22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n  23: \"It is not possible to get index atoms from arrays\",\n  24: function _(thing) {\n    return \"Cannot obtain administration from \" + thing;\n  },\n  25: function _(property, name) {\n    return \"the entry '\" + property + \"' does not exist in the observable map '\" + name + \"'\";\n  },\n  26: \"please specify a property\",\n  27: function _(property, name) {\n    return \"no observable property '\" + property.toString() + \"' found on the observable object '\" + name + \"'\";\n  },\n  28: function _(thing) {\n    return \"Cannot obtain atom from \" + thing;\n  },\n  29: \"Expecting some object\",\n  30: \"invalid action stack. did you forget to finish an action?\",\n  31: \"missing option for computed: get\",\n  32: function _(name, derivation) {\n    return \"Cycle detected in computation \" + name + \": \" + derivation;\n  },\n  33: function _(name) {\n    return \"The setter of computed value '\" + name + \"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?\";\n  },\n  34: function _(name) {\n    return \"[ComputedValue '\" + name + \"'] It is not possible to assign a new value to a computed value.\";\n  },\n  35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n  36: \"isolateGlobalState should be called before MobX is running any reactions\",\n  37: function _(method) {\n    return \"[mobx] `observableArray.\" + method + \"()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice().\" + method + \"()` instead\";\n  },\n  38: \"'ownKeys()' can only be used on observable objects\",\n  39: \"'defineProperty()' can only be used on observable objects\"\n};\nvar errors =  true ? niceErrors : 0;\nfunction die(error) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (true) {\n    var e = typeof error === \"string\" ? error : errors[error];\n    if (typeof e === \"function\") e = e.apply(null, args);\n    throw new Error(\"[MobX] \" + e);\n  }\n\n  throw new Error(typeof error === \"number\" ? \"[MobX] minified error nr: \" + error + (args.length ? \" \" + args.map(String).join(\",\") : \"\") + \". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts\" : \"[MobX] \" + error);\n}\n\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n\n  if (typeof __webpack_require__.g !== \"undefined\") {\n    return __webpack_require__.g;\n  }\n\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  return mockGlobal;\n}\n\nvar assign = Object.assign;\nvar getDescriptor = Object.getOwnPropertyDescriptor;\nvar defineProperty = Object.defineProperty;\nvar objectPrototype = Object.prototype;\nvar EMPTY_ARRAY = [];\nObject.freeze(EMPTY_ARRAY);\nvar EMPTY_OBJECT = {};\nObject.freeze(EMPTY_OBJECT);\nvar hasProxy = typeof Proxy !== \"undefined\";\nvar plainObjectString = /*#__PURE__*/Object.toString();\nfunction assertProxies() {\n  if (!hasProxy) {\n    die( true ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\" : 0);\n  }\n}\nfunction warnAboutProxyRequirement(msg) {\n  if ( true && globalState.verifyProxies) {\n    die(\"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" + msg);\n  }\n}\nfunction getNextId() {\n  return ++globalState.mobxGuid;\n}\n/**\r\n * Makes sure that the provided function is invoked at most once.\r\n */\n\nfunction once(func) {\n  var invoked = false;\n  return function () {\n    if (invoked) return;\n    invoked = true;\n    return func.apply(this, arguments);\n  };\n}\nvar noop = function noop() {};\nfunction isFunction(fn) {\n  return typeof fn === \"function\";\n}\nfunction isStringish(value) {\n  var t = typeof value;\n\n  switch (t) {\n    case \"string\":\n    case \"symbol\":\n    case \"number\":\n      return true;\n  }\n\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\";\n}\nfunction isPlainObject(value) {\n  var _proto$constructor;\n\n  if (!isObject(value)) return false;\n  var proto = Object.getPrototypeOf(value);\n  if (proto == null) return true;\n  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;\n} // https://stackoverflow.com/a/37865170\n\nfunction isGenerator(obj) {\n  var constructor = obj == null ? void 0 : obj.constructor;\n  if (!constructor) return false;\n  if (\"GeneratorFunction\" === constructor.name || \"GeneratorFunction\" === constructor.displayName) return true;\n  return false;\n}\nfunction addHiddenProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\nfunction addHiddenFinalProp(object, propName, value) {\n  defineProperty(object, propName, {\n    enumerable: false,\n    writable: false,\n    configurable: true,\n    value: value\n  });\n}\nfunction createInstanceofPredicate(name, theClass) {\n  var propName = \"isMobX\" + name;\n  theClass.prototype[propName] = true;\n  return function (x) {\n    return isObject(x) && x[propName] === true;\n  };\n}\nfunction isES6Map(thing) {\n  return thing instanceof Map;\n}\nfunction isES6Set(thing) {\n  return thing instanceof Set;\n}\nvar hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\";\n/**\r\n * Returns the following: own enumerable keys and symbols.\r\n */\n\nfunction getPlainObjectKeys(object) {\n  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...\n\n  if (!hasGetOwnPropertySymbols) return keys;\n  var symbols = Object.getOwnPropertySymbols(object);\n  if (!symbols.length) return keys;\n  return [].concat(keys, symbols.filter(function (s) {\n    return objectPrototype.propertyIsEnumerable.call(object, s);\n  }));\n} // From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} :\n/* istanbul ignore next */\nObject.getOwnPropertyNames;\nfunction stringifyKey(key) {\n  if (typeof key === \"string\") return key;\n  if (typeof key === \"symbol\") return key.toString();\n  return new String(key).toString();\n}\nfunction toPrimitive(value) {\n  return value === null ? null : typeof value === \"object\" ? \"\" + value : value;\n}\nfunction hasProp(target, prop) {\n  return objectPrototype.hasOwnProperty.call(target, prop);\n} // From Immer utils\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {\n  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n  var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up\n\n  ownKeys(target).forEach(function (key) {\n    res[key] = getDescriptor(target, key);\n  });\n  return res;\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar storedAnnotationsSymbol = /*#__PURE__*/Symbol(\"mobx-stored-annotations\");\n/**\r\n * Creates a function that acts as\r\n * - decorator\r\n * - annotation object\r\n */\n\nfunction createDecoratorAnnotation(annotation) {\n  function decorator(target, property) {\n    storeAnnotation(target, property, annotation);\n  }\n\n  return Object.assign(decorator, annotation);\n}\n/**\r\n * Stores annotation to prototype,\r\n * so it can be inspected later by `makeObservable` called from constructor\r\n */\n\nfunction storeAnnotation(prototype, key, annotation) {\n  if (!hasProp(prototype, storedAnnotationsSymbol)) {\n    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));\n  } // @override must override something\n\n\n  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n    var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n    die(\"'\" + fieldName + \"' is decorated with 'override', \" + \"but no such decorated member was found on prototype.\");\n  } // Cannot re-decorate\n\n\n  assertNotDecorated(prototype, annotation, key); // Ignore override\n\n  if (!isOverride(annotation)) {\n    prototype[storedAnnotationsSymbol][key] = annotation;\n  }\n}\n\nfunction assertNotDecorated(prototype, annotation, key) {\n  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n    var fieldName = prototype.constructor.name + \".prototype.\" + key.toString();\n    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;\n    var requestedAnnotationType = annotation.annotationType_;\n    die(\"Cannot apply '@\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already decorated with '@\" + currentAnnotationType + \"'.\") + \"\\nRe-decorating fields is not allowed.\" + \"\\nUse '@override' decorator for methods overriden by subclass.\");\n  }\n}\n/**\r\n * Collects annotations from prototypes and stores them on target (instance)\r\n */\n\n\nfunction collectStoredAnnotations(target) {\n  if (!hasProp(target, storedAnnotationsSymbol)) {\n    if ( true && !target[storedAnnotationsSymbol]) {\n      die(\"No annotations were passed to makeObservable, but no decorated members have been found either\");\n    } // We need a copy as we will remove annotation from the list once it's applied.\n\n\n    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));\n  }\n\n  return target[storedAnnotationsSymbol];\n}\n\nvar $mobx = /*#__PURE__*/Symbol(\"mobx administration\");\nvar Atom = /*#__PURE__*/function () {\n  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n\n  /**\r\n   * Create a new atom. For debugging purposes it is recommended to give it a name.\r\n   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\r\n   */\n  function Atom(name_) {\n    if (name_ === void 0) {\n      name_ =  true ? \"Atom@\" + getNextId() : 0;\n    }\n\n    this.name_ = void 0;\n    this.isPendingUnobservation_ = false;\n    this.isBeingObserved_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    this.name_ = name_;\n  } // onBecomeObservedListeners\n\n\n  var _proto = Atom.prototype;\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Invoke this method to notify mobx that your atom has been used somehow.\r\n   * Returns true if there is currently a reactive context.\r\n   */\n  ;\n\n  _proto.reportObserved = function reportObserved$1() {\n    return reportObserved(this);\n  }\n  /**\r\n   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\r\n   */\n  ;\n\n  _proto.reportChanged = function reportChanged() {\n    startBatch();\n    propagateChanged(this);\n    endBatch();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_;\n  };\n\n  return Atom;\n}();\nvar isAtom = /*#__PURE__*/createInstanceofPredicate(\"Atom\", Atom);\nfunction createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {\n  if (onBecomeObservedHandler === void 0) {\n    onBecomeObservedHandler = noop;\n  }\n\n  if (onBecomeUnobservedHandler === void 0) {\n    onBecomeUnobservedHandler = noop;\n  }\n\n  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set\n\n  if (onBecomeObservedHandler !== noop) {\n    onBecomeObserved(atom, onBecomeObservedHandler);\n  }\n\n  if (onBecomeUnobservedHandler !== noop) {\n    onBecomeUnobserved(atom, onBecomeUnobservedHandler);\n  }\n\n  return atom;\n}\n\nfunction identityComparer(a, b) {\n  return a === b;\n}\n\nfunction structuralComparer(a, b) {\n  return deepEqual(a, b);\n}\n\nfunction shallowComparer(a, b) {\n  return deepEqual(a, b, 1);\n}\n\nfunction defaultComparer(a, b) {\n  return Object.is(a, b);\n}\n\nvar comparer = {\n  identity: identityComparer,\n  structural: structuralComparer,\n  \"default\": defaultComparer,\n  shallow: shallowComparer\n};\n\nfunction deepEnhancer(v, _, name) {\n  // it is an observable already, done\n  if (isObservable(v)) return v; // something that can be converted and mutated?\n\n  if (Array.isArray(v)) return observable.array(v, {\n    name: name\n  });\n  if (isPlainObject(v)) return observable.object(v, undefined, {\n    name: name\n  });\n  if (isES6Map(v)) return observable.map(v, {\n    name: name\n  });\n  if (isES6Set(v)) return observable.set(v, {\n    name: name\n  });\n\n  if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n    if (isGenerator(v)) {\n      return flow(v);\n    } else {\n      return autoAction(name, v);\n    }\n  }\n\n  return v;\n}\nfunction shallowEnhancer(v, _, name) {\n  if (v === undefined || v === null) return v;\n  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;\n  if (Array.isArray(v)) return observable.array(v, {\n    name: name,\n    deep: false\n  });\n  if (isPlainObject(v)) return observable.object(v, undefined, {\n    name: name,\n    deep: false\n  });\n  if (isES6Map(v)) return observable.map(v, {\n    name: name,\n    deep: false\n  });\n  if (isES6Set(v)) return observable.set(v, {\n    name: name,\n    deep: false\n  });\n  if (true) die(\"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\");\n}\nfunction referenceEnhancer(newValue) {\n  // never turn into an observable\n  return newValue;\n}\nfunction refStructEnhancer(v, oldValue) {\n  if ( true && isObservable(v)) die(\"observable.struct should not be used with observable values\");\n  if (deepEqual(v, oldValue)) return oldValue;\n  return v;\n}\n\nvar OVERRIDE = \"override\";\nvar override = /*#__PURE__*/createDecoratorAnnotation({\n  annotationType_: OVERRIDE,\n  make_: make_,\n  extend_: extend_\n});\nfunction isOverride(annotation) {\n  return annotation.annotationType_ === OVERRIDE;\n}\n\nfunction make_(adm, key) {\n  // Must not be plain object\n  if ( true && adm.isPlainObject_) {\n    die(\"Cannot apply '\" + this.annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + this.annotationType_ + \"' cannot be used on plain objects.\"));\n  } // Must override something\n\n\n  if ( true && !hasProp(adm.appliedAnnotations_, key)) {\n    die(\"'\" + adm.name_ + \".\" + key.toString() + \"' is annotated with '\" + this.annotationType_ + \"', \" + \"but no such annotated member was found on prototype.\");\n  }\n\n  return 0\n  /* Cancel */\n  ;\n}\n\nfunction extend_(adm, key, descriptor, proxyTrap) {\n  die(\"'\" + this.annotationType_ + \"' can only be used with 'makeObservable'\");\n}\n\nfunction createActionAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$1,\n    extend_: extend_$1\n  };\n}\n\nfunction make_$1(adm, key, descriptor, source) {\n  var _this$options_;\n\n  // bound\n  if ((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 1\n    /* Break */\n    ;\n  } // own\n\n\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 2\n    /* Continue */\n    ;\n  } // prototype\n\n\n  if (isAction(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1\n    /* Break */\n    ;\n  }\n\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);\n  defineProperty(source, key, actionDescriptor);\n  return 2\n  /* Continue */\n  ;\n}\n\nfunction extend_$1(adm, key, descriptor, proxyTrap) {\n  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);\n  return adm.defineProperty_(key, actionDescriptor, proxyTrap);\n}\n\nfunction assertActionDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if ( true && !isFunction(value)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a function value.\"));\n  }\n}\n\nfunction createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;\n\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertActionDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n\n  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {\n    var _adm$proxy_;\n\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return {\n    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createFlowAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$2,\n    extend_: extend_$2\n  };\n}\n\nfunction make_$2(adm, key, descriptor, source) {\n  var _this$options_;\n\n  // own\n  if (source === adm.target_) {\n    return this.extend_(adm, key, descriptor, false) === null ? 0\n    /* Cancel */\n    : 2\n    /* Continue */\n    ;\n  } // prototype\n  // bound - must annotate protos to support super.flow()\n\n\n  if (((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) && !isFlow(adm.target_[key])) {\n    if (this.extend_(adm, key, descriptor, false) === null) return 0\n    /* Cancel */\n    ;\n  }\n\n  if (isFlow(descriptor.value)) {\n    // A prototype could have been annotated already by other constructor,\n    // rest of the proto chain must be annotated already\n    return 1\n    /* Break */\n    ;\n  }\n\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);\n  defineProperty(source, key, flowDescriptor);\n  return 2\n  /* Continue */\n  ;\n}\n\nfunction extend_$2(adm, key, descriptor, proxyTrap) {\n  var _this$options_2;\n\n  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);\n  return adm.defineProperty_(key, flowDescriptor, proxyTrap);\n}\n\nfunction assertFlowDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var value = _ref2.value;\n\n  if ( true && !isFunction(value)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on properties with a generator function value.\"));\n  }\n}\n\nfunction createFlowDescriptor(adm, annotation, key, descriptor, bound, // provides ability to disable safeDescriptors for prototypes\nsafeDescriptors) {\n  if (safeDescriptors === void 0) {\n    safeDescriptors = globalState.safeDescriptors;\n  }\n\n  assertFlowDescriptor(adm, annotation, key, descriptor);\n  var value = descriptor.value;\n\n  if (bound) {\n    var _adm$proxy_;\n\n    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return {\n    value: flow(value),\n    // Non-configurable for classes\n    // prevents accidental field redefinition in subclass\n    configurable: safeDescriptors ? adm.isPlainObject_ : true,\n    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n    enumerable: false,\n    // Non-obsevable, therefore non-writable\n    // Also prevents rewriting in subclass constructor\n    writable: safeDescriptors ? false : true\n  };\n}\n\nfunction createComputedAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$3,\n    extend_: extend_$3\n  };\n}\n\nfunction make_$3(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0\n  /* Cancel */\n  : 1\n  /* Break */\n  ;\n}\n\nfunction extend_$3(adm, key, descriptor, proxyTrap) {\n  assertComputedDescriptor(adm, this, key, descriptor);\n  return adm.defineComputedProperty_(key, _extends({}, this.options_, {\n    get: descriptor.get,\n    set: descriptor.set\n  }), proxyTrap);\n}\n\nfunction assertComputedDescriptor(adm, _ref, key, _ref2) {\n  var annotationType_ = _ref.annotationType_;\n  var get = _ref2.get;\n\n  if ( true && !get) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' can only be used on getter(+setter) properties.\"));\n  }\n}\n\nfunction createObservableAnnotation(name, options) {\n  return {\n    annotationType_: name,\n    options_: options,\n    make_: make_$4,\n    extend_: extend_$4\n  };\n}\n\nfunction make_$4(adm, key, descriptor) {\n  return this.extend_(adm, key, descriptor, false) === null ? 0\n  /* Cancel */\n  : 1\n  /* Break */\n  ;\n}\n\nfunction extend_$4(adm, key, descriptor, proxyTrap) {\n  var _this$options_$enhanc, _this$options_;\n\n  assertObservableDescriptor(adm, this, key, descriptor);\n  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);\n}\n\nfunction assertObservableDescriptor(adm, _ref, key, descriptor) {\n  var annotationType_ = _ref.annotationType_;\n\n  if ( true && !(\"value\" in descriptor)) {\n    die(\"Cannot apply '\" + annotationType_ + \"' to '\" + adm.name_ + \".\" + key.toString() + \"':\" + (\"\\n'\" + annotationType_ + \"' cannot be used on getter/setter properties\"));\n  }\n}\n\nvar AUTO = \"true\";\nvar autoAnnotation = /*#__PURE__*/createAutoAnnotation();\nfunction createAutoAnnotation(options) {\n  return {\n    annotationType_: AUTO,\n    options_: options,\n    make_: make_$5,\n    extend_: extend_$5\n  };\n}\n\nfunction make_$5(adm, key, descriptor, source) {\n  var _this$options_3, _this$options_4;\n\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.make_(adm, key, descriptor, source);\n  } // lone setter -> action setter\n\n\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.make_\n    var set = createAction(key.toString(), descriptor.set); // own\n\n    if (source === adm.target_) {\n      return adm.defineProperty_(key, {\n        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n        set: set\n      }) === null ? 0\n      /* Cancel */\n      : 2\n      /* Continue */\n      ;\n    } // proto\n\n\n    defineProperty(source, key, {\n      configurable: true,\n      set: set\n    });\n    return 2\n    /* Continue */\n    ;\n  } // function on proto -> autoAction/flow\n\n\n  if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n    var _this$options_2;\n\n    if (isGenerator(descriptor.value)) {\n      var _this$options_;\n\n      var flowAnnotation = ((_this$options_ = this.options_) == null ? void 0 : _this$options_.autoBind) ? flow.bound : flow;\n      return flowAnnotation.make_(adm, key, descriptor, source);\n    }\n\n    var actionAnnotation = ((_this$options_2 = this.options_) == null ? void 0 : _this$options_2.autoBind) ? autoAction.bound : autoAction;\n    return actionAnnotation.make_(adm, key, descriptor, source);\n  } // other -> observable\n  // Copy props from proto as well, see test:\n  // \"decorate should work with Object.create\"\n\n\n  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable; // if function respect autoBind option\n\n  if (typeof descriptor.value === \"function\" && ((_this$options_4 = this.options_) == null ? void 0 : _this$options_4.autoBind)) {\n    var _adm$proxy_;\n\n    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);\n  }\n\n  return observableAnnotation.make_(adm, key, descriptor, source);\n}\n\nfunction extend_$5(adm, key, descriptor, proxyTrap) {\n  var _this$options_5, _this$options_6;\n\n  // getter -> computed\n  if (descriptor.get) {\n    return computed.extend_(adm, key, descriptor, proxyTrap);\n  } // lone setter -> action setter\n\n\n  if (descriptor.set) {\n    // TODO make action applicable to setter and delegate to action.extend_\n    return adm.defineProperty_(key, {\n      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n      set: createAction(key.toString(), descriptor.set)\n    }, proxyTrap);\n  } // other -> observable\n  // if function respect autoBind option\n\n\n  if (typeof descriptor.value === \"function\" && ((_this$options_5 = this.options_) == null ? void 0 : _this$options_5.autoBind)) {\n    var _adm$proxy_2;\n\n    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);\n  }\n\n  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;\n  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);\n}\n\n// in the majority of cases\n\nvar defaultCreateObservableOptions = {\n  deep: true,\n  name: undefined,\n  defaultDecorator: undefined,\n  proxy: true\n};\nObject.freeze(defaultCreateObservableOptions);\nfunction asCreateObservableOptions(thing) {\n  return thing || defaultCreateObservableOptions;\n}\nvar observableAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable\");\nvar observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.ref\", {\n  enhancer: referenceEnhancer\n});\nvar observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.shallow\", {\n  enhancer: shallowEnhancer\n});\nvar observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(\"observable.struct\", {\n  enhancer: refStructEnhancer\n});\nvar observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);\nfunction getEnhancerFromOptions(options) {\n  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);\n}\nfunction getAnnotationFromOptions(options) {\n  var _options$defaultDecor;\n\n  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;\n}\nfunction getEnhancerFromAnnotation(annotation) {\n  var _annotation$options_$, _annotation$options_;\n\n  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;\n}\n/**\r\n * Turns an object, array or function into a reactive structure.\r\n * @param v the value which should become observable.\r\n */\n\nfunction createObservable(v, arg2, arg3) {\n  // @observable someProp;\n  if (isStringish(arg2)) {\n    storeAnnotation(v, arg2, observableAnnotation);\n    return;\n  } // already observable - ignore\n\n\n  if (isObservable(v)) return v; // plain object\n\n  if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array\n\n  if (Array.isArray(v)) return observable.array(v, arg2); // Map\n\n  if (isES6Map(v)) return observable.map(v, arg2); // Set\n\n  if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore\n\n  if (typeof v === \"object\" && v !== null) return v; // anything else\n\n  return observable.box(v, arg2);\n}\n\nObject.assign(createObservable, observableDecoratorAnnotation);\nvar observableFactories = {\n  box: function box(value, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);\n  },\n  array: function array(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  map: function map(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  set: function set(initialValues, options) {\n    var o = asCreateObservableOptions(options);\n    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);\n  },\n  object: function object(props, decorators, options) {\n    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);\n  },\n  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),\n  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),\n  deep: observableDecoratorAnnotation,\n  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)\n}; // eslint-disable-next-line\n\nvar observable = /*#__PURE__*/assign(createObservable, observableFactories);\n\nvar COMPUTED = \"computed\";\nvar COMPUTED_STRUCT = \"computed.struct\";\nvar computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);\nvar computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {\n  equals: comparer.structural\n});\n/**\r\n * Decorator for class properties: @computed get value() { return expr; }.\r\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\r\n */\n\nvar computed = function computed(arg1, arg2) {\n  if (isStringish(arg2)) {\n    // @computed\n    return storeAnnotation(arg1, arg2, computedAnnotation);\n  }\n\n  if (isPlainObject(arg1)) {\n    // @computed({ options })\n    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));\n  } // computed(expr, options?)\n\n\n  if (true) {\n    if (!isFunction(arg1)) die(\"First argument to `computed` should be an expression.\");\n    if (isFunction(arg2)) die(\"A setter as second argument is no longer supported, use `{ set: fn }` option instead\");\n  }\n\n  var opts = isPlainObject(arg2) ? arg2 : {};\n  opts.get = arg1;\n  opts.name || (opts.name = arg1.name || \"\");\n  /* for generated name */\n\n  return new ComputedValue(opts);\n};\nObject.assign(computed, computedAnnotation);\ncomputed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);\n\nvar _getDescriptor$config, _getDescriptor;\n// mobx versions\n\nvar currentActionId = 0;\nvar nextActionId = 1;\nvar isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, \"name\")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object\n\nvar tmpNameDescriptor = {\n  value: \"action\",\n  configurable: true,\n  writable: false,\n  enumerable: false\n};\nfunction createAction(actionName, fn, autoAction, ref) {\n  if (autoAction === void 0) {\n    autoAction = false;\n  }\n\n  if (true) {\n    if (!isFunction(fn)) die(\"`action` can only be invoked on functions\");\n    if (typeof actionName !== \"string\" || !actionName) die(\"actions should have valid names, got: '\" + actionName + \"'\");\n  }\n\n  function res() {\n    return executeAction(actionName, autoAction, fn, ref || this, arguments);\n  }\n\n  res.isMobxAction = true;\n\n  if (isFunctionNameConfigurable) {\n    tmpNameDescriptor.value = actionName;\n    Object.defineProperty(res, \"name\", tmpNameDescriptor);\n  }\n\n  return res;\n}\nfunction executeAction(actionName, canRunAsDerivation, fn, scope, args) {\n  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);\n\n  try {\n    return fn.apply(scope, args);\n  } catch (err) {\n    runInfo.error_ = err;\n    throw err;\n  } finally {\n    _endAction(runInfo);\n  }\n}\nfunction _startAction(actionName, canRunAsDerivation, // true for autoAction\nscope, args) {\n  var notifySpy_ =  true && isSpyEnabled() && !!actionName;\n  var startTime_ = 0;\n\n  if ( true && notifySpy_) {\n    startTime_ = Date.now();\n    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;\n    spyReportStart({\n      type: ACTION,\n      name: actionName,\n      object: scope,\n      arguments: flattenedArgs\n    });\n  }\n\n  var prevDerivation_ = globalState.trackingDerivation;\n  var runAsAction = !canRunAsDerivation || !prevDerivation_;\n  startBatch();\n  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow\n\n  if (runAsAction) {\n    untrackedStart();\n    prevAllowStateChanges_ = allowStateChangesStart(true);\n  }\n\n  var prevAllowStateReads_ = allowStateReadsStart(true);\n  var runInfo = {\n    runAsAction_: runAsAction,\n    prevDerivation_: prevDerivation_,\n    prevAllowStateChanges_: prevAllowStateChanges_,\n    prevAllowStateReads_: prevAllowStateReads_,\n    notifySpy_: notifySpy_,\n    startTime_: startTime_,\n    actionId_: nextActionId++,\n    parentActionId_: currentActionId\n  };\n  currentActionId = runInfo.actionId_;\n  return runInfo;\n}\nfunction _endAction(runInfo) {\n  if (currentActionId !== runInfo.actionId_) {\n    die(30);\n  }\n\n  currentActionId = runInfo.parentActionId_;\n\n  if (runInfo.error_ !== undefined) {\n    globalState.suppressReactionErrors = true;\n  }\n\n  allowStateChangesEnd(runInfo.prevAllowStateChanges_);\n  allowStateReadsEnd(runInfo.prevAllowStateReads_);\n  endBatch();\n  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);\n\n  if ( true && runInfo.notifySpy_) {\n    spyReportEnd({\n      time: Date.now() - runInfo.startTime_\n    });\n  }\n\n  globalState.suppressReactionErrors = false;\n}\nfunction allowStateChanges(allowStateChanges, func) {\n  var prev = allowStateChangesStart(allowStateChanges);\n\n  try {\n    return func();\n  } finally {\n    allowStateChangesEnd(prev);\n  }\n}\nfunction allowStateChangesStart(allowStateChanges) {\n  var prev = globalState.allowStateChanges;\n  globalState.allowStateChanges = allowStateChanges;\n  return prev;\n}\nfunction allowStateChangesEnd(prev) {\n  globalState.allowStateChanges = prev;\n}\n\nvar _Symbol$toPrimitive;\nvar CREATE = \"create\";\n_Symbol$toPrimitive = Symbol.toPrimitive;\nvar ObservableValue = /*#__PURE__*/function (_Atom) {\n  _inheritsLoose(ObservableValue, _Atom);\n\n  function ObservableValue(value, enhancer, name_, notifySpy, equals) {\n    var _this;\n\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableValue@\" + getNextId() : 0;\n    }\n\n    if (notifySpy === void 0) {\n      notifySpy = true;\n    }\n\n    if (equals === void 0) {\n      equals = comparer[\"default\"];\n    }\n\n    _this = _Atom.call(this, name_) || this;\n    _this.enhancer = void 0;\n    _this.name_ = void 0;\n    _this.equals = void 0;\n    _this.hasUnreportedChange_ = false;\n    _this.interceptors_ = void 0;\n    _this.changeListeners_ = void 0;\n    _this.value_ = void 0;\n    _this.dehancer = void 0;\n    _this.enhancer = enhancer;\n    _this.name_ = name_;\n    _this.equals = equals;\n    _this.value_ = enhancer(value, undefined, name_);\n\n    if ( true && notifySpy && isSpyEnabled()) {\n      // only notify spy if this is a stand-alone observable\n      spyReport({\n        type: CREATE,\n        object: _assertThisInitialized(_this),\n        observableKind: \"value\",\n        debugObjectName: _this.name_,\n        newValue: \"\" + _this.value_\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = ObservableValue.prototype;\n\n  _proto.dehanceValue = function dehanceValue(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.set = function set(newValue) {\n    var oldValue = this.value_;\n    newValue = this.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n\n      if ( true && notifySpy) {\n        spyReportStart({\n          type: UPDATE,\n          object: this,\n          observableKind: \"value\",\n          debugObjectName: this.name_,\n          newValue: newValue,\n          oldValue: oldValue\n        });\n      }\n\n      this.setNewValue_(newValue);\n      if ( true && notifySpy) spyReportEnd();\n    }\n  };\n\n  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {\n    checkIfStateModificationsAreAllowed(this);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this,\n        type: UPDATE,\n        newValue: newValue\n      });\n      if (!change) return globalState.UNCHANGED;\n      newValue = change.newValue;\n    } // apply modifier\n\n\n    newValue = this.enhancer(newValue, this.value_, this.name_);\n    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;\n  };\n\n  _proto.setNewValue_ = function setNewValue_(newValue) {\n    var oldValue = this.value_;\n    this.value_ = newValue;\n    this.reportChanged();\n\n    if (hasListeners(this)) {\n      notifyListeners(this, {\n        type: UPDATE,\n        object: this,\n        newValue: newValue,\n        oldValue: oldValue\n      });\n    }\n  };\n\n  _proto.get = function get() {\n    this.reportObserved();\n    return this.dehanceValue(this.value_);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately) listener({\n      observableKind: \"value\",\n      debugObjectName: this.name_,\n      object: this,\n      type: UPDATE,\n      newValue: this.value_,\n      oldValue: undefined\n    });\n    return registerListener(this, listener);\n  };\n\n  _proto.raw = function raw() {\n    // used by MST ot get undehanced value\n    return this.value_;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.get();\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + \"[\" + this.value_ + \"]\";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive] = function () {\n    return this.valueOf();\n  };\n\n  return ObservableValue;\n}(Atom);\nvar isObservableValue = /*#__PURE__*/createInstanceofPredicate(\"ObservableValue\", ObservableValue);\n\nvar _Symbol$toPrimitive$1;\n/**\r\n * A node in the state dependency root that observes other nodes, and can be observed itself.\r\n *\r\n * ComputedValue will remember the result of the computation for the duration of the batch, or\r\n * while being observed.\r\n *\r\n * During this time it will recompute only when one of its direct dependencies changed,\r\n * but only when it is being accessed with `ComputedValue.get()`.\r\n *\r\n * Implementation description:\r\n * 1. First time it's being accessed it will compute and remember result\r\n *    give back remembered result until 2. happens\r\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\r\n * 3. When it's being accessed, recompute if any shallow dependency changed.\r\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\r\n *    go to step 2. either way\r\n *\r\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\r\n */\n\n_Symbol$toPrimitive$1 = Symbol.toPrimitive;\nvar ComputedValue = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  // during tracking it's an array with new observed observers\n  // to check for cycles\n  // N.B: unminified as it is used by MST\n\n  /**\r\n   * Create a new computed value based on a function expression.\r\n   *\r\n   * The `name` property is for debug purposes only.\r\n   *\r\n   * The `equals` property specifies the comparer function to use to determine if a newly produced\r\n   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\r\n   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\r\n   * Structural comparison can be convenient if you always produce a new aggregated object and\r\n   * don't want to notify observers if it is structurally the same.\r\n   * This is useful for working with vectors, mouse coordinates etc.\r\n   */\n  function ComputedValue(options) {\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.observing_ = [];\n    this.newObserving_ = null;\n    this.isBeingObserved_ = false;\n    this.isPendingUnobservation_ = false;\n    this.observers_ = new Set();\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.lastAccessedBy_ = 0;\n    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n    this.unboundDepsCount_ = 0;\n    this.value_ = new CaughtException(null);\n    this.name_ = void 0;\n    this.triggeredBy_ = void 0;\n    this.isComputing_ = false;\n    this.isRunningSetter_ = false;\n    this.derivation = void 0;\n    this.setter_ = void 0;\n    this.isTracing_ = TraceMode.NONE;\n    this.scope_ = void 0;\n    this.equals_ = void 0;\n    this.requiresReaction_ = void 0;\n    this.keepAlive_ = void 0;\n    this.onBOL = void 0;\n    this.onBUOL = void 0;\n    if (!options.get) die(31);\n    this.derivation = options.get;\n    this.name_ = options.name || ( true ? \"ComputedValue@\" + getNextId() : 0);\n\n    if (options.set) {\n      this.setter_ = createAction( true ? this.name_ + \"-setter\" : 0, options.set);\n    }\n\n    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer[\"default\"]);\n    this.scope_ = options.context;\n    this.requiresReaction_ = !!options.requiresReaction;\n    this.keepAlive_ = !!options.keepAlive;\n  }\n\n  var _proto = ComputedValue.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    propagateMaybeChanged(this);\n  };\n\n  _proto.onBO = function onBO() {\n    if (this.onBOL) {\n      this.onBOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  _proto.onBUO = function onBUO() {\n    if (this.onBUOL) {\n      this.onBUOL.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }\n  /**\r\n   * Returns the current value of this computed value.\r\n   * Will evaluate its computation first if needed.\r\n   */\n  ;\n\n  _proto.get = function get() {\n    if (this.isComputing_) die(32, this.name_, this.derivation);\n\n    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&\n    this.observers_.size === 0 && !this.keepAlive_) {\n      if (shouldCompute(this)) {\n        this.warnAboutUntrackedRead_();\n        startBatch(); // See perf test 'computed memoization'\n\n        this.value_ = this.computeValue_(false);\n        endBatch();\n      }\n    } else {\n      reportObserved(this);\n\n      if (shouldCompute(this)) {\n        var prevTrackingContext = globalState.trackingContext;\n        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;\n        if (this.trackAndCompute()) propagateChangeConfirmed(this);\n        globalState.trackingContext = prevTrackingContext;\n      }\n    }\n\n    var result = this.value_;\n    if (isCaughtException(result)) throw result.cause;\n    return result;\n  };\n\n  _proto.set = function set(value) {\n    if (this.setter_) {\n      if (this.isRunningSetter_) die(33, this.name_);\n      this.isRunningSetter_ = true;\n\n      try {\n        this.setter_.call(this.scope_, value);\n      } finally {\n        this.isRunningSetter_ = false;\n      }\n    } else die(34, this.name_);\n  };\n\n  _proto.trackAndCompute = function trackAndCompute() {\n    // N.B: unminified as it is used by MST\n    var oldValue = this.value_;\n    var wasSuspended =\n    /* see #1208 */\n    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;\n    var newValue = this.computeValue_(true);\n\n    if ( true && isSpyEnabled()) {\n      spyReport({\n        observableKind: \"computed\",\n        debugObjectName: this.name_,\n        object: this.scope_,\n        type: \"update\",\n        oldValue: this.value_,\n        newValue: newValue\n      });\n    }\n\n    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);\n\n    if (changed) {\n      this.value_ = newValue;\n    }\n\n    return changed;\n  };\n\n  _proto.computeValue_ = function computeValue_(track) {\n    this.isComputing_ = true; // don't allow state changes during computation\n\n    var prev = allowStateChangesStart(false);\n    var res;\n\n    if (track) {\n      res = trackDerivedFunction(this, this.derivation, this.scope_);\n    } else {\n      if (globalState.disableErrorBoundaries === true) {\n        res = this.derivation.call(this.scope_);\n      } else {\n        try {\n          res = this.derivation.call(this.scope_);\n        } catch (e) {\n          res = new CaughtException(e);\n        }\n      }\n    }\n\n    allowStateChangesEnd(prev);\n    this.isComputing_ = false;\n    return res;\n  };\n\n  _proto.suspend_ = function suspend_() {\n    if (!this.keepAlive_) {\n      clearObserving(this);\n      this.value_ = undefined; // don't hold on to computed value!\n    }\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    var _this = this;\n\n    var firstTime = true;\n    var prevValue = undefined;\n    return autorun(function () {\n      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n      var newValue = _this.get();\n\n      if (!firstTime || fireImmediately) {\n        var prevU = untrackedStart();\n        listener({\n          observableKind: \"computed\",\n          debugObjectName: _this.name_,\n          type: UPDATE,\n          object: _this,\n          newValue: newValue,\n          oldValue: prevValue\n        });\n        untrackedEnd(prevU);\n      }\n\n      firstTime = false;\n      prevValue = newValue;\n    });\n  };\n\n  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {\n    if (false) {}\n\n    if (this.requiresReaction_ === true) {\n      die(\"[mobx] Computed value \" + this.name_ + \" is read outside a reactive context\");\n    }\n\n    if (this.isTracing_ !== TraceMode.NONE) {\n      console.log(\"[mobx.trace] '\" + this.name_ + \"' is being read outside a reactive context. Doing a full recompute\");\n    }\n\n    if (globalState.computedRequiresReaction) {\n      console.warn(\"[mobx] Computed value \" + this.name_ + \" is being read outside a reactive context. Doing a full recompute\");\n    }\n  };\n\n  _proto.toString = function toString() {\n    return this.name_ + \"[\" + this.derivation.toString() + \"]\";\n  };\n\n  _proto.valueOf = function valueOf() {\n    return toPrimitive(this.get());\n  };\n\n  _proto[_Symbol$toPrimitive$1] = function () {\n    return this.valueOf();\n  };\n\n  return ComputedValue;\n}();\nvar isComputedValue = /*#__PURE__*/createInstanceofPredicate(\"ComputedValue\", ComputedValue);\n\nvar IDerivationState_;\n\n(function (IDerivationState_) {\n  // before being run or (outside batch and not being observed)\n  // at this point derivation is not holding any data about dependency tree\n  IDerivationState_[IDerivationState_[\"NOT_TRACKING_\"] = -1] = \"NOT_TRACKING_\"; // no shallow dependency changed since last computation\n  // won't recalculate derivation\n  // this is what makes mobx fast\n\n  IDerivationState_[IDerivationState_[\"UP_TO_DATE_\"] = 0] = \"UP_TO_DATE_\"; // some deep dependency changed, but don't know if shallow dependency changed\n  // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n  // currently only ComputedValue will propagate POSSIBLY_STALE\n  //\n  // having this state is second big optimization:\n  // don't have to recompute on every dependency change, but only when it's needed\n\n  IDerivationState_[IDerivationState_[\"POSSIBLY_STALE_\"] = 1] = \"POSSIBLY_STALE_\"; // A shallow dependency has changed since last computation and the derivation\n  // will need to recompute when it's needed next.\n\n  IDerivationState_[IDerivationState_[\"STALE_\"] = 2] = \"STALE_\";\n})(IDerivationState_ || (IDerivationState_ = {}));\n\nvar TraceMode;\n\n(function (TraceMode) {\n  TraceMode[TraceMode[\"NONE\"] = 0] = \"NONE\";\n  TraceMode[TraceMode[\"LOG\"] = 1] = \"LOG\";\n  TraceMode[TraceMode[\"BREAK\"] = 2] = \"BREAK\";\n})(TraceMode || (TraceMode = {}));\n\nvar CaughtException = function CaughtException(cause) {\n  this.cause = void 0;\n  this.cause = cause; // Empty\n};\nfunction isCaughtException(e) {\n  return e instanceof CaughtException;\n}\n/**\r\n * Finds out whether any dependency of the derivation has actually changed.\r\n * If dependenciesState is 1 then it will recalculate dependencies,\r\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\r\n *\r\n * By iterating over the dependencies in the same order that they were reported and\r\n * stopping on the first change, all the recalculations are only called for ComputedValues\r\n * that will be tracked by derivation. That is because we assume that if the first x\r\n * dependencies of the derivation doesn't change then the derivation should run the same way\r\n * up until accessing x-th dependency.\r\n */\n\nfunction shouldCompute(derivation) {\n  switch (derivation.dependenciesState_) {\n    case IDerivationState_.UP_TO_DATE_:\n      return false;\n\n    case IDerivationState_.NOT_TRACKING_:\n    case IDerivationState_.STALE_:\n      return true;\n\n    case IDerivationState_.POSSIBLY_STALE_:\n      {\n        // state propagation can occur outside of action/reactive context #2195\n        var prevAllowStateReads = allowStateReadsStart(true);\n        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n\n        var obs = derivation.observing_,\n            l = obs.length;\n\n        for (var i = 0; i < l; i++) {\n          var obj = obs[i];\n\n          if (isComputedValue(obj)) {\n            if (globalState.disableErrorBoundaries) {\n              obj.get();\n            } else {\n              try {\n                obj.get();\n              } catch (e) {\n                // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                untrackedEnd(prevUntracked);\n                allowStateReadsEnd(prevAllowStateReads);\n                return true;\n              }\n            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n            // and `derivation` is an observer of `obj`\n            // invariantShouldCompute(derivation)\n\n\n            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {\n              untrackedEnd(prevUntracked);\n              allowStateReadsEnd(prevAllowStateReads);\n              return true;\n            }\n          }\n        }\n\n        changeDependenciesStateTo0(derivation);\n        untrackedEnd(prevUntracked);\n        allowStateReadsEnd(prevAllowStateReads);\n        return false;\n      }\n  }\n}\nfunction isComputingDerivation() {\n  return globalState.trackingDerivation !== null; // filter out actions inside computations\n}\nfunction checkIfStateModificationsAreAllowed(atom) {\n  if (false) {}\n\n  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n\n  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === \"always\")) console.warn(\"[MobX] \" + (globalState.enforceActions ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \" : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") + atom.name_);\n}\nfunction checkIfStateReadsAreAllowed(observable) {\n  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n    console.warn(\"[mobx] Observable \" + observable.name_ + \" being read outside a reactive context\");\n  }\n}\n/**\r\n * Executes the provided function `f` and tracks which observables are being accessed.\r\n * The tracking information is stored on the `derivation` object and the derivation is registered\r\n * as observer of any of the accessed observables.\r\n */\n\nfunction trackDerivedFunction(derivation, f, context) {\n  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps\n  // array will be trimmed by bindDependencies\n\n  changeDependenciesStateTo0(derivation);\n  derivation.newObserving_ = new Array(derivation.observing_.length + 100);\n  derivation.unboundDepsCount_ = 0;\n  derivation.runId_ = ++globalState.runId;\n  var prevTracking = globalState.trackingDerivation;\n  globalState.trackingDerivation = derivation;\n  globalState.inBatch++;\n  var result;\n\n  if (globalState.disableErrorBoundaries === true) {\n    result = f.call(context);\n  } else {\n    try {\n      result = f.call(context);\n    } catch (e) {\n      result = new CaughtException(e);\n    }\n  }\n\n  globalState.inBatch--;\n  globalState.trackingDerivation = prevTracking;\n  bindDependencies(derivation);\n  warnAboutDerivationWithoutDependencies(derivation);\n  allowStateReadsEnd(prevAllowStateReads);\n  return result;\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation) {\n  if (false) {}\n  if (derivation.observing_.length !== 0) return;\n\n  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {\n    console.warn(\"[mobx] Derivation \" + derivation.name_ + \" is created/updated without reading any observable value\");\n  }\n}\n/**\r\n * diffs newObserving with observing.\r\n * update observing to be newObserving with unique observables\r\n * notify observers that become observed/unobserved\r\n */\n\n\nfunction bindDependencies(derivation) {\n  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n  var prevObserving = derivation.observing_;\n  var observing = derivation.observing_ = derivation.newObserving_;\n  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):\n  //   0: first occurrence, change to 1 and keep it\n  //   1: extra occurrence, drop it\n\n  var i0 = 0,\n      l = derivation.unboundDepsCount_;\n\n  for (var i = 0; i < l; i++) {\n    var dep = observing[i];\n\n    if (dep.diffValue_ === 0) {\n      dep.diffValue_ = 1;\n      if (i0 !== i) observing[i0] = dep;\n      i0++;\n    } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n    // not hitting the condition\n\n\n    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {\n      lowestNewObservingDerivationState = dep.dependenciesState_;\n    }\n  }\n\n  observing.length = i0;\n  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n  //   0: it's not in new observables, unobserve it\n  //   1: it keeps being observed, don't want to notify it. change to 0\n\n  l = prevObserving.length;\n\n  while (l--) {\n    var _dep = prevObserving[l];\n\n    if (_dep.diffValue_ === 0) {\n      removeObserver(_dep, derivation);\n    }\n\n    _dep.diffValue_ = 0;\n  } // Go through all new observables and check diffValue: (now it should be unique)\n  //   0: it was set to 0 in last loop. don't need to do anything.\n  //   1: it wasn't observed, let's observe it. set back to 0\n\n\n  while (i0--) {\n    var _dep2 = observing[i0];\n\n    if (_dep2.diffValue_ === 1) {\n      _dep2.diffValue_ = 0;\n      addObserver(_dep2, derivation);\n    }\n  } // Some new observed derivations may become stale during this derivation computation\n  // so they have had no chance to propagate staleness (#916)\n\n\n  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n    derivation.dependenciesState_ = lowestNewObservingDerivationState;\n    derivation.onBecomeStale_();\n  }\n}\n\nfunction clearObserving(derivation) {\n  // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n  var obs = derivation.observing_;\n  derivation.observing_ = [];\n  var i = obs.length;\n\n  while (i--) {\n    removeObserver(obs[i], derivation);\n  }\n\n  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n}\nfunction untracked(action) {\n  var prev = untrackedStart();\n\n  try {\n    return action();\n  } finally {\n    untrackedEnd(prev);\n  }\n}\nfunction untrackedStart() {\n  var prev = globalState.trackingDerivation;\n  globalState.trackingDerivation = null;\n  return prev;\n}\nfunction untrackedEnd(prev) {\n  globalState.trackingDerivation = prev;\n}\nfunction allowStateReadsStart(allowStateReads) {\n  var prev = globalState.allowStateReads;\n  globalState.allowStateReads = allowStateReads;\n  return prev;\n}\nfunction allowStateReadsEnd(prev) {\n  globalState.allowStateReads = prev;\n}\n/**\r\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\r\n *\r\n */\n\nfunction changeDependenciesStateTo0(derivation) {\n  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;\n  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;\n  var obs = derivation.observing_;\n  var i = obs.length;\n\n  while (i--) {\n    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n  }\n}\n\n/**\r\n * These values will persist if global state is reset\r\n */\n\nvar persistentKeys = [\"mobxGuid\", \"spyListeners\", \"enforceActions\", \"computedRequiresReaction\", \"reactionRequiresObservable\", \"observableRequiresReaction\", \"allowStateReads\", \"disableErrorBoundaries\", \"runId\", \"UNCHANGED\", \"useProxies\"];\nvar MobXGlobals = function MobXGlobals() {\n  this.version = 6;\n  this.UNCHANGED = {};\n  this.trackingDerivation = null;\n  this.trackingContext = null;\n  this.runId = 0;\n  this.mobxGuid = 0;\n  this.inBatch = 0;\n  this.pendingUnobservations = [];\n  this.pendingReactions = [];\n  this.isRunningReactions = false;\n  this.allowStateChanges = false;\n  this.allowStateReads = true;\n  this.enforceActions = true;\n  this.spyListeners = [];\n  this.globalReactionErrorHandlers = [];\n  this.computedRequiresReaction = false;\n  this.reactionRequiresObservable = false;\n  this.observableRequiresReaction = false;\n  this.disableErrorBoundaries = false;\n  this.suppressReactionErrors = false;\n  this.useProxies = true;\n  this.verifyProxies = false;\n  this.safeDescriptors = true;\n};\nvar canMergeGlobalState = true;\nvar isolateCalled = false;\nvar globalState = /*#__PURE__*/function () {\n  var global = /*#__PURE__*/getGlobal();\n  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;\n  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;\n\n  if (!canMergeGlobalState) {\n    setTimeout(function () {\n      if (!isolateCalled) {\n        die(35);\n      }\n    }, 1);\n    return new MobXGlobals();\n  } else if (global.__mobxGlobals) {\n    global.__mobxInstanceCount += 1;\n    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible\n\n    return global.__mobxGlobals;\n  } else {\n    global.__mobxInstanceCount = 1;\n    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();\n  }\n}();\nfunction isolateGlobalState() {\n  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);\n  isolateCalled = true;\n\n  if (canMergeGlobalState) {\n    var global = getGlobal();\n    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;\n    globalState = new MobXGlobals();\n  }\n}\nfunction getGlobalState() {\n  return globalState;\n}\n/**\r\n * For testing purposes only; this will break the internal state of existing observables,\r\n * but can be used to get back at a stable state after throwing errors\r\n */\n\nfunction resetGlobalState() {\n  var defaultGlobals = new MobXGlobals();\n\n  for (var key in defaultGlobals) {\n    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];\n  }\n\n  globalState.allowStateChanges = !globalState.enforceActions;\n}\n\nfunction hasObservers(observable) {\n  return observable.observers_ && observable.observers_.size > 0;\n}\nfunction getObservers(observable) {\n  return observable.observers_;\n} // function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\n\nfunction addObserver(observable, node) {\n  // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n  // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n  // invariantObservers(observable);\n  observable.observers_.add(node);\n  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\nfunction removeObserver(observable, node) {\n  // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n  // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n  // invariantObservers(observable);\n  observable.observers_[\"delete\"](node);\n\n  if (observable.observers_.size === 0) {\n    // deleting last observer\n    queueForUnobservation(observable);\n  } // invariantObservers(observable);\n  // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n\n}\nfunction queueForUnobservation(observable) {\n  if (observable.isPendingUnobservation_ === false) {\n    // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n    observable.isPendingUnobservation_ = true;\n    globalState.pendingUnobservations.push(observable);\n  }\n}\n/**\r\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\r\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\r\n * Avoids unnecessary recalculations.\r\n */\n\nfunction startBatch() {\n  globalState.inBatch++;\n}\nfunction endBatch() {\n  if (--globalState.inBatch === 0) {\n    runReactions(); // the batch is actually about to finish, all unobserving should happen here.\n\n    var list = globalState.pendingUnobservations;\n\n    for (var i = 0; i < list.length; i++) {\n      var observable = list[i];\n      observable.isPendingUnobservation_ = false;\n\n      if (observable.observers_.size === 0) {\n        if (observable.isBeingObserved_) {\n          // if this observable had reactive observers, trigger the hooks\n          observable.isBeingObserved_ = false;\n          observable.onBUO();\n        }\n\n        if (observable instanceof ComputedValue) {\n          // computed values are automatically teared down when the last observer leaves\n          // this process happens recursively, this computed might be the last observabe of another, etc..\n          observable.suspend_();\n        }\n      }\n    }\n\n    globalState.pendingUnobservations = [];\n  }\n}\nfunction reportObserved(observable) {\n  checkIfStateReadsAreAllowed(observable);\n  var derivation = globalState.trackingDerivation;\n\n  if (derivation !== null) {\n    /**\r\n     * Simple optimization, give each derivation run an unique id (runId)\r\n     * Check if last time this observable was accessed the same runId is used\r\n     * if this is the case, the relation is already known\r\n     */\n    if (derivation.runId_ !== observable.lastAccessedBy_) {\n      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n\n      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;\n\n      if (!observable.isBeingObserved_ && globalState.trackingContext) {\n        observable.isBeingObserved_ = true;\n        observable.onBO();\n      }\n    }\n\n    return true;\n  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n    queueForUnobservation(observable);\n  }\n\n  return false;\n} // function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\r\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\r\n * It will propagate changes to observers from previous run\r\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\r\n * Hopefully self reruning autoruns aren't a feature people should depend on\r\n * Also most basic use cases should be ok\r\n */\n// Called by Atom when its value changes\n\nfunction propagateChanged(observable) {\n  // invariantLOS(observable, \"changed start\");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...\n\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      if ( true && d.isTracing_ !== TraceMode.NONE) {\n        logTraceInfo(d, observable);\n      }\n\n      d.onBecomeStale_();\n    }\n\n    d.dependenciesState_ = IDerivationState_.STALE_;\n  }); // invariantLOS(observable, \"changed end\");\n} // Called by ComputedValue when it recalculate and its value changed\n\nfunction propagateChangeConfirmed(observable) {\n  // invariantLOS(observable, \"confirmed start\");\n  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;\n  observable.lowestObserverState_ = IDerivationState_.STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n      d.dependenciesState_ = IDerivationState_.STALE_;\n\n      if ( true && d.isTracing_ !== TraceMode.NONE) {\n        logTraceInfo(d, observable);\n      }\n    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n    ) {\n        observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;\n      }\n  }); // invariantLOS(observable, \"confirmed end\");\n} // Used by computed when its dependency changed, but we don't wan't to immediately recompute.\n\nfunction propagateMaybeChanged(observable) {\n  // invariantLOS(observable, \"maybe start\");\n  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;\n  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;\n  observable.observers_.forEach(function (d) {\n    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;\n      d.onBecomeStale_();\n    }\n  }); // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation, observable) {\n  console.log(\"[mobx.trace] '\" + derivation.name_ + \"' is invalidated due to a change in: '\" + observable.name_ + \"'\");\n\n  if (derivation.isTracing_ === TraceMode.BREAK) {\n    var lines = [];\n    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore\n\n    new Function(\"debugger;\\n/*\\nTracing '\" + derivation.name_ + \"'\\n\\nYou are entering this break point because derivation '\" + derivation.name_ + \"' is being traced and '\" + observable.name_ + \"' is now forcing it to update.\\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\\n\\n\" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\") + \"\\n\\nThe dependencies for this derivation are:\\n\\n\" + lines.join(\"\\n\") + \"\\n*/\\n    \")();\n  }\n}\n\nfunction printDepTree(tree, lines, depth) {\n  if (lines.length >= 1000) {\n    lines.push(\"(and many more)\");\n    return;\n  }\n\n  lines.push(\"\" + new Array(depth).join(\"\\t\") + tree.name); // MWE: not the fastest, but the easiest way :)\n\n  if (tree.dependencies) tree.dependencies.forEach(function (child) {\n    return printDepTree(child, lines, depth + 1);\n  });\n}\n\nvar Reaction = /*#__PURE__*/function () {\n  // nodes we are looking at. Our value depends on these nodes\n  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {\n    if (name_ === void 0) {\n      name_ =  true ? \"Reaction@\" + getNextId() : 0;\n    }\n\n    if (requiresObservable_ === void 0) {\n      requiresObservable_ = false;\n    }\n\n    this.name_ = void 0;\n    this.onInvalidate_ = void 0;\n    this.errorHandler_ = void 0;\n    this.requiresObservable_ = void 0;\n    this.observing_ = [];\n    this.newObserving_ = [];\n    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;\n    this.diffValue_ = 0;\n    this.runId_ = 0;\n    this.unboundDepsCount_ = 0;\n    this.isDisposed_ = false;\n    this.isScheduled_ = false;\n    this.isTrackPending_ = false;\n    this.isRunning_ = false;\n    this.isTracing_ = TraceMode.NONE;\n    this.name_ = name_;\n    this.onInvalidate_ = onInvalidate_;\n    this.errorHandler_ = errorHandler_;\n    this.requiresObservable_ = requiresObservable_;\n  }\n\n  var _proto = Reaction.prototype;\n\n  _proto.onBecomeStale_ = function onBecomeStale_() {\n    this.schedule_();\n  };\n\n  _proto.schedule_ = function schedule_() {\n    if (!this.isScheduled_) {\n      this.isScheduled_ = true;\n      globalState.pendingReactions.push(this);\n      runReactions();\n    }\n  };\n\n  _proto.isScheduled = function isScheduled() {\n    return this.isScheduled_;\n  }\n  /**\r\n   * internal, use schedule() if you intend to kick off a reaction\r\n   */\n  ;\n\n  _proto.runReaction_ = function runReaction_() {\n    if (!this.isDisposed_) {\n      startBatch();\n      this.isScheduled_ = false;\n      var prev = globalState.trackingContext;\n      globalState.trackingContext = this;\n\n      if (shouldCompute(this)) {\n        this.isTrackPending_ = true;\n\n        try {\n          this.onInvalidate_();\n\n          if ( true && this.isTrackPending_ && isSpyEnabled()) {\n            // onInvalidate didn't trigger track right away..\n            spyReport({\n              name: this.name_,\n              type: \"scheduled-reaction\"\n            });\n          }\n        } catch (e) {\n          this.reportExceptionInDerivation_(e);\n        }\n      }\n\n      globalState.trackingContext = prev;\n      endBatch();\n    }\n  };\n\n  _proto.track = function track(fn) {\n    if (this.isDisposed_) {\n      return; // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n    }\n\n    startBatch();\n    var notify = isSpyEnabled();\n    var startTime;\n\n    if ( true && notify) {\n      startTime = Date.now();\n      spyReportStart({\n        name: this.name_,\n        type: \"reaction\"\n      });\n    }\n\n    this.isRunning_ = true;\n    var prevReaction = globalState.trackingContext; // reactions could create reactions...\n\n    globalState.trackingContext = this;\n    var result = trackDerivedFunction(this, fn, undefined);\n    globalState.trackingContext = prevReaction;\n    this.isRunning_ = false;\n    this.isTrackPending_ = false;\n\n    if (this.isDisposed_) {\n      // disposed during last run. Clean up everything that was bound after the dispose call.\n      clearObserving(this);\n    }\n\n    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);\n\n    if ( true && notify) {\n      spyReportEnd({\n        time: Date.now() - startTime\n      });\n    }\n\n    endBatch();\n  };\n\n  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {\n    var _this = this;\n\n    if (this.errorHandler_) {\n      this.errorHandler_(error, this);\n      return;\n    }\n\n    if (globalState.disableErrorBoundaries) throw error;\n    var message =  true ? \"[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '\" + this + \"'\" : 0;\n\n    if (!globalState.suppressReactionErrors) {\n      console.error(message, error);\n      /** If debugging brought you here, please, read the above message :-). Tnx! */\n    } else if (true) console.warn(\"[mobx] (error in reaction '\" + this.name_ + \"' suppressed, fix error of causing action below)\"); // prettier-ignore\n\n\n    if ( true && isSpyEnabled()) {\n      spyReport({\n        type: \"error\",\n        name: this.name_,\n        message: message,\n        error: \"\" + error\n      });\n    }\n\n    globalState.globalReactionErrorHandlers.forEach(function (f) {\n      return f(error, _this);\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    if (!this.isDisposed_) {\n      this.isDisposed_ = true;\n\n      if (!this.isRunning_) {\n        // if disposed while running, clean up later. Maybe not optimal, but rare case\n        startBatch();\n        clearObserving(this);\n        endBatch();\n      }\n    }\n  };\n\n  _proto.getDisposer_ = function getDisposer_() {\n    var r = this.dispose.bind(this);\n    r[$mobx] = this;\n    return r;\n  };\n\n  _proto.toString = function toString() {\n    return \"Reaction[\" + this.name_ + \"]\";\n  };\n\n  _proto.trace = function trace$1(enterBreakPoint) {\n    if (enterBreakPoint === void 0) {\n      enterBreakPoint = false;\n    }\n\n    trace(this, enterBreakPoint);\n  };\n\n  return Reaction;\n}();\nfunction onReactionError(handler) {\n  globalState.globalReactionErrorHandlers.push(handler);\n  return function () {\n    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);\n    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);\n  };\n}\n/**\r\n * Magic number alert!\r\n * Defines within how many times a reaction is allowed to re-trigger itself\r\n * until it is assumed that this is gonna be a never ending loop...\r\n */\n\nvar MAX_REACTION_ITERATIONS = 100;\n\nvar reactionScheduler = function reactionScheduler(f) {\n  return f();\n};\n\nfunction runReactions() {\n  // Trampolining, if runReactions are already running, new reactions will be picked up\n  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;\n  reactionScheduler(runReactionsHelper);\n}\n\nfunction runReactionsHelper() {\n  globalState.isRunningReactions = true;\n  var allReactions = globalState.pendingReactions;\n  var iterations = 0; // While running reactions, new reactions might be triggered.\n  // Hence we work with two variables and check whether\n  // we converge to no remaining reactions after a while.\n\n  while (allReactions.length > 0) {\n    if (++iterations === MAX_REACTION_ITERATIONS) {\n      console.error( true ? \"Reaction doesn't converge to a stable state after \" + MAX_REACTION_ITERATIONS + \" iterations.\" + (\" Probably there is a cycle in the reactive function: \" + allReactions[0]) : 0);\n      allReactions.splice(0); // clear reactions\n    }\n\n    var remainingReactions = allReactions.splice(0);\n\n    for (var i = 0, l = remainingReactions.length; i < l; i++) {\n      remainingReactions[i].runReaction_();\n    }\n  }\n\n  globalState.isRunningReactions = false;\n}\n\nvar isReaction = /*#__PURE__*/createInstanceofPredicate(\"Reaction\", Reaction);\nfunction setReactionScheduler(fn) {\n  var baseScheduler = reactionScheduler;\n\n  reactionScheduler = function reactionScheduler(f) {\n    return fn(function () {\n      return baseScheduler(f);\n    });\n  };\n}\n\nfunction isSpyEnabled() {\n  return  true && !!globalState.spyListeners.length;\n}\nfunction spyReport(event) {\n  if (false) {} // dead code elimination can do the rest\n\n  if (!globalState.spyListeners.length) return;\n  var listeners = globalState.spyListeners;\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](event);\n  }\n}\nfunction spyReportStart(event) {\n  if (false) {}\n\n  var change = _extends({}, event, {\n    spyReportStart: true\n  });\n\n  spyReport(change);\n}\nvar END_EVENT = {\n  type: \"report-end\",\n  spyReportEnd: true\n};\nfunction spyReportEnd(change) {\n  if (false) {}\n  if (change) spyReport(_extends({}, change, {\n    type: \"report-end\",\n    spyReportEnd: true\n  }));else spyReport(END_EVENT);\n}\nfunction spy(listener) {\n  if (false) {} else {\n    globalState.spyListeners.push(listener);\n    return once(function () {\n      globalState.spyListeners = globalState.spyListeners.filter(function (l) {\n        return l !== listener;\n      });\n    });\n  }\n}\n\nvar ACTION = \"action\";\nvar ACTION_BOUND = \"action.bound\";\nvar AUTOACTION = \"autoAction\";\nvar AUTOACTION_BOUND = \"autoAction.bound\";\nvar DEFAULT_ACTION_NAME = \"<unnamed action>\";\nvar actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);\nvar actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {\n  bound: true\n});\nvar autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {\n  autoAction: true\n});\nvar autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {\n  autoAction: true,\n  bound: true\n});\n\nfunction createActionFactory(autoAction) {\n  var res = function action(arg1, arg2) {\n    // action(fn() {})\n    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action(\"name\", fn() {})\n\n    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action\n\n    if (isStringish(arg2)) {\n      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);\n    } // action(\"name\") & @action(\"name\")\n\n\n    if (isStringish(arg1)) {\n      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n        name: arg1,\n        autoAction: autoAction\n      }));\n    }\n\n    if (true) die(\"Invalid arguments for `action`\");\n  };\n\n  return res;\n}\n\nvar action = /*#__PURE__*/createActionFactory(false);\nObject.assign(action, actionAnnotation);\nvar autoAction = /*#__PURE__*/createActionFactory(true);\nObject.assign(autoAction, autoActionAnnotation);\naction.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);\nautoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);\nfunction runInAction(fn) {\n  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);\n}\nfunction isAction(thing) {\n  return isFunction(thing) && thing.isMobxAction === true;\n}\n\n/**\r\n * Creates a named reactive view and keeps it alive, so that the view is always\r\n * updated if one of the dependencies changes, even when the view is not further used by something else.\r\n * @param view The reactive view\r\n * @returns disposer function, which can be used to stop the view from being updated in the future.\r\n */\n\nfunction autorun(view, opts) {\n  var _opts$name, _opts;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (true) {\n    if (!isFunction(view)) die(\"Autorun expects a function as first argument\");\n    if (isAction(view)) die(\"Autorun does not accept actions since actions are untrackable\");\n  }\n\n  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || \"Autorun@\" + getNextId() : 0;\n  var runSync = !opts.scheduler && !opts.delay;\n  var reaction;\n\n  if (runSync) {\n    // normal autorun\n    reaction = new Reaction(name, function () {\n      this.track(reactionRunner);\n    }, opts.onError, opts.requiresObservable);\n  } else {\n    var scheduler = createSchedulerFromOptions(opts); // debounced autorun\n\n    var isScheduled = false;\n    reaction = new Reaction(name, function () {\n      if (!isScheduled) {\n        isScheduled = true;\n        scheduler(function () {\n          isScheduled = false;\n          if (!reaction.isDisposed_) reaction.track(reactionRunner);\n        });\n      }\n    }, opts.onError, opts.requiresObservable);\n  }\n\n  function reactionRunner() {\n    view(reaction);\n  }\n\n  reaction.schedule_();\n  return reaction.getDisposer_();\n}\n\nvar run = function run(f) {\n  return f();\n};\n\nfunction createSchedulerFromOptions(opts) {\n  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {\n    return setTimeout(f, opts.delay);\n  } : run;\n}\n\nfunction reaction(expression, effect, opts) {\n  var _opts$name2;\n\n  if (opts === void 0) {\n    opts = EMPTY_OBJECT;\n  }\n\n  if (true) {\n    if (!isFunction(expression) || !isFunction(effect)) die(\"First and second argument to reaction should be functions\");\n    if (!isPlainObject(opts)) die(\"Third argument of reactions should be an object\");\n  }\n\n  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? \"Reaction@\" + getNextId() : 0;\n  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);\n  var runSync = !opts.scheduler && !opts.delay;\n  var scheduler = createSchedulerFromOptions(opts);\n  var firstTime = true;\n  var isScheduled = false;\n  var value;\n  var oldValue = undefined; // only an issue with fireImmediately\n\n  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer[\"default\"];\n  var r = new Reaction(name, function () {\n    if (firstTime || runSync) {\n      reactionRunner();\n    } else if (!isScheduled) {\n      isScheduled = true;\n      scheduler(reactionRunner);\n    }\n  }, opts.onError, opts.requiresObservable);\n\n  function reactionRunner() {\n    isScheduled = false;\n    if (r.isDisposed_) return;\n    var changed = false;\n    r.track(function () {\n      var nextValue = allowStateChanges(false, function () {\n        return expression(r);\n      });\n      changed = firstTime || !equals(value, nextValue);\n      oldValue = value;\n      value = nextValue;\n    });\n    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);\n    firstTime = false;\n  }\n\n  r.schedule_();\n  return r.getDisposer_();\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n  return function () {\n    try {\n      return baseFn.apply(this, arguments);\n    } catch (e) {\n      errorHandler.call(this, e);\n    }\n  };\n}\n\nvar ON_BECOME_OBSERVED = \"onBO\";\nvar ON_BECOME_UNOBSERVED = \"onBUO\";\nfunction onBecomeObserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);\n}\nfunction onBecomeUnobserved(thing, arg2, arg3) {\n  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);\n}\n\nfunction interceptHook(hook, thing, arg2, arg3) {\n  var atom = typeof arg3 === \"function\" ? getAtom(thing, arg2) : getAtom(thing);\n  var cb = isFunction(arg3) ? arg3 : arg2;\n  var listenersKey = hook + \"L\";\n\n  if (atom[listenersKey]) {\n    atom[listenersKey].add(cb);\n  } else {\n    atom[listenersKey] = new Set([cb]);\n  }\n\n  return function () {\n    var hookListeners = atom[listenersKey];\n\n    if (hookListeners) {\n      hookListeners[\"delete\"](cb);\n\n      if (hookListeners.size === 0) {\n        delete atom[listenersKey];\n      }\n    }\n  };\n}\n\nvar NEVER = \"never\";\nvar ALWAYS = \"always\";\nvar OBSERVED = \"observed\"; // const IF_AVAILABLE = \"ifavailable\"\n\nfunction configure(options) {\n  if (options.isolateGlobalState === true) {\n    isolateGlobalState();\n  }\n\n  var useProxies = options.useProxies,\n      enforceActions = options.enforceActions;\n\n  if (useProxies !== undefined) {\n    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== \"undefined\";\n  }\n\n  if (useProxies === \"ifavailable\") globalState.verifyProxies = true;\n\n  if (enforceActions !== undefined) {\n    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;\n    globalState.enforceActions = ea;\n    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;\n  }\n  [\"computedRequiresReaction\", \"reactionRequiresObservable\", \"observableRequiresReaction\", \"disableErrorBoundaries\", \"safeDescriptors\"].forEach(function (key) {\n    if (key in options) globalState[key] = !!options[key];\n  });\n  globalState.allowStateReads = !globalState.observableRequiresReaction;\n\n  if ( true && globalState.disableErrorBoundaries === true) {\n    console.warn(\"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\");\n  }\n\n  if (options.reactionScheduler) {\n    setReactionScheduler(options.reactionScheduler);\n  }\n}\n\nfunction extendObservable(target, properties, annotations, options) {\n  if (true) {\n    if (arguments.length > 4) die(\"'extendObservable' expected 2-4 arguments\");\n    if (typeof target !== \"object\") die(\"'extendObservable' expects an object as first argument\");\n    if (isObservableMap(target)) die(\"'extendObservable' should not be used on maps, use map.merge instead\");\n    if (!isPlainObject(properties)) die(\"'extendObservabe' only accepts plain objects as second argument\");\n    if (isObservable(properties) || isObservable(annotations)) die(\"Extending an object with another observable (object) is not supported\");\n  } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n\n\n  var descriptors = getOwnPropertyDescriptors(properties);\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    ownKeys(descriptors).forEach(function (key) {\n      adm.extend_(key, descriptors[key], // must pass \"undefined\" for { key: undefined }\n      !annotations ? true : key in annotations ? annotations[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nfunction getDependencyTree(thing, property) {\n  return nodeToDependencyTree(getAtom(thing, property));\n}\n\nfunction nodeToDependencyTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);\n  return result;\n}\n\nfunction getObserverTree(thing, property) {\n  return nodeToObserverTree(getAtom(thing, property));\n}\n\nfunction nodeToObserverTree(node) {\n  var result = {\n    name: node.name_\n  };\n  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);\n  return result;\n}\n\nfunction unique(list) {\n  return Array.from(new Set(list));\n}\n\nvar generatorId = 0;\nfunction FlowCancellationError() {\n  this.message = \"FLOW_CANCELLED\";\n}\nFlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);\nfunction isFlowCancellationError(error) {\n  return error instanceof FlowCancellationError;\n}\nvar flowAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow\");\nvar flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation(\"flow.bound\", {\n  bound: true\n});\nvar flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {\n  // @flow\n  if (isStringish(arg2)) {\n    return storeAnnotation(arg1, arg2, flowAnnotation);\n  } // flow(fn)\n\n\n  if ( true && arguments.length !== 1) die(\"Flow expects single argument with generator function\");\n  var generator = arg1;\n  var name = generator.name || \"<unnamed flow>\"; // Implementation based on https://github.com/tj/co/blob/master/index.js\n\n  var res = function res() {\n    var ctx = this;\n    var args = arguments;\n    var runId = ++generatorId;\n    var gen = action(name + \" - runid: \" + runId + \" - init\", generator).apply(ctx, args);\n    var rejector;\n    var pendingPromise = undefined;\n    var promise = new Promise(function (resolve, reject) {\n      var stepId = 0;\n      rejector = reject;\n\n      function onFulfilled(res) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen.next).call(gen, res);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function onRejected(err) {\n        pendingPromise = undefined;\n        var ret;\n\n        try {\n          ret = action(name + \" - runid: \" + runId + \" - yield \" + stepId++, gen[\"throw\"]).call(gen, err);\n        } catch (e) {\n          return reject(e);\n        }\n\n        next(ret);\n      }\n\n      function next(ret) {\n        if (isFunction(ret == null ? void 0 : ret.then)) {\n          // an async iterator\n          ret.then(next, reject);\n          return;\n        }\n\n        if (ret.done) return resolve(ret.value);\n        pendingPromise = Promise.resolve(ret.value);\n        return pendingPromise.then(onFulfilled, onRejected);\n      }\n\n      onFulfilled(undefined); // kick off the process\n    });\n    promise.cancel = action(name + \" - runid: \" + runId + \" - cancel\", function () {\n      try {\n        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..\n\n        var _res = gen[\"return\"](undefined); // eat anything that promise would do, it's cancelled!\n\n\n        var yieldedPromise = Promise.resolve(_res.value);\n        yieldedPromise.then(noop, noop);\n        cancelPromise(yieldedPromise); // maybe it can be cancelled :)\n        // reject our original promise\n\n        rejector(new FlowCancellationError());\n      } catch (e) {\n        rejector(e); // there could be a throwing finally block\n      }\n    });\n    return promise;\n  };\n\n  res.isMobXFlow = true;\n  return res;\n}, flowAnnotation);\nflow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);\n\nfunction cancelPromise(promise) {\n  if (isFunction(promise.cancel)) promise.cancel();\n}\n\nfunction flowResult(result) {\n  return result; // just tricking TypeScript :)\n}\nfunction isFlow(fn) {\n  return (fn == null ? void 0 : fn.isMobXFlow) === true;\n}\n\nfunction interceptReads(thing, propOrHandler, handler) {\n  var target;\n\n  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n    target = getAdministration(thing);\n  } else if (isObservableObject(thing)) {\n    if ( true && !isStringish(propOrHandler)) return die(\"InterceptReads can only be used with a specific property, not with an object in general\");\n    target = getAdministration(thing, propOrHandler);\n  } else if (true) {\n    return die(\"Expected observable map, object or array as first array\");\n  }\n\n  if ( true && target.dehancer !== undefined) return die(\"An intercept reader was already established\");\n  target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler;\n  return function () {\n    target.dehancer = undefined;\n  };\n}\n\nfunction intercept(thing, propOrHandler, handler) {\n  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);\n}\n\nfunction interceptInterceptable(thing, handler) {\n  return getAdministration(thing).intercept_(handler);\n}\n\nfunction interceptProperty(thing, property, handler) {\n  return getAdministration(thing, property).intercept_(handler);\n}\n\nfunction _isComputed(value, property) {\n  if (property !== undefined) {\n    if (isObservableObject(value) === false) return false;\n    if (!value[$mobx].values_.has(property)) return false;\n    var atom = getAtom(value, property);\n    return isComputedValue(atom);\n  }\n\n  return isComputedValue(value);\n}\nfunction isComputed(value) {\n  if ( true && arguments.length > 1) return die(\"isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property\");\n  return _isComputed(value);\n}\nfunction isComputedProp(value, propName) {\n  if ( true && !isStringish(propName)) return die(\"isComputed expected a property name as second argument\");\n  return _isComputed(value, propName);\n}\n\nfunction _isObservable(value, property) {\n  if (!value) return false;\n\n  if (property !== undefined) {\n    if ( true && (isObservableMap(value) || isObservableArray(value))) return die(\"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\");\n\n    if (isObservableObject(value)) {\n      return value[$mobx].values_.has(property);\n    }\n\n    return false;\n  } // For first check, see #701\n\n\n  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);\n}\n\nfunction isObservable(value) {\n  if ( true && arguments.length !== 1) die(\"isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property\");\n  return _isObservable(value);\n}\nfunction isObservableProp(value, propName) {\n  if ( true && !isStringish(propName)) return die(\"expected a property name as second argument\");\n  return _isObservable(value, propName);\n}\n\nfunction keys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].keys_();\n  }\n\n  if (isObservableMap(obj) || isObservableSet(obj)) {\n    return Array.from(obj.keys());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (_, index) {\n      return index;\n    });\n  }\n\n  die(5);\n}\nfunction values(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return obj[key];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return obj.get(key);\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.values());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.slice();\n  }\n\n  die(6);\n}\nfunction entries(obj) {\n  if (isObservableObject(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj[key]];\n    });\n  }\n\n  if (isObservableMap(obj)) {\n    return keys(obj).map(function (key) {\n      return [key, obj.get(key)];\n    });\n  }\n\n  if (isObservableSet(obj)) {\n    return Array.from(obj.entries());\n  }\n\n  if (isObservableArray(obj)) {\n    return obj.map(function (key, index) {\n      return [index, key];\n    });\n  }\n\n  die(7);\n}\nfunction set(obj, key, value) {\n  if (arguments.length === 2 && !isObservableSet(obj)) {\n    startBatch();\n    var _values = key;\n\n    try {\n      for (var _key in _values) {\n        set(obj, _key, _values[_key]);\n      }\n    } finally {\n      endBatch();\n    }\n\n    return;\n  }\n\n  if (isObservableObject(obj)) {\n    obj[$mobx].set_(key, value);\n  } else if (isObservableMap(obj)) {\n    obj.set(key, value);\n  } else if (isObservableSet(obj)) {\n    obj.add(key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== \"number\") key = parseInt(key, 10);\n    if (key < 0) die(\"Invalid index: '\" + key + \"'\");\n    startBatch();\n    if (key >= obj.length) obj.length = key + 1;\n    obj[key] = value;\n    endBatch();\n  } else die(8);\n}\nfunction remove(obj, key) {\n  if (isObservableObject(obj)) {\n    obj[$mobx].delete_(key);\n  } else if (isObservableMap(obj)) {\n    obj[\"delete\"](key);\n  } else if (isObservableSet(obj)) {\n    obj[\"delete\"](key);\n  } else if (isObservableArray(obj)) {\n    if (typeof key !== \"number\") key = parseInt(key, 10);\n    obj.splice(key, 1);\n  } else {\n    die(9);\n  }\n}\nfunction has(obj, key) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].has_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.has(key);\n  } else if (isObservableSet(obj)) {\n    return obj.has(key);\n  } else if (isObservableArray(obj)) {\n    return key >= 0 && key < obj.length;\n  }\n\n  die(10);\n}\nfunction get(obj, key) {\n  if (!has(obj, key)) return undefined;\n\n  if (isObservableObject(obj)) {\n    return obj[$mobx].get_(key);\n  } else if (isObservableMap(obj)) {\n    return obj.get(key);\n  } else if (isObservableArray(obj)) {\n    return obj[key];\n  }\n\n  die(11);\n}\nfunction apiDefineProperty(obj, key, descriptor) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].defineProperty_(key, descriptor);\n  }\n\n  die(39);\n}\nfunction apiOwnKeys(obj) {\n  if (isObservableObject(obj)) {\n    return obj[$mobx].ownKeys_();\n  }\n\n  die(38);\n}\n\nfunction observe(thing, propOrCb, cbOrFire, fireImmediately) {\n  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);\n}\n\nfunction observeObservable(thing, listener, fireImmediately) {\n  return getAdministration(thing).observe_(listener, fireImmediately);\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately) {\n  return getAdministration(thing, property).observe_(listener, fireImmediately);\n}\n\nfunction cache(map, key, value) {\n  map.set(key, value);\n  return value;\n}\n\nfunction toJSHelper(source, __alreadySeen) {\n  if (source == null || typeof source !== \"object\" || source instanceof Date || !isObservable(source)) return source;\n  if (isObservableValue(source) || isComputedValue(source)) return toJSHelper(source.get(), __alreadySeen);\n\n  if (__alreadySeen.has(source)) {\n    return __alreadySeen.get(source);\n  }\n\n  if (isObservableArray(source)) {\n    var res = cache(__alreadySeen, source, new Array(source.length));\n    source.forEach(function (value, idx) {\n      res[idx] = toJSHelper(value, __alreadySeen);\n    });\n    return res;\n  }\n\n  if (isObservableSet(source)) {\n    var _res = cache(__alreadySeen, source, new Set());\n\n    source.forEach(function (value) {\n      _res.add(toJSHelper(value, __alreadySeen));\n    });\n    return _res;\n  }\n\n  if (isObservableMap(source)) {\n    var _res2 = cache(__alreadySeen, source, new Map());\n\n    source.forEach(function (value, key) {\n      _res2.set(key, toJSHelper(value, __alreadySeen));\n    });\n    return _res2;\n  } else {\n    // must be observable object\n    var _res3 = cache(__alreadySeen, source, {});\n\n    apiOwnKeys(source).forEach(function (key) {\n      if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n        _res3[key] = toJSHelper(source[key], __alreadySeen);\n      }\n    });\n    return _res3;\n  }\n}\n/**\r\n * Basically, a deep clone, so that no reactive property will exist anymore.\r\n */\n\n\nfunction toJS(source, options) {\n  if ( true && options) die(\"toJS no longer supports options\");\n  return toJSHelper(source, new Map());\n}\n\nfunction trace() {\n  if (false) {}\n  var enterBreakPoint = false;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof args[args.length - 1] === \"boolean\") enterBreakPoint = args.pop();\n  var derivation = getAtomFromArgs(args);\n\n  if (!derivation) {\n    return die(\"'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly\");\n  }\n\n  if (derivation.isTracing_ === TraceMode.NONE) {\n    console.log(\"[mobx.trace] '\" + derivation.name_ + \"' tracing enabled\");\n  }\n\n  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;\n}\n\nfunction getAtomFromArgs(args) {\n  switch (args.length) {\n    case 0:\n      return globalState.trackingDerivation;\n\n    case 1:\n      return getAtom(args[0]);\n\n    case 2:\n      return getAtom(args[0], args[1]);\n  }\n}\n\n/**\r\n * During a transaction no views are updated until the end of the transaction.\r\n * The transaction will be run synchronously nonetheless.\r\n *\r\n * @param action a function that updates some reactive state\r\n * @returns any value that was returned by the 'action' parameter.\r\n */\n\nfunction transaction(action, thisArg) {\n  if (thisArg === void 0) {\n    thisArg = undefined;\n  }\n\n  startBatch();\n\n  try {\n    return action.apply(thisArg);\n  } finally {\n    endBatch();\n  }\n}\n\nfunction when(predicate, arg1, arg2) {\n  if (arguments.length === 1 || arg1 && typeof arg1 === \"object\") return whenPromise(predicate, arg1);\n  return _when(predicate, arg1, arg2 || {});\n}\n\nfunction _when(predicate, effect, opts) {\n  var timeoutHandle;\n\n  if (typeof opts.timeout === \"number\") {\n    timeoutHandle = setTimeout(function () {\n      if (!disposer[$mobx].isDisposed_) {\n        disposer();\n        var error = new Error(\"WHEN_TIMEOUT\");\n        if (opts.onError) opts.onError(error);else throw error;\n      }\n    }, opts.timeout);\n  }\n\n  opts.name =  true ? opts.name || \"When@\" + getNextId() : 0;\n  var effectAction = createAction( true ? opts.name + \"-effect\" : 0, effect); // eslint-disable-next-line\n\n  var disposer = autorun(function (r) {\n    // predicate should not change state\n    var cond = allowStateChanges(false, predicate);\n\n    if (cond) {\n      r.dispose();\n      if (timeoutHandle) clearTimeout(timeoutHandle);\n      effectAction();\n    }\n  }, opts);\n  return disposer;\n}\n\nfunction whenPromise(predicate, opts) {\n  if ( true && opts && opts.onError) return die(\"the options 'onError' and 'promise' cannot be combined\");\n  var cancel;\n  var res = new Promise(function (resolve, reject) {\n    var disposer = _when(predicate, resolve, _extends({}, opts, {\n      onError: reject\n    }));\n\n    cancel = function cancel() {\n      disposer();\n      reject(\"WHEN_CANCELLED\");\n    };\n  });\n  res.cancel = cancel;\n  return res;\n}\n\nfunction getAdm(target) {\n  return target[$mobx];\n} // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\n\n\nvar objectProxyTraps = {\n  has: function has(target, name) {\n    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement(\"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\");\n    return getAdm(target).has_(name);\n  },\n  get: function get(target, name) {\n    return getAdm(target).get_(name);\n  },\n  set: function set(target, name, value) {\n    var _getAdm$set_;\n\n    if (!isStringish(name)) return false;\n\n    if ( true && !getAdm(target).values_.has(name)) {\n      warnAboutProxyRequirement(\"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\");\n    } // null (intercepted) -> true (success)\n\n\n    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;\n  },\n  deleteProperty: function deleteProperty(target, name) {\n    var _getAdm$delete_;\n\n    if (true) {\n      warnAboutProxyRequirement(\"delete properties from an observable object. Use 'remove' from 'mobx' instead.\");\n    }\n\n    if (!isStringish(name)) return false; // null (intercepted) -> true (success)\n\n    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;\n  },\n  defineProperty: function defineProperty(target, name, descriptor) {\n    var _getAdm$definePropert;\n\n    if (true) {\n      warnAboutProxyRequirement(\"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\");\n    } // null (intercepted) -> true (success)\n\n\n    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;\n  },\n  ownKeys: function ownKeys(target) {\n    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement(\"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\");\n    return getAdm(target).ownKeys_();\n  },\n  preventExtensions: function preventExtensions(target) {\n    die(13);\n  }\n};\nfunction asDynamicObservableObject(target, options) {\n  var _target$$mobx, _target$$mobx$proxy_;\n\n  assertProxies();\n  target = asObservableObject(target, options);\n  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);\n}\n\nfunction hasInterceptors(interceptable) {\n  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;\n}\nfunction registerInterceptor(interceptable, handler) {\n  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);\n  interceptors.push(handler);\n  return once(function () {\n    var idx = interceptors.indexOf(handler);\n    if (idx !== -1) interceptors.splice(idx, 1);\n  });\n}\nfunction interceptChange(interceptable, change) {\n  var prevU = untrackedStart();\n\n  try {\n    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n    var interceptors = [].concat(interceptable.interceptors_ || []);\n\n    for (var i = 0, l = interceptors.length; i < l; i++) {\n      change = interceptors[i](change);\n      if (change && !change.type) die(14);\n      if (!change) break;\n    }\n\n    return change;\n  } finally {\n    untrackedEnd(prevU);\n  }\n}\n\nfunction hasListeners(listenable) {\n  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;\n}\nfunction registerListener(listenable, handler) {\n  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);\n  listeners.push(handler);\n  return once(function () {\n    var idx = listeners.indexOf(handler);\n    if (idx !== -1) listeners.splice(idx, 1);\n  });\n}\nfunction notifyListeners(listenable, change) {\n  var prevU = untrackedStart();\n  var listeners = listenable.changeListeners_;\n  if (!listeners) return;\n  listeners = listeners.slice();\n\n  for (var i = 0, l = listeners.length; i < l; i++) {\n    listeners[i](change);\n  }\n\n  untrackedEnd(prevU);\n}\n\nfunction makeObservable(target, annotations, options) {\n  var adm = asObservableObject(target, options)[$mobx];\n  startBatch();\n\n  try {\n    var _annotations;\n\n    // Default to decorators\n    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate\n\n    ownKeys(annotations).forEach(function (key) {\n      return adm.make_(key, annotations[key]);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n} // proto[keysSymbol] = new Set<PropertyKey>()\n\nvar keysSymbol = /*#__PURE__*/Symbol(\"mobx-keys\");\nfunction makeAutoObservable(target, overrides, options) {\n  if (true) {\n    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) die(\"'makeAutoObservable' can only be used for classes that don't have a superclass\");\n    if (isObservableObject(target)) die(\"makeAutoObservable can only be used on objects not already made observable\");\n  } // Optimization: avoid visiting protos\n  // Assumes that annotation.make_/.extend_ works the same for plain objects\n\n\n  if (isPlainObject(target)) {\n    return extendObservable(target, target, overrides, options);\n  }\n\n  var adm = asObservableObject(target, options)[$mobx]; // Optimization: cache keys on proto\n  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass\n\n  if (!target[keysSymbol]) {\n    var proto = Object.getPrototypeOf(target);\n    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));\n    keys[\"delete\"](\"constructor\");\n    keys[\"delete\"]($mobx);\n    addHiddenProp(proto, keysSymbol, keys);\n  }\n\n  startBatch();\n\n  try {\n    target[keysSymbol].forEach(function (key) {\n      return adm.make_(key, // must pass \"undefined\" for { key: undefined }\n      !overrides ? true : key in overrides ? overrides[key] : true);\n    });\n  } finally {\n    endBatch();\n  }\n\n  return target;\n}\n\nvar SPLICE = \"splice\";\nvar UPDATE = \"update\";\nvar MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nvar arrayTraps = {\n  get: function get(target, name) {\n    var adm = target[$mobx];\n    if (name === $mobx) return adm;\n    if (name === \"length\") return adm.getArrayLength_();\n\n    if (typeof name === \"string\" && !isNaN(name)) {\n      return adm.get_(parseInt(name));\n    }\n\n    if (hasProp(arrayExtensions, name)) {\n      return arrayExtensions[name];\n    }\n\n    return target[name];\n  },\n  set: function set(target, name, value) {\n    var adm = target[$mobx];\n\n    if (name === \"length\") {\n      adm.setArrayLength_(value);\n    }\n\n    if (typeof name === \"symbol\" || isNaN(name)) {\n      target[name] = value;\n    } else {\n      // numeric string\n      adm.set_(parseInt(name), value);\n    }\n\n    return true;\n  },\n  preventExtensions: function preventExtensions() {\n    die(15);\n  }\n};\nvar ObservableArrayAdministration = /*#__PURE__*/function () {\n  // this is the prop that gets proxied, so can't replace it!\n  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {\n    if (name === void 0) {\n      name =  true ? \"ObservableArray@\" + getNextId() : 0;\n    }\n\n    this.owned_ = void 0;\n    this.legacyMode_ = void 0;\n    this.atom_ = void 0;\n    this.values_ = [];\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.enhancer_ = void 0;\n    this.dehancer = void 0;\n    this.proxy_ = void 0;\n    this.lastKnownLength_ = 0;\n    this.owned_ = owned_;\n    this.legacyMode_ = legacyMode_;\n    this.atom_ = new Atom(name);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV,  true ? name + \"[..]\" : 0);\n    };\n  }\n\n  var _proto = ObservableArrayAdministration.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) return this.dehancer(value);\n    return value;\n  };\n\n  _proto.dehanceValues_ = function dehanceValues_(values) {\n    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);\n    return values;\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if (fireImmediately === void 0) {\n      fireImmediately = false;\n    }\n\n    if (fireImmediately) {\n      listener({\n        observableKind: \"array\",\n        object: this.proxy_,\n        debugObjectName: this.atom_.name_,\n        type: \"splice\",\n        index: 0,\n        added: this.values_.slice(),\n        addedCount: this.values_.length,\n        removed: [],\n        removedCount: 0\n      });\n    }\n\n    return registerListener(this, listener);\n  };\n\n  _proto.getArrayLength_ = function getArrayLength_() {\n    this.atom_.reportObserved();\n    return this.values_.length;\n  };\n\n  _proto.setArrayLength_ = function setArrayLength_(newLength) {\n    if (typeof newLength !== \"number\" || newLength < 0) die(\"Out of range: \" + newLength);\n    var currentLength = this.values_.length;\n    if (newLength === currentLength) return;else if (newLength > currentLength) {\n      var newItems = new Array(newLength - currentLength);\n\n      for (var i = 0; i < newLength - currentLength; i++) {\n        newItems[i] = undefined;\n      } // No Array.fill everywhere...\n\n\n      this.spliceWithArray_(currentLength, 0, newItems);\n    } else this.spliceWithArray_(newLength, currentLength - newLength);\n  };\n\n  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {\n    if (oldLength !== this.lastKnownLength_) die(16);\n    this.lastKnownLength_ += delta;\n    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);\n  };\n\n  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {\n    var _this = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n    var length = this.values_.length;\n    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);\n    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));\n    if (newItems === undefined) newItems = EMPTY_ARRAY;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_,\n        type: SPLICE,\n        index: index,\n        removedCount: deleteCount,\n        added: newItems\n      });\n      if (!change) return EMPTY_ARRAY;\n      deleteCount = change.removedCount;\n      newItems = change.added;\n    }\n\n    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {\n      return _this.enhancer_(v, undefined);\n    });\n\n    if (this.legacyMode_ || \"development\" !== \"production\") {\n      var lengthDelta = newItems.length - deleteCount;\n      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified\n    }\n\n    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);\n    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);\n    return this.dehanceValues_(res);\n  };\n\n  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {\n    if (newItems.length < MAX_SPLICE_SIZE) {\n      var _this$values_;\n\n      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));\n    } else {\n      var res = this.values_.slice(index, index + deleteCount);\n      var oldItems = this.values_.slice(index + deleteCount);\n      this.values_.length = index + newItems.length - deleteCount;\n\n      for (var i = 0; i < newItems.length; i++) {\n        this.values_[index + i] = newItems[i];\n      }\n\n      for (var _i = 0; _i < oldItems.length; _i++) {\n        this.values_[index + newItems.length + _i] = oldItems[_i];\n      }\n\n      return res;\n    }\n  };\n\n  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"array\",\n      object: this.proxy_,\n      type: UPDATE,\n      debugObjectName: this.atom_.name_,\n      index: index,\n      newValue: newValue,\n      oldValue: oldValue\n    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n\n    if ( true && notifySpy) spyReportStart(change);\n    this.atom_.reportChanged();\n    if (notify) notifyListeners(this, change);\n    if ( true && notifySpy) spyReportEnd();\n  };\n\n  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {\n    var notifySpy = !this.owned_ && isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"array\",\n      object: this.proxy_,\n      debugObjectName: this.atom_.name_,\n      type: SPLICE,\n      index: index,\n      removed: removed,\n      added: added,\n      removedCount: removed.length,\n      addedCount: added.length\n    } : null;\n    if ( true && notifySpy) spyReportStart(change);\n    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n\n    if (notify) notifyListeners(this, change);\n    if ( true && notifySpy) spyReportEnd();\n  };\n\n  _proto.get_ = function get_(index) {\n    if (index < this.values_.length) {\n      this.atom_.reportObserved();\n      return this.dehanceValue_(this.values_[index]);\n    }\n\n    console.warn( true ? \"[mobx] Out of bounds read: \" + index : 0);\n  };\n\n  _proto.set_ = function set_(index, newValue) {\n    var values = this.values_;\n\n    if (index < values.length) {\n      // update at index in range\n      checkIfStateModificationsAreAllowed(this.atom_);\n      var oldValue = values[index];\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          type: UPDATE,\n          object: this.proxy_,\n          index: index,\n          newValue: newValue\n        });\n        if (!change) return;\n        newValue = change.newValue;\n      }\n\n      newValue = this.enhancer_(newValue, oldValue);\n      var changed = newValue !== oldValue;\n\n      if (changed) {\n        values[index] = newValue;\n        this.notifyArrayChildUpdate_(index, newValue, oldValue);\n      }\n    } else if (index === values.length) {\n      // add a new item\n      this.spliceWithArray_(index, 0, [newValue]);\n    } else {\n      // out of bounds\n      die(17, index, values.length);\n    }\n  };\n\n  return ObservableArrayAdministration;\n}();\nfunction createObservableArray(initialValues, enhancer, name, owned) {\n  if (name === void 0) {\n    name =  true ? \"ObservableArray@\" + getNextId() : 0;\n  }\n\n  if (owned === void 0) {\n    owned = false;\n  }\n\n  assertProxies();\n  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);\n  addHiddenFinalProp(adm.values_, $mobx, adm);\n  var proxy = new Proxy(adm.values_, arrayTraps);\n  adm.proxy_ = proxy;\n\n  if (initialValues && initialValues.length) {\n    var prev = allowStateChangesStart(true);\n    adm.spliceWithArray_(0, 0, initialValues);\n    allowStateChangesEnd(prev);\n  }\n\n  return proxy;\n} // eslint-disable-next-line\n\nvar arrayExtensions = {\n  clear: function clear() {\n    return this.splice(0);\n  },\n  replace: function replace(newItems) {\n    var adm = this[$mobx];\n    return adm.spliceWithArray_(0, adm.values_.length, newItems);\n  },\n  // Used by JSON.stringify\n  toJSON: function toJSON() {\n    return this.slice();\n  },\n\n  /*\r\n   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\r\n   * since these functions alter the inner structure of the array, the have side effects.\r\n   * Because the have side effects, they should not be used in computed function,\r\n   * and for that reason the do not call dependencyState.notifyObserved\r\n   */\n  splice: function splice(index, deleteCount) {\n    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      newItems[_key - 2] = arguments[_key];\n    }\n\n    var adm = this[$mobx];\n\n    switch (arguments.length) {\n      case 0:\n        return [];\n\n      case 1:\n        return adm.spliceWithArray_(index);\n\n      case 2:\n        return adm.spliceWithArray_(index, deleteCount);\n    }\n\n    return adm.spliceWithArray_(index, deleteCount, newItems);\n  },\n  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {\n    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);\n  },\n  push: function push() {\n    var adm = this[$mobx];\n\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    adm.spliceWithArray_(adm.values_.length, 0, items);\n    return adm.values_.length;\n  },\n  pop: function pop() {\n    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];\n  },\n  shift: function shift() {\n    return this.splice(0, 1)[0];\n  },\n  unshift: function unshift() {\n    var adm = this[$mobx];\n\n    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      items[_key3] = arguments[_key3];\n    }\n\n    adm.spliceWithArray_(0, 0, items);\n    return adm.values_.length;\n  },\n  reverse: function reverse() {\n    // reverse by default mutates in place before returning the result\n    // which makes it both a 'derivation' and a 'mutation'.\n    if (globalState.trackingDerivation) {\n      die(37, \"reverse\");\n    }\n\n    this.replace(this.slice().reverse());\n    return this;\n  },\n  sort: function sort() {\n    // sort by default mutates in place before returning the result\n    // which goes against all good practices. Let's not change the array in place!\n    if (globalState.trackingDerivation) {\n      die(37, \"sort\");\n    }\n\n    var copy = this.slice();\n    copy.sort.apply(copy, arguments);\n    this.replace(copy);\n    return this;\n  },\n  remove: function remove(value) {\n    var adm = this[$mobx];\n    var idx = adm.dehanceValues_(adm.values_).indexOf(value);\n\n    if (idx > -1) {\n      this.splice(idx, 1);\n      return true;\n    }\n\n    return false;\n  }\n};\n/**\r\n * Wrap function from prototype\r\n * Without this, everything works as well, but this works\r\n * faster as everything works on unproxied values\r\n */\n\naddArrayExtension(\"concat\", simpleFunc);\naddArrayExtension(\"flat\", simpleFunc);\naddArrayExtension(\"includes\", simpleFunc);\naddArrayExtension(\"indexOf\", simpleFunc);\naddArrayExtension(\"join\", simpleFunc);\naddArrayExtension(\"lastIndexOf\", simpleFunc);\naddArrayExtension(\"slice\", simpleFunc);\naddArrayExtension(\"toString\", simpleFunc);\naddArrayExtension(\"toLocaleString\", simpleFunc); // map\n\naddArrayExtension(\"every\", mapLikeFunc);\naddArrayExtension(\"filter\", mapLikeFunc);\naddArrayExtension(\"find\", mapLikeFunc);\naddArrayExtension(\"findIndex\", mapLikeFunc);\naddArrayExtension(\"flatMap\", mapLikeFunc);\naddArrayExtension(\"forEach\", mapLikeFunc);\naddArrayExtension(\"map\", mapLikeFunc);\naddArrayExtension(\"some\", mapLikeFunc); // reduce\n\naddArrayExtension(\"reduce\", reduceLikeFunc);\naddArrayExtension(\"reduceRight\", reduceLikeFunc);\n\nfunction addArrayExtension(funcName, funcFactory) {\n  if (typeof Array.prototype[funcName] === \"function\") {\n    arrayExtensions[funcName] = funcFactory(funcName);\n  }\n} // Report and delegate to dehanced array\n\n\nfunction simpleFunc(funcName) {\n  return function () {\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction mapLikeFunc(funcName) {\n  return function (callback, thisArg) {\n    var _this2 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_);\n    return dehancedValues[funcName](function (element, index) {\n      return callback.call(thisArg, element, index, _this2);\n    });\n  };\n} // Make sure callbacks recieve correct array arg #2326\n\n\nfunction reduceLikeFunc(funcName) {\n  return function () {\n    var _this3 = this;\n\n    var adm = this[$mobx];\n    adm.atom_.reportObserved();\n    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length\n\n    var callback = arguments[0];\n\n    arguments[0] = function (accumulator, currentValue, index) {\n      return callback(accumulator, currentValue, index, _this3);\n    };\n\n    return dehancedValues[funcName].apply(dehancedValues, arguments);\n  };\n}\n\nvar isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableArrayAdministration\", ObservableArrayAdministration);\nfunction isObservableArray(thing) {\n  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);\n}\n\nvar _Symbol$iterator, _Symbol$toStringTag;\nvar ObservableMapMarker = {};\nvar ADD = \"add\";\nvar DELETE = \"delete\"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\n\n_Symbol$iterator = Symbol.iterator;\n_Symbol$toStringTag = Symbol.toStringTag;\nvar ObservableMap = /*#__PURE__*/function () {\n  // hasMap, not hashMap >-).\n  function ObservableMap(initialData, enhancer_, name_) {\n    if (enhancer_ === void 0) {\n      enhancer_ = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableMap@\" + getNextId() : 0;\n    }\n\n    this.enhancer_ = void 0;\n    this.name_ = void 0;\n    this[$mobx] = ObservableMapMarker;\n    this.data_ = void 0;\n    this.hasMap_ = void 0;\n    this.keysAtom_ = void 0;\n    this.interceptors_ = void 0;\n    this.changeListeners_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = enhancer_;\n    this.name_ = name_;\n\n    if (!isFunction(Map)) {\n      die(18);\n    }\n\n    this.keysAtom_ = createAtom( true ? this.name_ + \".keys()\" : 0);\n    this.data_ = new Map();\n    this.hasMap_ = new Map();\n    this.merge(initialData);\n  }\n\n  var _proto = ObservableMap.prototype;\n\n  _proto.has_ = function has_(key) {\n    return this.data_.has(key);\n  };\n\n  _proto.has = function has(key) {\n    var _this = this;\n\n    if (!globalState.trackingDerivation) return this.has_(key);\n    var entry = this.hasMap_.get(key);\n\n    if (!entry) {\n      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n      this.hasMap_.set(key, newEntry);\n      onBecomeUnobserved(newEntry, function () {\n        return _this.hasMap_[\"delete\"](key);\n      });\n    }\n\n    return entry.get();\n  };\n\n  _proto.set = function set(key, value) {\n    var hasKey = this.has_(key);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: hasKey ? UPDATE : ADD,\n        object: this,\n        newValue: value,\n        name: key\n      });\n      if (!change) return this;\n      value = change.newValue;\n    }\n\n    if (hasKey) {\n      this.updateValue_(key, value);\n    } else {\n      this.addValue_(key, value);\n    }\n\n    return this;\n  };\n\n  _proto[\"delete\"] = function _delete(key) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        name: key\n      });\n      if (!change) return false;\n    }\n\n    if (this.has_(key)) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: \"map\",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: this.data_.get(key).value_,\n        name: key\n      } : null;\n\n      if ( true && notifySpy) spyReportStart(_change);\n      transaction(function () {\n        _this2.keysAtom_.reportChanged();\n\n        _this2.updateHasMapEntry_(key, false);\n\n        var observable = _this2.data_.get(key);\n\n        observable.setNewValue_(undefined);\n\n        _this2.data_[\"delete\"](key);\n      });\n      if (notify) notifyListeners(this, _change);\n      if ( true && notifySpy) spyReportEnd();\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {\n    var entry = this.hasMap_.get(key);\n\n    if (entry) {\n      entry.setNewValue_(value);\n    }\n  };\n\n  _proto.updateValue_ = function updateValue_(key, newValue) {\n    var observable = this.data_.get(key);\n    newValue = observable.prepareNewValue_(newValue);\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notifySpy = isSpyEnabled();\n      var notify = hasListeners(this);\n      var change = notify || notifySpy ? {\n        observableKind: \"map\",\n        debugObjectName: this.name_,\n        type: UPDATE,\n        object: this,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n      if ( true && notifySpy) spyReportStart(change);\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, change);\n      if ( true && notifySpy) spyReportEnd();\n    }\n  };\n\n  _proto.addValue_ = function addValue_(key, newValue) {\n    var _this3 = this;\n\n    checkIfStateModificationsAreAllowed(this.keysAtom_);\n    transaction(function () {\n      var observable = new ObservableValue(newValue, _this3.enhancer_,  true ? _this3.name_ + \".\" + stringifyKey(key) : 0, false);\n\n      _this3.data_.set(key, observable);\n\n      newValue = observable.value_; // value might have been changed\n\n      _this3.updateHasMapEntry_(key, true);\n\n      _this3.keysAtom_.reportChanged();\n    });\n    var notifySpy = isSpyEnabled();\n    var notify = hasListeners(this);\n    var change = notify || notifySpy ? {\n      observableKind: \"map\",\n      debugObjectName: this.name_,\n      type: ADD,\n      object: this,\n      name: key,\n      newValue: newValue\n    } : null;\n    if ( true && notifySpy) spyReportStart(change);\n    if (notify) notifyListeners(this, change);\n    if ( true && notifySpy) spyReportEnd();\n  };\n\n  _proto.get = function get(key) {\n    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());\n    return this.dehanceValue_(undefined);\n  };\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.keys = function keys() {\n    this.keysAtom_.reportObserved();\n    return this.data_.keys();\n  };\n\n  _proto.values = function values() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next = keys.next(),\n            done = _keys$next.done,\n            value = _keys$next.value;\n\n        return {\n          done: done,\n          value: done ? undefined : self.get(value)\n        };\n      }\n    });\n  };\n\n  _proto.entries = function entries() {\n    var self = this;\n    var keys = this.keys();\n    return makeIterable({\n      next: function next() {\n        var _keys$next2 = keys.next(),\n            done = _keys$next2.done,\n            value = _keys$next2.value;\n\n        return {\n          done: done,\n          value: done ? undefined : [value, self.get(value)]\n        };\n      }\n    });\n  };\n\n  _proto[_Symbol$iterator] = function () {\n    return this.entries();\n  };\n\n  _proto.forEach = function forEach(callback, thisArg) {\n    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          key = _step$value[0],\n          value = _step$value[1];\n      callback.call(thisArg, value, key, this);\n    }\n  }\n  /** Merge another object into this object, returns this. */\n  ;\n\n  _proto.merge = function merge(other) {\n    var _this4 = this;\n\n    if (isObservableMap(other)) {\n      other = new Map(other);\n    }\n\n    transaction(function () {\n      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {\n        return _this4.set(key, other[key]);\n      });else if (Array.isArray(other)) other.forEach(function (_ref) {\n        var key = _ref[0],\n            value = _ref[1];\n        return _this4.set(key, value);\n      });else if (isES6Map(other)) {\n        if (other.constructor !== Map) die(19, other);\n        other.forEach(function (value, key) {\n          return _this4.set(key, value);\n        });\n      } else if (other !== null && other !== undefined) die(20, other);\n    });\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    var _this5 = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {\n          var key = _step2.value;\n\n          _this5[\"delete\"](key);\n        }\n      });\n    });\n  };\n\n  _proto.replace = function replace(values) {\n    var _this6 = this;\n\n    // Implementation requirements:\n    // - respect ordering of replacement map\n    // - allow interceptors to run and potentially prevent individual operations\n    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n    // - note that result map may differ from replacement map due to the interceptors\n    transaction(function () {\n      // Convert to map so we can do quick key lookups\n      var replacementMap = convertToMap(values);\n      var orderedData = new Map(); // Used for optimization\n\n      var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map\n      // if the key deletion is prevented by interceptor\n      // add entry at the beginning of the result map\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n\n        // Concurrently iterating/deleting keys\n        // iterator should handle this correctly\n        if (!replacementMap.has(key)) {\n          var deleted = _this6[\"delete\"](key); // Was the key removed?\n\n\n          if (deleted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          } else {\n            // Delete prevented by interceptor\n            var value = _this6.data_.get(key);\n\n            orderedData.set(key, value);\n          }\n        }\n      } // Merge entries\n\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {\n        var _step4$value = _step4.value,\n            _key = _step4$value[0],\n            _value = _step4$value[1];\n\n        // We will want to know whether a new key is added\n        var keyExisted = _this6.data_.has(_key); // Add or update value\n\n\n        _this6.set(_key, _value); // The addition could have been prevent by interceptor\n\n\n        if (_this6.data_.has(_key)) {\n          // The update could have been prevented by interceptor\n          // and also we want to preserve existing values\n          // so use value from _data map (instead of replacement map)\n          var _value2 = _this6.data_.get(_key);\n\n          orderedData.set(_key, _value2); // Was a new key added?\n\n          if (!keyExisted) {\n            // _keysAtom.reportChanged() was already called\n            keysReportChangedCalled = true;\n          }\n        }\n      } // Check for possible key order change\n\n\n      if (!keysReportChangedCalled) {\n        if (_this6.data_.size !== orderedData.size) {\n          // If size differs, keys are definitely modified\n          _this6.keysAtom_.reportChanged();\n        } else {\n          var iter1 = _this6.data_.keys();\n\n          var iter2 = orderedData.keys();\n          var next1 = iter1.next();\n          var next2 = iter2.next();\n\n          while (!next1.done) {\n            if (next1.value !== next2.value) {\n              _this6.keysAtom_.reportChanged();\n\n              break;\n            }\n\n            next1 = iter1.next();\n            next2 = iter2.next();\n          }\n        }\n      } // Use correctly ordered map\n\n\n      _this6.data_ = orderedData;\n    });\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    return \"[object ObservableMap]\";\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n\n  /**\r\n   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    if ( true && fireImmediately === true) die(\"`observe` doesn't support fireImmediately=true in combination with maps.\");\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _createClass(ObservableMap, [{\n    key: \"size\",\n    get: function get() {\n      this.keysAtom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"Map\";\n    }\n  }]);\n\n  return ObservableMap;\n}(); // eslint-disable-next-line\n\nvar isObservableMap = /*#__PURE__*/createInstanceofPredicate(\"ObservableMap\", ObservableMap);\n\nfunction convertToMap(dataStructure) {\n  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n    return dataStructure;\n  } else if (Array.isArray(dataStructure)) {\n    return new Map(dataStructure);\n  } else if (isPlainObject(dataStructure)) {\n    var map = new Map();\n\n    for (var key in dataStructure) {\n      map.set(key, dataStructure[key]);\n    }\n\n    return map;\n  } else {\n    return die(21, dataStructure);\n  }\n}\n\nvar _Symbol$iterator$1, _Symbol$toStringTag$1;\nvar ObservableSetMarker = {};\n_Symbol$iterator$1 = Symbol.iterator;\n_Symbol$toStringTag$1 = Symbol.toStringTag;\nvar ObservableSet = /*#__PURE__*/function () {\n  function ObservableSet(initialData, enhancer, name_) {\n    if (enhancer === void 0) {\n      enhancer = deepEnhancer;\n    }\n\n    if (name_ === void 0) {\n      name_ =  true ? \"ObservableSet@\" + getNextId() : 0;\n    }\n\n    this.name_ = void 0;\n    this[$mobx] = ObservableSetMarker;\n    this.data_ = new Set();\n    this.atom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.dehancer = void 0;\n    this.enhancer_ = void 0;\n    this.name_ = name_;\n\n    if (!isFunction(Set)) {\n      die(22);\n    }\n\n    this.atom_ = createAtom(this.name_);\n\n    this.enhancer_ = function (newV, oldV) {\n      return enhancer(newV, oldV, name_);\n    };\n\n    if (initialData) {\n      this.replace(initialData);\n    }\n  }\n\n  var _proto = ObservableSet.prototype;\n\n  _proto.dehanceValue_ = function dehanceValue_(value) {\n    if (this.dehancer !== undefined) {\n      return this.dehancer(value);\n    }\n\n    return value;\n  };\n\n  _proto.clear = function clear() {\n    var _this = this;\n\n    transaction(function () {\n      untracked(function () {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {\n          var value = _step.value;\n\n          _this[\"delete\"](value);\n        }\n      });\n    });\n  };\n\n  _proto.forEach = function forEach(callbackFn, thisArg) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {\n      var value = _step2.value;\n      callbackFn.call(thisArg, value, value, this);\n    }\n  };\n\n  _proto.add = function add(value) {\n    var _this2 = this;\n\n    checkIfStateModificationsAreAllowed(this.atom_);\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: ADD,\n        object: this,\n        newValue: value\n      });\n      if (!change) return this; // ideally, value = change.value would be done here, so that values can be\n      // changed by interceptor. Same applies for other Set and Map api's.\n    }\n\n    if (!this.has(value)) {\n      transaction(function () {\n        _this2.data_.add(_this2.enhancer_(value, undefined));\n\n        _this2.atom_.reportChanged();\n      });\n      var notifySpy =  true && isSpyEnabled();\n      var notify = hasListeners(this);\n\n      var _change = notify || notifySpy ? {\n        observableKind: \"set\",\n        debugObjectName: this.name_,\n        type: ADD,\n        object: this,\n        newValue: value\n      } : null;\n\n      if (notifySpy && \"development\" !== \"production\") spyReportStart(_change);\n      if (notify) notifyListeners(this, _change);\n      if (notifySpy && \"development\" !== \"production\") spyReportEnd();\n    }\n\n    return this;\n  };\n\n  _proto[\"delete\"] = function _delete(value) {\n    var _this3 = this;\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: DELETE,\n        object: this,\n        oldValue: value\n      });\n      if (!change) return false;\n    }\n\n    if (this.has(value)) {\n      var notifySpy =  true && isSpyEnabled();\n      var notify = hasListeners(this);\n\n      var _change2 = notify || notifySpy ? {\n        observableKind: \"set\",\n        debugObjectName: this.name_,\n        type: DELETE,\n        object: this,\n        oldValue: value\n      } : null;\n\n      if (notifySpy && \"development\" !== \"production\") spyReportStart(_change2);\n      transaction(function () {\n        _this3.atom_.reportChanged();\n\n        _this3.data_[\"delete\"](value);\n      });\n      if (notify) notifyListeners(this, _change2);\n      if (notifySpy && \"development\" !== \"production\") spyReportEnd();\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.has = function has(value) {\n    this.atom_.reportObserved();\n    return this.data_.has(this.dehanceValue_(value));\n  };\n\n  _proto.entries = function entries() {\n    var nextIndex = 0;\n    var keys = Array.from(this.keys());\n    var values = Array.from(this.values());\n    return makeIterable({\n      next: function next() {\n        var index = nextIndex;\n        nextIndex += 1;\n        return index < values.length ? {\n          value: [keys[index], values[index]],\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.keys = function keys() {\n    return this.values();\n  };\n\n  _proto.values = function values() {\n    this.atom_.reportObserved();\n    var self = this;\n    var nextIndex = 0;\n    var observableValues = Array.from(this.data_.values());\n    return makeIterable({\n      next: function next() {\n        return nextIndex < observableValues.length ? {\n          value: self.dehanceValue_(observableValues[nextIndex++]),\n          done: false\n        } : {\n          done: true\n        };\n      }\n    });\n  };\n\n  _proto.replace = function replace(other) {\n    var _this4 = this;\n\n    if (isObservableSet(other)) {\n      other = new Set(other);\n    }\n\n    transaction(function () {\n      if (Array.isArray(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (isES6Set(other)) {\n        _this4.clear();\n\n        other.forEach(function (value) {\n          return _this4.add(value);\n        });\n      } else if (other !== null && other !== undefined) {\n        die(\"Cannot initialize set from \" + other);\n      }\n    });\n    return this;\n  };\n\n  _proto.observe_ = function observe_(listener, fireImmediately) {\n    // ... 'fireImmediately' could also be true?\n    if ( true && fireImmediately === true) die(\"`observe` doesn't support fireImmediately=true in combination with sets.\");\n    return registerListener(this, listener);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return Array.from(this);\n  };\n\n  _proto.toString = function toString() {\n    return \"[object ObservableSet]\";\n  };\n\n  _proto[_Symbol$iterator$1] = function () {\n    return this.values();\n  };\n\n  _createClass(ObservableSet, [{\n    key: \"size\",\n    get: function get() {\n      this.atom_.reportObserved();\n      return this.data_.size;\n    }\n  }, {\n    key: _Symbol$toStringTag$1,\n    get: function get() {\n      return \"Set\";\n    }\n  }]);\n\n  return ObservableSet;\n}(); // eslint-disable-next-line\n\nvar isObservableSet = /*#__PURE__*/createInstanceofPredicate(\"ObservableSet\", ObservableSet);\n\nvar descriptorCache = /*#__PURE__*/Object.create(null);\nvar REMOVE = \"remove\";\nvar ObservableObjectAdministration = /*#__PURE__*/function () {\n  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided\n  defaultAnnotation_) {\n    if (values_ === void 0) {\n      values_ = new Map();\n    }\n\n    if (defaultAnnotation_ === void 0) {\n      defaultAnnotation_ = autoAnnotation;\n    }\n\n    this.target_ = void 0;\n    this.values_ = void 0;\n    this.name_ = void 0;\n    this.defaultAnnotation_ = void 0;\n    this.keysAtom_ = void 0;\n    this.changeListeners_ = void 0;\n    this.interceptors_ = void 0;\n    this.proxy_ = void 0;\n    this.isPlainObject_ = void 0;\n    this.appliedAnnotations_ = void 0;\n    this.pendingKeys_ = void 0;\n    this.target_ = target_;\n    this.values_ = values_;\n    this.name_ = name_;\n    this.defaultAnnotation_ = defaultAnnotation_;\n    this.keysAtom_ = new Atom( true ? this.name_ + \".keys\" : 0); // Optimization: we use this frequently\n\n    this.isPlainObject_ = isPlainObject(this.target_);\n\n    if ( true && !isAnnotation(this.defaultAnnotation_)) {\n      die(\"defaultAnnotation must be valid annotation\");\n    }\n\n    if (true) {\n      // Prepare structure for tracking which fields were already annotated\n      this.appliedAnnotations_ = {};\n    }\n  }\n\n  var _proto = ObservableObjectAdministration.prototype;\n\n  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {\n    return this.values_.get(key).get();\n  };\n\n  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {\n    var observable = this.values_.get(key);\n\n    if (observable instanceof ComputedValue) {\n      observable.set(newValue);\n      return true;\n    } // intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        type: UPDATE,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: newValue\n      });\n      if (!change) return null;\n      newValue = change.newValue;\n    }\n\n    newValue = observable.prepareNewValue_(newValue); // notify spy & observers\n\n    if (newValue !== globalState.UNCHANGED) {\n      var notify = hasListeners(this);\n      var notifySpy =  true && isSpyEnabled();\n\n      var _change = notify || notifySpy ? {\n        type: UPDATE,\n        observableKind: \"object\",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        oldValue: observable.value_,\n        name: key,\n        newValue: newValue\n      } : null;\n\n      if ( true && notifySpy) spyReportStart(_change);\n      observable.setNewValue_(newValue);\n      if (notify) notifyListeners(this, _change);\n      if ( true && notifySpy) spyReportEnd();\n    }\n\n    return true;\n  };\n\n  _proto.get_ = function get_(key) {\n    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n      // Key doesn't exist yet, subscribe for it in case it's added later\n      this.has_(key);\n    }\n\n    return this.target_[key];\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {any} value\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.set_ = function set_(key, value, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    // Don't use .has(key) - we care about own\n    if (hasProp(this.target_, key)) {\n      // Existing prop\n      if (this.values_.has(key)) {\n        // Observable (can be intercepted)\n        return this.setObservablePropValue_(key, value);\n      } else if (proxyTrap) {\n        // Non-observable - proxy\n        return Reflect.set(this.target_, key, value);\n      } else {\n        // Non-observable\n        this.target_[key] = value;\n        return true;\n      }\n    } else {\n      // New prop\n      return this.extend_(key, {\n        value: value,\n        enumerable: true,\n        writable: true,\n        configurable: true\n      }, this.defaultAnnotation_, proxyTrap);\n    }\n  } // Trap for \"in\"\n  ;\n\n  _proto.has_ = function has_(key) {\n    if (!globalState.trackingDerivation) {\n      // Skip key subscription outside derivation\n      return key in this.target_;\n    }\n\n    this.pendingKeys_ || (this.pendingKeys_ = new Map());\n    var entry = this.pendingKeys_.get(key);\n\n    if (!entry) {\n      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + \".\" + stringifyKey(key) + \"?\" : 0, false);\n      this.pendingKeys_.set(key, entry);\n    }\n\n    return entry.get();\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\r\n   */\n  ;\n\n  _proto.make_ = function make_(key, annotation) {\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n\n    if (annotation === false) {\n      return;\n    }\n\n    assertAnnotable(this, annotation, key);\n\n    if (!(key in this.target_)) {\n      var _this$target_$storedA;\n\n      // Throw on missing key, except for decorators:\n      // Decorator annotations are collected from whole prototype chain.\n      // When called from super() some props may not exist yet.\n      // However we don't have to worry about missing prop,\n      // because the decorator must have been applied to something.\n      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) == null ? void 0 : _this$target_$storedA[key]) {\n        return; // will be annotated by subclass constructor\n      } else {\n        die(1, annotation.annotationType_, this.name_ + \".\" + key.toString());\n      }\n    }\n\n    var source = this.target_;\n\n    while (source && source !== objectPrototype) {\n      var descriptor = getDescriptor(source, key);\n\n      if (descriptor) {\n        var outcome = annotation.make_(this, key, descriptor, source);\n        if (outcome === 0\n        /* Cancel */\n        ) return;\n        if (outcome === 1\n        /* Break */\n        ) break;\n      }\n\n      source = Object.getPrototypeOf(source);\n    }\n\n    recordAnnotationApplied(this, annotation, key);\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    if (annotation === true) {\n      annotation = this.defaultAnnotation_;\n    }\n\n    if (annotation === false) {\n      return this.defineProperty_(key, descriptor, proxyTrap);\n    }\n\n    assertAnnotable(this, annotation, key);\n    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);\n\n    if (outcome) {\n      recordAnnotationApplied(this, annotation, key);\n    }\n\n    return outcome;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: descriptor.value\n        });\n        if (!change) return null;\n        var newValue = change.newValue;\n\n        if (descriptor.value !== newValue) {\n          descriptor = _extends({}, descriptor, {\n            value: newValue\n          });\n        }\n      } // Define\n\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      } // Notify\n\n\n      this.notifyPropertyAddition_(key, descriptor.value);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: value\n        });\n        if (!change) return null;\n        value = change.newValue;\n      }\n\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: true,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      var observable = new ObservableValue(value, enhancer,  true ? this.name_ + \".\" + key.toString() : 0, false);\n      this.values_.set(key, observable); // Notify (value possibly changed by ObservableValue)\n\n      this.notifyPropertyAddition_(key, observable.value_);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  } // If original descriptor becomes relevant, move this to annotation directly\n  ;\n\n  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    try {\n      startBatch(); // Delete\n\n      var deleteOutcome = this.delete_(key);\n\n      if (!deleteOutcome) {\n        // Failure or intercepted\n        return deleteOutcome;\n      } // ADD interceptor\n\n\n      if (hasInterceptors(this)) {\n        var change = interceptChange(this, {\n          object: this.proxy_ || this.target_,\n          name: key,\n          type: ADD,\n          newValue: undefined\n        });\n        if (!change) return null;\n      }\n\n      options.name || (options.name =  true ? this.name_ + \".\" + key.toString() : 0);\n      options.context = this.proxy_ || this.target_;\n      var cachedDescriptor = getCachedObservablePropDescriptor(key);\n      var descriptor = {\n        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n        enumerable: false,\n        get: cachedDescriptor.get,\n        set: cachedDescriptor.set\n      }; // Define\n\n      if (proxyTrap) {\n        if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n          return false;\n        }\n      } else {\n        defineProperty(this.target_, key, descriptor);\n      }\n\n      this.values_.set(key, new ComputedValue(options)); // Notify\n\n      this.notifyPropertyAddition_(key, undefined);\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * @param {PropertyKey} key\r\n   * @param {PropertyDescriptor} descriptor\r\n   * @param {boolean} proxyTrap whether it's called from proxy trap\r\n   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\r\n   */\n  ;\n\n  _proto.delete_ = function delete_(key, proxyTrap) {\n    if (proxyTrap === void 0) {\n      proxyTrap = false;\n    }\n\n    // No such prop\n    if (!hasProp(this.target_, key)) {\n      return true;\n    } // Intercept\n\n\n    if (hasInterceptors(this)) {\n      var change = interceptChange(this, {\n        object: this.proxy_ || this.target_,\n        name: key,\n        type: REMOVE\n      }); // Cancelled\n\n      if (!change) return null;\n    } // Delete\n\n\n    try {\n      var _this$pendingKeys_, _this$pendingKeys_$ge;\n\n      startBatch();\n      var notify = hasListeners(this);\n      var notifySpy =  true && isSpyEnabled();\n      var observable = this.values_.get(key); // Value needed for spies/listeners\n\n      var value = undefined; // Optimization: don't pull the value unless we will need it\n\n      if (!observable && (notify || notifySpy)) {\n        var _getDescriptor;\n\n        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;\n      } // delete prop (do first, may fail)\n\n\n      if (proxyTrap) {\n        if (!Reflect.deleteProperty(this.target_, key)) {\n          return false;\n        }\n      } else {\n        delete this.target_[key];\n      } // Allow re-annotating this field\n\n\n      if (true) {\n        delete this.appliedAnnotations_[key];\n      } // Clear observable\n\n\n      if (observable) {\n        this.values_[\"delete\"](key); // for computed, value is undefined\n\n        if (observable instanceof ObservableValue) {\n          value = observable.value_;\n        } // Notify: autorun(() => obj[key]), see #1796\n\n\n        propagateChanged(observable);\n      } // Notify \"keys/entries/values\" observers\n\n\n      this.keysAtom_.reportChanged(); // Notify \"has\" observers\n      // \"in\" as it may still exist in proto\n\n      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners\n\n      if (notify || notifySpy) {\n        var _change2 = {\n          type: REMOVE,\n          observableKind: \"object\",\n          object: this.proxy_ || this.target_,\n          debugObjectName: this.name_,\n          oldValue: value,\n          name: key\n        };\n        if ( true && notifySpy) spyReportStart(_change2);\n        if (notify) notifyListeners(this, _change2);\n        if ( true && notifySpy) spyReportEnd();\n      }\n    } finally {\n      endBatch();\n    }\n\n    return true;\n  }\n  /**\r\n   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\r\n   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\r\n   * for callback details\r\n   */\n  ;\n\n  _proto.observe_ = function observe_(callback, fireImmediately) {\n    if ( true && fireImmediately === true) die(\"`observe` doesn't support the fire immediately property for observable objects.\");\n    return registerListener(this, callback);\n  };\n\n  _proto.intercept_ = function intercept_(handler) {\n    return registerInterceptor(this, handler);\n  };\n\n  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {\n    var _this$pendingKeys_2, _this$pendingKeys_2$g;\n\n    var notify = hasListeners(this);\n    var notifySpy =  true && isSpyEnabled();\n\n    if (notify || notifySpy) {\n      var change = notify || notifySpy ? {\n        type: ADD,\n        observableKind: \"object\",\n        debugObjectName: this.name_,\n        object: this.proxy_ || this.target_,\n        name: key,\n        newValue: value\n      } : null;\n      if ( true && notifySpy) spyReportStart(change);\n      if (notify) notifyListeners(this, change);\n      if ( true && notifySpy) spyReportEnd();\n    }\n\n    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify \"keys/entries/values\" observers\n\n    this.keysAtom_.reportChanged();\n  };\n\n  _proto.ownKeys_ = function ownKeys_() {\n    this.keysAtom_.reportObserved();\n    return ownKeys(this.target_);\n  };\n\n  _proto.keys_ = function keys_() {\n    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n    // We choose to over-report in Object.keys(object), because:\n    // - typically it's used with simple data objects\n    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n    this.keysAtom_.reportObserved();\n    return Object.keys(this.target_);\n  };\n\n  return ObservableObjectAdministration;\n}();\nfunction asObservableObject(target, options) {\n  var _options$name;\n\n  if ( true && options && isObservableObject(target)) {\n    die(\"Options can't be provided for already observable objects.\");\n  }\n\n  if (hasProp(target, $mobx)) {\n    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n      die(\"Cannot convert '\" + getDebugName(target) + \"' into observable object:\" + \"\\nThe target is already observable of different type.\" + \"\\nExtending builtins is not supported.\");\n    }\n\n    return target;\n  }\n\n  if ( true && !Object.isExtensible(target)) die(\"Cannot make the designated object observable; it is not extensible\");\n  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? \"ObservableObject\" : target.constructor.name) + \"@\" + getNextId() : 0;\n  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));\n  addHiddenProp(target, $mobx, adm);\n  return target;\n}\nvar isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate(\"ObservableObjectAdministration\", ObservableObjectAdministration);\n\nfunction getCachedObservablePropDescriptor(key) {\n  return descriptorCache[key] || (descriptorCache[key] = {\n    get: function get() {\n      return this[$mobx].getObservablePropValue_(key);\n    },\n    set: function set(value) {\n      return this[$mobx].setObservablePropValue_(key, value);\n    }\n  });\n}\n\nfunction isObservableObject(thing) {\n  if (isObject(thing)) {\n    return isObservableObjectAdministration(thing[$mobx]);\n  }\n\n  return false;\n}\nfunction recordAnnotationApplied(adm, annotation, key) {\n  var _adm$target_$storedAn;\n\n  if (true) {\n    adm.appliedAnnotations_[key] = annotation;\n  } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n\n\n  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];\n}\n\nfunction assertAnnotable(adm, annotation, key) {\n  // Valid annotation\n  if ( true && !isAnnotation(annotation)) {\n    die(\"Cannot annotate '\" + adm.name_ + \".\" + key.toString() + \"': Invalid annotation.\");\n  }\n  /*\r\n  // Configurable, not sealed, not frozen\r\n  // Possibly not needed, just a little better error then the one thrown by engine.\r\n  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\r\n  if (__DEV__) {\r\n      const configurable = getDescriptor(adm.target_, key)?.configurable\r\n      const frozen = Object.isFrozen(adm.target_)\r\n      const sealed = Object.isSealed(adm.target_)\r\n      if (!configurable || frozen || sealed) {\r\n          const fieldName = `${adm.name_}.${key.toString()}`\r\n          const requestedAnnotationType = annotation.annotationType_\r\n          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\r\n          if (frozen) {\r\n              error += `\\nObject is frozen.`\r\n          }\r\n          if (sealed) {\r\n              error += `\\nObject is sealed.`\r\n          }\r\n          if (!configurable) {\r\n              error += `\\nproperty is not configurable.`\r\n              // Mention only if caused by us to avoid confusion\r\n              if (hasProp(adm.appliedAnnotations!, key)) {\r\n                  error += `\\nTo prevent accidental re-definition of a field by a subclass, `\r\n                  error += `all annotated fields of non-plain objects (classes) are not configurable.`\r\n              }\r\n          }\r\n          die(error)\r\n      }\r\n  }\r\n  */\n  // Not annotated\n\n\n  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {\n    var fieldName = adm.name_ + \".\" + key.toString();\n    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;\n    var requestedAnnotationType = annotation.annotationType_;\n    die(\"Cannot apply '\" + requestedAnnotationType + \"' to '\" + fieldName + \"':\" + (\"\\nThe field is already annotated with '\" + currentAnnotationType + \"'.\") + \"\\nRe-annotating fields is not allowed.\" + \"\\nUse 'override' annotation for methods overriden by subclass.\");\n  }\n}\n\n/**\r\n * This array buffer contains two lists of properties, so that all arrays\r\n * can recycle their property definitions, which significantly improves performance of creating\r\n * properties on the fly.\r\n */\n\nvar OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array\n\nvar StubArray = function StubArray() {};\n\nfunction inherit(ctor, proto) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ctor.prototype, proto);\n  } else if (ctor.prototype.__proto__ !== undefined) {\n    ctor.prototype.__proto__ = proto;\n  } else {\n    ctor.prototype = proto;\n  }\n}\n\ninherit(StubArray, Array.prototype); // Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nvar LegacyObservableArray = /*#__PURE__*/function (_StubArray) {\n  _inheritsLoose(LegacyObservableArray, _StubArray);\n\n  function LegacyObservableArray(initialValues, enhancer, name, owned) {\n    var _this;\n\n    if (name === void 0) {\n      name =  true ? \"ObservableArray@\" + getNextId() : 0;\n    }\n\n    if (owned === void 0) {\n      owned = false;\n    }\n\n    _this = _StubArray.call(this) || this;\n    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);\n    adm.proxy_ = _assertThisInitialized(_this);\n    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);\n\n    if (initialValues && initialValues.length) {\n      var prev = allowStateChangesStart(true); // @ts-ignore\n\n      _this.spliceWithArray(0, 0, initialValues);\n\n      allowStateChangesEnd(prev);\n    }\n\n    return _this;\n  }\n\n  var _proto = LegacyObservableArray.prototype;\n\n  _proto.concat = function concat() {\n    this[$mobx].atom_.reportObserved();\n\n    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n      arrays[_key] = arguments[_key];\n    }\n\n    return Array.prototype.concat.apply(this.slice(), //@ts-ignore\n    arrays.map(function (a) {\n      return isObservableArray(a) ? a.slice() : a;\n    }));\n  };\n\n  _proto[Symbol.iterator] = function () {\n    var self = this;\n    var nextIndex = 0;\n    return makeIterable({\n      next: function next() {\n        // @ts-ignore\n        return nextIndex < self.length ? {\n          value: self[nextIndex++],\n          done: false\n        } : {\n          done: true,\n          value: undefined\n        };\n      }\n    });\n  };\n\n  _createClass(LegacyObservableArray, [{\n    key: \"length\",\n    get: function get() {\n      return this[$mobx].getArrayLength_();\n    },\n    set: function set(newLength) {\n      this[$mobx].setArrayLength_(newLength);\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return \"Array\";\n    }\n  }]);\n\n  return LegacyObservableArray;\n}(StubArray);\n\nObject.entries(arrayExtensions).forEach(function (_ref) {\n  var prop = _ref[0],\n      fn = _ref[1];\n  if (prop !== \"concat\") addHiddenProp(LegacyObservableArray.prototype, prop, fn);\n});\n\nfunction createArrayEntryDescriptor(index) {\n  return {\n    enumerable: false,\n    configurable: true,\n    get: function get() {\n      return this[$mobx].get_(index);\n    },\n    set: function set(value) {\n      this[$mobx].set_(index, value);\n    }\n  };\n}\n\nfunction createArrayBufferItem(index) {\n  defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index));\n}\n\nfunction reserveArrayBuffer(max) {\n  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n      createArrayBufferItem(index);\n    }\n\n    OBSERVABLE_ARRAY_BUFFER_SIZE = max;\n  }\n}\nreserveArrayBuffer(1000);\nfunction createLegacyArray(initialValues, enhancer, name) {\n  return new LegacyObservableArray(initialValues, enhancer, name);\n}\n\nfunction getAtom(thing, property) {\n  if (typeof thing === \"object\" && thing !== null) {\n    if (isObservableArray(thing)) {\n      if (property !== undefined) die(23);\n      return thing[$mobx].atom_;\n    }\n\n    if (isObservableSet(thing)) {\n      return thing[$mobx];\n    }\n\n    if (isObservableMap(thing)) {\n      if (property === undefined) return thing.keysAtom_;\n      var observable = thing.data_.get(property) || thing.hasMap_.get(property);\n      if (!observable) die(25, property, getDebugName(thing));\n      return observable;\n    }\n\n    if (isObservableObject(thing)) {\n      if (!property) return die(26);\n\n      var _observable = thing[$mobx].values_.get(property);\n\n      if (!_observable) die(27, property, getDebugName(thing));\n      return _observable;\n    }\n\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n      return thing;\n    }\n  } else if (isFunction(thing)) {\n    if (isReaction(thing[$mobx])) {\n      // disposer function\n      return thing[$mobx];\n    }\n  }\n\n  die(28);\n}\nfunction getAdministration(thing, property) {\n  if (!thing) die(29);\n  if (property !== undefined) return getAdministration(getAtom(thing, property));\n  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;\n  if (isObservableMap(thing) || isObservableSet(thing)) return thing;\n  if (thing[$mobx]) return thing[$mobx];\n  die(24, thing);\n}\nfunction getDebugName(thing, property) {\n  var named;\n\n  if (property !== undefined) {\n    named = getAtom(thing, property);\n  } else if (isAction(thing)) {\n    return thing.name;\n  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n    named = getAdministration(thing);\n  } else {\n    // valid for arrays as well\n    named = getAtom(thing);\n  }\n\n  return named.name_;\n}\n\nvar toString = objectPrototype.toString;\nfunction deepEqual(a, b, depth) {\n  if (depth === void 0) {\n    depth = -1;\n  }\n\n  return eq(a, b, depth);\n} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\n\nfunction eq(a, b, depth, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = typeof a;\n  if (!isFunction(type) && type !== \"object\" && typeof b != \"object\") return false; // Compare `[[Class]]` names.\n\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n\n  switch (className) {\n    // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n    case \"[object RegExp]\": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case \"[object String]\":\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return \"\" + a === \"\" + b;\n\n    case \"[object Number]\":\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case \"[object Date]\":\n    case \"[object Boolean]\":\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case \"[object Symbol]\":\n      return typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);\n\n    case \"[object Map]\":\n    case \"[object Set]\":\n      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n      // Hide this extra level by increasing the depth.\n      if (depth >= 0) {\n        depth++;\n      }\n\n      break;\n  } // Unwrap any wrapped objects.\n\n\n  a = unwrap(a);\n  b = unwrap(b);\n  var areArrays = className === \"[object Array]\";\n\n  if (!areArrays) {\n    if (typeof a != \"object\" || typeof b != \"object\") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && \"constructor\" in a && \"constructor\" in b) {\n      return false;\n    }\n  }\n\n  if (depth === 0) {\n    return false;\n  } else if (depth < 0) {\n    depth = -1;\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var keys = Object.keys(a);\n    var key;\n    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (Object.keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = keys[length];\n      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\nfunction unwrap(a) {\n  if (isObservableArray(a)) return a.slice();\n  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());\n  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());\n  return a;\n}\n\nfunction makeIterable(iterator) {\n  iterator[Symbol.iterator] = getSelf;\n  return iterator;\n}\n\nfunction getSelf() {\n  return this;\n}\n\nfunction isAnnotation(thing) {\n  return (// Can be function\n    thing instanceof Object && typeof thing.annotationType_ === \"string\" && isFunction(thing.make_) && isFunction(thing.extend_)\n  );\n}\n\n/**\r\n * (c) Michel Weststrate 2015 - 2020\r\n * MIT Licensed\r\n *\r\n * Welcome to the mobx sources! To get an global overview of how MobX internally works,\r\n * this is a good place to start:\r\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\r\n *\r\n * Source folders:\r\n * ===============\r\n *\r\n * - api/     Most of the public static methods exposed by the module can be found here.\r\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\r\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\r\n * - utils/   Utility stuff.\r\n *\r\n */\n[\"Symbol\", \"Map\", \"Set\", \"Symbol\"].forEach(function (m) {\n  var g = getGlobal();\n\n  if (typeof g[m] === \"undefined\") {\n    die(\"MobX requires global '\" + m + \"' to be available or polyfilled\");\n  }\n});\n\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n  // See: https://github.com/andykog/mobx-devtools/\n  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n    spy: spy,\n    extras: {\n      getDebugName: getDebugName\n    },\n    $mobx: $mobx\n  });\n}\n\n\n//# sourceMappingURL=mobx.esm.js.map\n\n\n//# sourceURL=webpack://umd/../../walax/node_modules/mobx/dist/mobx.esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	umd = __webpack_exports__;
/******/ 	
/******/ })()
;